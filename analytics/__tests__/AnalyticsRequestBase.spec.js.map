{"version":3,"sources":["../../../src/analytics/__tests__/AnalyticsRequestBase.spec.js"],"names":["jest","mock","customEncodeURIComponent","fn","x","endPoint","path","program","format","basePath","dimensions","dimension","items","buildRequest","overrides","AnalyticsRequestBase","parameters","foo","describe","beforeEach","mockClear","it","request","url","buildUrl","expect","toHaveBeenCalledTimes","toBe","sorted","query","buildQuery","toMatchObject","request2","filters","query2","filter"],"mappings":"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","sourcesContent":["import AnalyticsRequestBase from '../AnalyticsRequestBase';\nimport { customEncodeURIComponent } from '../../lib/utils';\n\njest.mock('../../lib/utils', () => ({ customEncodeURIComponent: jest.fn(x => `<${x}>`) }));\n\nconst endPoint = 'foo';\nconst path = 'bar';\nconst program = 'census';\nconst format = 'json';\n\nconst basePath = `${endPoint}/${path}/${program}.${format}`;\nconst dimensions = [\n    { dimension: 'ou', items: ['mars', 'earth'] },\n    { dimension: 'dx', items: ['population'] },\n    { dimension: 'question' },\n    { dimension: 'answer', items: ['42'] },\n];\nconst buildRequest = (overrides) => {\n    return new AnalyticsRequestBase({\n        endPoint,\n        path,\n        program,\n        format,\n        parameters: {\n            foo: 'bar',\n        },\n        ...overrides,\n    });\n};\n\n\ndescribe('AnalyticsRequestBase', () => {\n    beforeEach(() => {\n        customEncodeURIComponent.mockClear();\n    });\n\n    it('Should build a URL of encoded dimension parameters', () => {\n        const request = buildRequest({ dimensions });\n        const url = request.buildUrl();\n        expect(customEncodeURIComponent).toHaveBeenCalledTimes(4);\n        expect(url).toBe(`${basePath}?dimension=ou:<mars>;<earth>&dimension=dx:<population>&dimension=question&dimension=answer:<42>`);\n    });\n\n    it('Should build a URL with sorted dimension parameters when options.sorted=true', () => {\n        const request = buildRequest({ dimensions });\n        const url = request.buildUrl({ sorted: true });\n        expect(customEncodeURIComponent).toHaveBeenCalledTimes(4);\n        expect(url).toBe(`${basePath}?dimension=answer:<42>&dimension=dx:<population>&dimension=ou:<earth>;<mars>&dimension=question`);\n    });\n\n    it('Should not choke on a null or empty filter array', () => {\n        const request = buildRequest();\n        const query = request.buildQuery();\n        expect(customEncodeURIComponent).toHaveBeenCalledTimes(0);\n        expect(query).toMatchObject({\n            foo: 'bar',\n        });\n\n        const request2 = buildRequest({ filters: [] });\n        const query2 = request2.buildQuery();\n        expect(customEncodeURIComponent).toHaveBeenCalledTimes(0);\n        expect(query2).toMatchObject({\n            foo: 'bar',\n        });\n    });\n\n    it('Should build a query with encoded filter parameters', () => {\n        const request = buildRequest({ filters: dimensions });\n        const query = request.buildQuery();\n        expect(customEncodeURIComponent).toHaveBeenCalledTimes(4);\n        expect(query).toMatchObject({\n            foo: 'bar',\n            filter: [\n                'ou:<mars>;<earth>',\n                'dx:<population>',\n                'question',\n                'answer:<42>',\n            ],\n        });\n    });\n\n    it('Should build a query with sorted filter parameters when options.sorted=true', () => {\n        const request = buildRequest({ filters: dimensions });\n        const query = request.buildQuery({ sorted: true });\n        expect(customEncodeURIComponent).toHaveBeenCalledTimes(4);\n        expect(query).toMatchObject({\n            foo: 'bar',\n            filter: [\n                'answer:<42>',\n                'dx:<population>',\n                'ou:<earth>;<mars>',\n                'question',\n            ],\n        });\n    });\n});\n"],"file":"AnalyticsRequestBase.spec.js"}