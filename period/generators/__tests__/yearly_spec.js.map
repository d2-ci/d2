{"version":3,"sources":["../../../../src/period/generators/__tests__/yearly_spec.js"],"names":["describe","it","expect","toThrowError","Date","toHaveLength","tenYearlyPeriods","toEqual","endDate","startDate","name","id","fiveYearlyPeriods","Infinity","getFullYear"],"mappings":"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","sourcesContent":["import { generateYearlyPeriodsUpToYear } from '../yearly';\n\ndescribe('Yearly period', () => {\n    describe('generateYearlyPeriodsUpToYear()', () => {\n        it('should not allow years before the year zero', () => {\n            expect(() => generateYearlyPeriodsUpToYear(-10)).toThrowError();\n        });\n\n        it('should throw an error when passing a Date object', () => {\n            expect(() => generateYearlyPeriodsUpToYear(new Date())).toThrowError();\n        });\n\n        it('should generate 10 yearly periods when no numberOfYears was passed', () => {\n            expect(generateYearlyPeriodsUpToYear(2017)).toHaveLength(10);\n        });\n\n        it('should generate periods for 10 years with the last one being the current year', () => {\n            const tenYearlyPeriods = generateYearlyPeriodsUpToYear(2017);\n\n            expect(tenYearlyPeriods).toEqual([\n                {\n                    endDate: '2008-12-31',\n                    startDate: '2008-01-01',\n                    name: '2008',\n                    id: '2008',\n                }, {\n                    endDate: '2009-12-31',\n                    startDate: '2009-01-01',\n                    name: '2009',\n                    id: '2009',\n                }, {\n                    endDate: '2010-12-31',\n                    startDate: '2010-01-01',\n                    name: '2010',\n                    id: '2010',\n                }, {\n                    endDate: '2011-12-31',\n                    startDate: '2011-01-01',\n                    name: '2011',\n                    id: '2011',\n                }, {\n                    endDate: '2012-12-31',\n                    startDate: '2012-01-01',\n                    name: '2012',\n                    id: '2012',\n                }, {\n                    endDate: '2013-12-31',\n                    startDate: '2013-01-01',\n                    name: '2013',\n                    id: '2013',\n                }, {\n                    endDate: '2014-12-31',\n                    startDate: '2014-01-01',\n                    name: '2014',\n                    id: '2014',\n                }, {\n                    endDate: '2015-12-31',\n                    startDate: '2015-01-01',\n                    name: '2015',\n                    id: '2015',\n                }, {\n                    endDate: '2016-12-31',\n                    startDate: '2016-01-01',\n                    name: '2016',\n                    id: '2016',\n                }, {\n                    endDate: '2017-12-31',\n                    startDate: '2017-01-01',\n                    name: '2017',\n                    id: '2017',\n                },\n            ]);\n        });\n\n        it('should respect the number of years parameter and generate the correct number of years', () => {\n            const fiveYearlyPeriods = generateYearlyPeriodsUpToYear(2017, 5);\n\n            expect(fiveYearlyPeriods).toEqual([\n                {\n                    endDate: '2013-12-31',\n                    startDate: '2013-01-01',\n                    name: '2013',\n                    id: '2013',\n                }, {\n                    endDate: '2014-12-31',\n                    startDate: '2014-01-01',\n                    name: '2014',\n                    id: '2014',\n                }, {\n                    endDate: '2015-12-31',\n                    startDate: '2015-01-01',\n                    name: '2015',\n                    id: '2015',\n                }, {\n                    endDate: '2016-12-31',\n                    startDate: '2016-01-01',\n                    name: '2016',\n                    id: '2016',\n                }, {\n                    endDate: '2017-12-31',\n                    startDate: '2017-01-01',\n                    name: '2017',\n                    id: '2017',\n                },\n            ]);\n        });\n\n        it('should throw an error when the numberOfYears is not a positive integer', () => {\n            expect(() => generateYearlyPeriodsUpToYear(2017, 'a')).toThrowError();\n            expect(() => generateYearlyPeriodsUpToYear(2017, 1.2)).toThrowError();\n            expect(() => generateYearlyPeriodsUpToYear(2017, true)).toThrowError();\n            expect(() => generateYearlyPeriodsUpToYear(2017, -1)).toThrowError();\n            expect(() => generateYearlyPeriodsUpToYear(2017, 0)).toThrowError();\n            expect(() => generateYearlyPeriodsUpToYear(2017, Infinity)).toThrowError();\n        });\n\n        it('should generate the yearly periods for 2021 and 2022', () => {\n            const fiveYearlyPeriods = generateYearlyPeriodsUpToYear(2022, 2);\n\n            expect(fiveYearlyPeriods).toEqual([\n                {\n                    endDate: '2021-12-31',\n                    startDate: '2021-01-01',\n                    name: '2021',\n                    id: '2021',\n                }, {\n                    endDate: '2022-12-31',\n                    startDate: '2022-01-01',\n                    name: '2022',\n                    id: '2022',\n                },\n            ]);\n        });\n\n        it('should use the current year when no year has been given', () => {\n            expect(generateYearlyPeriodsUpToYear()).toEqual(generateYearlyPeriodsUpToYear(new Date().getFullYear()));\n        });\n    });\n});\n"],"file":"yearly_spec.js"}