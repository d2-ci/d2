{"version":3,"sources":["../../../src/model/helpers/attibutes.js"],"names":["getValue","getAttributeValueAttributeName","createPropertyDefinitionsForAttributes","attributeProperties","getAttributeValues","setAttributeValues","setDirty","Object","keys","reduce","propertyDefinitions","attributeName","enumerable","get","attributeValues","filter","attributeValue","current","value","undefined","set","av","attribute","name","remainingAttributeValues","concat","id"],"mappings":";;;;;;;AAAA;;AAIA;;AAEA,IAAMA,QAAQ,GAAG,iBAAK,OAAL,CAAjB;AACA,IAAMC,8BAA8B,GAAG,iBAAK,gBAAL,CAAvC;;AAEA,SAASC,sCAAT,CACIC,mBADJ,EAEIC,kBAFJ,EAGIC,kBAHJ,EAIIC,QAJJ,EAKE;AACE,SAAOC,MAAM,CAACC,IAAP,CAAYL,mBAAZ,EAAiCM,MAAjC,CACH,UAACC,mBAAD,EAAsBC,aAAtB,EAAwC;AACpCD,IAAAA,mBAAmB,CAACC,aAAD,CAAnB,GAAqC;AACjCC,MAAAA,UAAU,EAAE,IADqB;AAEjCC,MAAAA,GAFiC,iBAE3B;AACF,YAAMC,eAAe,GAAGV,kBAAkB,EAA1C;AAEA,eAAOU,eAAe,CACjBC,MADE,CAEC,UAAAC,cAAc;AAAA,iBACVf,8BAA8B,CAC1Be,cAD0B,CAA9B,KAEML,aAHI;AAAA,SAFf,EAOFF,MAPE,CAQC,UAACQ,OAAD,EAAUD,cAAV;AAAA,iBAA6BA,cAAc,CAACE,KAA5C;AAAA,SARD,EASCC,SATD,CAAP;AAWH,OAhBgC;AAiBjCC,MAAAA,GAjBiC,eAiB7BF,KAjB6B,EAiBtB;AACP,YAAMF,cAAc,GAAGZ,kBAAkB,GACpCW,MADkB,CACX,UAAAM,EAAE;AAAA,iBAAIA,EAAE,CAACC,SAAH,CAAaC,IAAb,KAAsBZ,aAA1B;AAAA,SADS,EAElBF,MAFkB,CAEX,UAACQ,OAAD,EAAUI,EAAV;AAAA,iBAAiBA,EAAjB;AAAA,SAFW,EAEUF,SAFV,CAAvB;;AAIA,YAAI,+BAAmBnB,QAAQ,CAACgB,cAAD,CAA3B,EAA6CE,KAA7C,CAAJ,EAAyD;AACrD,iBADqD,CAC9C;AACV;;AAED,YAAIF,cAAJ,EAAoB;AAChB;AACA;AACA;AACA;AACA,cAAI,yCAA6BE,KAA7B,CAAJ,EAAyC;AACrC,gBAAMM,wBAAwB,GAAGpB,kBAAkB,GAAGW,MAArB,CAC7B,UAAAM,EAAE;AAAA,qBAAIA,EAAE,KAAKL,cAAX;AAAA,aAD2B,CAAjC;AAGAX,YAAAA,kBAAkB,CAACmB,wBAAD,CAAlB;AACH;;AAEDR,UAAAA,cAAc,CAACE,KAAf,GAAuBA,KAAvB;AACH,SAbD,MAaO;AACH;AACAb,UAAAA,kBAAkB,CACdD,kBAAkB,GAAGqB,MAArB,CAA4B;AACxBP,YAAAA,KAAK,EAALA,KADwB;AAExBI,YAAAA,SAAS,EAAE;AACPI,cAAAA,EAAE,EAAEvB,mBAAmB,CAACQ,aAAD,CAAnB,CAAmCe,EADhC;AAEPH,cAAAA,IAAI,EACApB,mBAAmB,CAACQ,aAAD,CAAnB,CAAmCY;AAHhC;AAFa,WAA5B,CADc,CAAlB;AAUH,SAlCM,CAoCP;;;AACAjB,QAAAA,QAAQ;AACX;AAvDgC,KAArC;AA0DA,WAAOI,mBAAP;AACH,GA7DE,EA8DH,EA9DG,CAAP;AAgEH;;eAEcR,sC","sourcesContent":["import {\n    areDefinedAndEqual,\n    isNullUndefinedOrEmptyString,\n} from '../../lib/check'\nimport { pick } from '../../lib/utils'\n\nconst getValue = pick('value')\nconst getAttributeValueAttributeName = pick('attribute.name')\n\nfunction createPropertyDefinitionsForAttributes(\n    attributeProperties,\n    getAttributeValues,\n    setAttributeValues,\n    setDirty\n) {\n    return Object.keys(attributeProperties).reduce(\n        (propertyDefinitions, attributeName) => {\n            propertyDefinitions[attributeName] = {\n                enumerable: true,\n                get() {\n                    const attributeValues = getAttributeValues()\n\n                    return attributeValues\n                        .filter(\n                            attributeValue =>\n                                getAttributeValueAttributeName(\n                                    attributeValue\n                                ) === attributeName\n                        )\n                        .reduce(\n                            (current, attributeValue) => attributeValue.value,\n                            undefined\n                        )\n                },\n                set(value) {\n                    const attributeValue = getAttributeValues()\n                        .filter(av => av.attribute.name === attributeName)\n                        .reduce((current, av) => av, undefined)\n\n                    if (areDefinedAndEqual(getValue(attributeValue), value)) {\n                        return // Don't do anything if the value stayed the same\n                    }\n\n                    if (attributeValue) {\n                        // Remove the attributeValue from the array of attributeValues on the object\n                        // This is done because the server can not handle them properly when empty strings\n                        // as values are sent. It will properly remove the attributeValue\n                        // on the server side when they are not being send to the server at all.\n                        if (isNullUndefinedOrEmptyString(value)) {\n                            const remainingAttributeValues = getAttributeValues().filter(\n                                av => av !== attributeValue\n                            )\n                            setAttributeValues(remainingAttributeValues)\n                        }\n\n                        attributeValue.value = value\n                    } else {\n                        // Add the new attribute value to the attributeValues collection\n                        setAttributeValues(\n                            getAttributeValues().concat({\n                                value,\n                                attribute: {\n                                    id: attributeProperties[attributeName].id,\n                                    name:\n                                        attributeProperties[attributeName].name,\n                                },\n                            })\n                        )\n                    }\n\n                    // Set the model to be dirty\n                    setDirty()\n                },\n            }\n\n            return propertyDefinitions\n        },\n        {}\n    )\n}\n\nexport default createPropertyDefinitionsForAttributes\n"],"file":"attibutes.js"}