{"version":3,"sources":["../../../src/datastore/__tests__/DatastoreNamespace.spec.js"],"names":["jest","mock","describe","keys","namespace","apiMock","beforeEach","MockApi","getApi","DataStoreNamespace","get","mockReturnValue","Promise","resolve","post","update","delete","afterEach","mockReset","it","expect","toThrowError","Array","isArray","toBe","toEqual","refreshedKeys","concat","mockClear","assertions","getKeys","then","res","toHaveBeenCalled","mockReturnValueOnce","toBeCalledWith","catch","namespaceRes","message","val","key","metaObj","created","lastUpdated","externalAccess","value","id","getMetaData","valueData","spyOn","setKey","set","not","arr","encryptedVal","prop","calls","toHaveBeenCalledWith","length","toContain","orgLen","err","toMatch"],"mappings":"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","sourcesContent":["import DataStoreNamespace from '../../datastore/DataStoreNamespace';\nimport MockApi from '../../api/Api';\n\njest.mock('../../api/Api');\n\ndescribe('DataStoreNamespace', () => {\n    const keys = ['key1', 'a key', 'aowelfkxuw'];\n    let namespace;\n    let apiMock;\n\n    beforeEach(() => {\n        apiMock = MockApi.getApi();\n\n        namespace = new DataStoreNamespace('DHIS', keys, apiMock);\n\n        apiMock.get.mockReturnValue(Promise.resolve());\n        apiMock.post.mockReturnValue(Promise.resolve());\n        apiMock.update.mockReturnValue(Promise.resolve());\n        apiMock.delete.mockReturnValue(Promise.resolve());\n    });\n\n    afterEach(() => {\n        MockApi.mockReset();\n    });\n\n    it('should throw an error if not called with a string', () => {\n        expect(() => new DataStoreNamespace()).toThrowError(\n            'BaseStoreNamespace must be called with a string to identify the Namespace',\n        );\n    });\n\n    it('should contain an array of keys', () => {\n        expect(Array.isArray(namespace.keys)).toBe(true);\n        expect(namespace.keys).toEqual(keys);\n    });\n\n    it('should contain a string of a namespace', () => {\n        expect(typeof namespace.namespace).toBe('string');\n    });\n\n    describe('getKeys()', () => {\n        const refreshedKeys = keys.concat('newkey');\n        beforeEach(() => {\n            apiMock.get.mockClear();\n            apiMock.get.mockReturnValue(Promise.resolve(keys));\n        });\n\n        it('should return an array of keys', () => {\n            expect.assertions(1);\n\n            return namespace\n                .getKeys()\n                .then((res) => {\n                    expect(res).toEqual(keys);\n                });\n        });\n\n        it('should be backwards compatible with getKeys(false), but send request either way', () => {\n            namespace.getKeys().then((res) => {\n                expect(res).toEqual(keys);\n                expect(apiMock.get).toHaveBeenCalled();\n            });\n        });\n\n        it('should call remote api if forceload is true and update internal array', () => {\n            apiMock.get.mockReturnValueOnce(Promise.resolve(refreshedKeys));\n\n            expect.assertions(3);\n\n            return namespace\n                .getKeys(true)\n                .then((res) => {\n                    expect(res).toEqual(refreshedKeys);\n                    expect(namespace.keys).toEqual(refreshedKeys);\n                    expect(apiMock.get).toBeCalledWith('dataStore/DHIS');\n                });\n        });\n\n        it('should throw an error when there is no response', () => {\n            apiMock.get.mockReturnValueOnce(Promise.resolve({}));\n\n            expect.assertions(1);\n\n            return namespace\n                .getKeys(true)\n                .catch((namespaceRes) => {\n                    expect(namespaceRes.message).toBe(\n                        'The requested namespace has no keys or does not exist.',\n                    );\n                });\n        });\n    });\n\n    describe('get()', () => {\n        beforeEach(() => {\n            apiMock.get.mockReturnValueOnce(Promise.resolve('value'));\n        });\n\n        it('should call API with correct parameters', () => {\n            expect.assertions(1);\n\n            return namespace\n                .get('key1')\n                .then(() => {\n                    expect(apiMock.get).toBeCalledWith('dataStore/DHIS/key1');\n                });\n        });\n\n        it('should return a value', () => {\n            expect.assertions(1);\n\n            return namespace\n                .get('key1')\n                .then((val) => {\n                    expect(val).toBe('value');\n                });\n        });\n    });\n\n    describe('getMetaData()', () => {\n        const key = 'key1';\n        const metaObj = {\n            created: '2017-01-22T14:15:14.176',\n            lastUpdated: '2017-01-22T14:15:14.176',\n            externalAccess: false,\n            namespace: 'DHIS',\n            key: 'key1',\n            value: '{}',\n            id: 'B6SZPkuigc0',\n        };\n        beforeEach(() => {\n            apiMock.get.mockReturnValueOnce(Promise.resolve(metaObj));\n        });\n\n        it('should retrieve an object with metaData', () => {\n            expect.assertions(1);\n\n            return namespace\n                .getMetaData(key)\n                .then((res) => {\n                    expect(res).toBe(metaObj);\n                });\n        });\n\n        it('should call api.get() with correct parameters', () => {\n            expect.assertions(1);\n\n            return namespace\n                .getMetaData(key)\n                .then(() => {\n                    expect(apiMock.get).toBeCalledWith(\n                        `dataStore/DHIS/${key}/metaData`,\n                    );\n                });\n        });\n    });\n\n    describe('set()', () => {\n        const valueData = 'value';\n        beforeEach(() => {\n            jest.spyOn(namespace, 'update');\n            jest.spyOn(namespace, 'set');\n        });\n\n        it('should call the api with correct url', () => {\n            const setKey = 'DHIS2';\n\n            expect.assertions(1);\n\n            return namespace.set(setKey, valueData).then(() => {\n                expect(apiMock.post).toBeCalledWith(\n                    `dataStore/DHIS/${setKey}`,\n                    valueData,\n                );\n            });\n        });\n\n        it('should update if the key exists', () => {\n            const setKey = 'key1';\n\n            return namespace.set(setKey, valueData).then(() => {\n                expect(namespace.update).toBeCalledWith(setKey, valueData);\n                expect(apiMock.update).toBeCalledWith(\n                    `dataStore/DHIS/${setKey}`,\n                    valueData,\n                );\n            });\n        });\n\n        it('should call post if the key exists and override is true', () => {\n            const setKey = 'key1';\n\n            return namespace.set(setKey, valueData, true).then(() => {\n                expect(namespace.update).not.toHaveBeenCalled();\n                expect(apiMock.post).toBeCalledWith(\n                    `dataStore/DHIS/${setKey}`,\n                    valueData,\n                );\n            });\n        });\n\n        it('should add key to internal array', () => {\n            const arr = namespace.keys;\n            const key = 'key';\n\n            expect.assertions(1);\n\n            return namespace\n                .set('key', valueData)\n                .then(() => {\n                    expect(namespace.keys).toEqual(arr.concat(key));\n                });\n        });\n\n        it('should work with encrypt = true', async () => {\n            const encryptedVal = {\n                prop: 'am encrypted',\n            };\n            await namespace.set('encrypt', encryptedVal, false, true);\n\n            const calls = apiMock.post.mock.calls;\n            expect(namespace.set).toHaveBeenCalledWith(\n                'encrypt',\n                encryptedVal,\n                false,\n                true,\n            );\n\n            expect(calls[calls.length - 1][0]).toContain('encrypt'); // last call with arg0\n        });\n    });\n\n    describe('delete()', () => {\n        it('should call api.delete() with the correct url', () => {\n            expect.assertions(1);\n\n            return namespace\n                .delete('key1')\n                .then(() => {\n                    expect(apiMock.delete).toBeCalledWith(\n                        'dataStore/DHIS/key1',\n                    );\n                });\n        });\n\n        it('should delete key from internal array', () => {\n            const orgLen = namespace.keys.length;\n\n            expect.assertions(1);\n\n            return namespace\n                .delete('key1')\n                .then(() => {\n                    expect(namespace.keys.length).toBe(orgLen - 1);\n                });\n        });\n\n        it('should call api.delete() even if the key was not present in the internal array', () => {\n            expect.assertions(1);\n\n            return namespace\n                .delete('someInaginaryKeyIJustMadeUp')\n                .then(() => {\n                    expect(apiMock.delete).toBeCalledWith(\n                        'dataStore/DHIS/someInaginaryKeyIJustMadeUp',\n                    );\n                });\n        });\n\n        it('should throw if not called with a string', async () => {\n            /* this way of handling errors is quite weird, see\n                    https://github.com/facebook/jest/issues/3601\n                 */\n            let err = null;\n            try {\n                await namespace.delete({});\n            } catch (e) {\n                err = e;\n            }\n            expect(err.message).toMatch(/Expected key to be string, but got/);\n        });\n    });\n\n    describe('update()', () => {\n        const valueData = 'value';\n\n        it('should call the api with correct url', () => {\n            const setKey = 'DHIS';\n\n            expect.assertions(1);\n\n            return namespace\n                .update(setKey, valueData)\n                .then(() => {\n                    expect(apiMock.update).toBeCalledWith(\n                        `dataStore/DHIS/${setKey}`,\n                        valueData,\n                    );\n                });\n        });\n    });\n});\n"],"file":"DatastoreNamespace.spec.js"}