{"version":3,"sources":["../../src/system/SystemConfiguration.js"],"names":["SystemConfiguration","api","getApi","configuration","undefined","configPromise","ignoreCache","get","then","key","all","config","hasOwnProperty","Promise","resolve","reject","value","that","req","delete","join","post","trim","split","dataType","contentType","catch"],"mappings":";;;;;;;;AAAA;;;;;;;;AAEA;;;;;IAKMA,mB;AACF,mCAAgC;AAAA,YAApBC,GAAoB,uEAAd,cAAIC,MAAJ,EAAc;;AAAA;;AAC5B,aAAKD,GAAL,GAAWA,GAAX;;AAEA,aAAKE,aAAL,GAAqBC,SAArB;AACA,aAAKC,aAAL,GAAqB,IAArB;AACH;;AAED;;;;;;;;;;;4BAOIC,W,EAAa;AAAA;;AACb,gBAAI,KAAKD,aAAL,KAAuB,IAAvB,IAA+BC,gBAAgB,IAAnD,EAAyD;AACrD,qBAAKD,aAAL,GAAqB,KAAKJ,GAAL,CAASM,GAAT,CAAa,eAAb,EAChBC,IADgB,CACX,UAACL,aAAD,EAAmB;AACrB,0BAAKA,aAAL,GAAqBA,aAArB;AACA,2BAAO,MAAKA,aAAZ;AACH,iBAJgB,CAArB;AAKH;;AAED,mBAAO,KAAKE,aAAZ;AACH;;AAED;;;;;;;;;;;;4BASII,G,EAAKH,W,EAAa;AAClB,mBAAO,KAAKI,GAAL,CAASJ,WAAT,EAAsBE,IAAtB,CAA2B,UAACG,MAAD,EAAY;AAC1C,oBAAIA,OAAOC,cAAP,CAAsBH,GAAtB,CAAJ,EAAgC;AAC5B,2BAAOI,QAAQC,OAAR,CAAgBH,OAAOF,GAAP,CAAhB,CAAP;AACH;;AAED,uBAAOI,QAAQE,MAAR,6BAAyCN,GAAzC,CAAP;AACH,aANM,CAAP;AAOH;;AAGD;;;;;;;AAOA;;;;4BACIA,G,EAAKO,K,EAAO;AACZ,gBAAMC,OAAO,IAAb;AACA,gBAAIC,YAAJ;;AAEA,gBAAIT,QAAQ,UAAZ,EAAwB;AACpB,uBAAOI,QAAQE,MAAR,CAAe,iCAAf,CAAP;AACH,aAFD,MAEO,IACH,CAACN,QAAQ,oBAAR,IAAgCA,QAAQ,yBAAxC,IAAqEA,QAAQ,sBAA9E,MACCO,UAAU,MAAV,IAAoBA,UAAU,IAD/B,CADG,EAGL;AACE;AACAE,sBAAM,KAAKjB,GAAL,CAASkB,MAAT,CAAgB,CAAC,eAAD,EAAkBV,GAAlB,EAAuBW,IAAvB,CAA4B,GAA5B,CAAhB,CAAN;AACH,aANM,MAMA,IAAIX,QAAQ,eAAZ,EAA6B;AAChC;AACAS,sBAAM,KAAKjB,GAAL,CAASoB,IAAT,CAAc,CAAC,eAAD,EAAkBZ,GAAlB,EAAuBW,IAAvB,CAA4B,GAA5B,CAAd,EAAgDJ,MAAMM,IAAN,GAAaC,KAAb,CAAmB,IAAnB,CAAhD,CAAN;AACH,aAHM,MAGA;AACHL,sBAAM,KAAKjB,GAAL,CAASoB,IAAT,CAAc,CAAC,eAAD,EAAkBZ,GAAlB,EAAuBW,IAAvB,CAA4B,GAA5B,CAAd,EAAgDJ,KAAhD,EAAuD;AACzDQ,8BAAU,MAD+C;AAEzDC,iCAAa;AAF4C,iBAAvD,CAAN;AAIH;;AAED,mBAAOP,IACFV,IADE,CACG,YAAM;AACR;AACA;AACAS,qBAAKd,aAAL,GAAqBC,SAArB;AACA,uBAAOS,QAAQC,OAAR,EAAP;AACH,aANE,EAOFY,KAPE,CAOI;AAAA,uBAAMb,QAAQE,MAAR,iCAA6CN,GAA7C,CAAN;AAAA,aAPJ,CAAP;AAQH;AACD;;;;;;;kBAGWT,mB","file":"SystemConfiguration.js","sourcesContent":["import Api from '../api/Api';\n\n/**\n * Handles communication with the configuration endpoint. Can be used to get or set configuration options.\n *\n * @memberof module:system\n */\nclass SystemConfiguration {\n    constructor(api = Api.getApi()) {\n        this.api = api;\n\n        this.configuration = undefined;\n        this.configPromise = null;\n    }\n\n    /**\n     * Fetches all system configuration settings from the API and caches them so that future\n     * calls to this function won't call the API again.\n     *\n     * @param {boolean} [ignoreCache=false] If set to true, calls the API regardless of cache status\n     * @returns {Promise} Promise that resolves with all the individual configuration options from the api.\n     */\n    all(ignoreCache) {\n        if (this.configPromise === null || ignoreCache === true) {\n            this.configPromise = this.api.get('configuration')\n                .then((configuration) => {\n                    this.configuration = configuration;\n                    return this.configuration;\n                });\n        }\n\n        return this.configPromise;\n    }\n\n    /**\n     * Returns the value of the specified configuration option.\n     *\n     * This is a convenience method that works exactly the same as calling `configuration.all()[name]`.\n     *\n     * @param key {String}\n     * @param {boolean} [ignoreCache=false] If set to true, calls the API regardless of cache status\n     * @returns {Promise}\n     */\n    get(key, ignoreCache) {\n        return this.all(ignoreCache).then((config) => {\n            if (config.hasOwnProperty(key)) {\n                return Promise.resolve(config[key]);\n            }\n\n            return Promise.reject(`Unknown config option: ${key}`);\n        });\n    }\n\n\n    /**\n     * Send a query to the API to change the value of a configuration key to the specified value.\n     *\n     * @param key {String}\n     * @param value {String|null}\n     * @returns {Promise}\n     */\n    /* eslint-disable complexity */\n    set(key, value) {\n        const that = this;\n        let req;\n\n        if (key === 'systemId') {\n            return Promise.reject('The system ID can\\'t be changed');\n        } else if (\n            (key === 'feedbackRecipients' || key === 'selfRegistrationOrgUnit' || key === 'selfRegistrationRole') &&\n            (value === 'null' || value === null)\n        ) {\n            // Only valid UIDs are accepted when POST'ing, so we have to use DELETE in stead of POST'ing a null value.\n            req = this.api.delete(['configuration', key].join('/'));\n        } else if (key === 'corsWhitelist') {\n            // The corsWhitelist endpoint expects a JSON array (of URLs), while here value is expected to be a string.\n            req = this.api.post(['configuration', key].join('/'), value.trim().split('\\n'));\n        } else {\n            req = this.api.post(['configuration', key].join('/'), value, {\n                dataType: 'text',\n                contentType: 'text/plain',\n            });\n        }\n\n        return req\n            .then(() => {\n                // Ideally we'd update the cache here, but doing so requires another trip to the server\n                // For now, just bust the cache to ensure it's not incorrect\n                that.configuration = undefined;\n                return Promise.resolve();\n            })\n            .catch(() => Promise.reject(`No configuration found for ${key}`));\n    }\n    /* eslint-enable complexity */\n}\n\nexport default SystemConfiguration;\n"]}