{"version":3,"sources":["../../../src/geofeatures/__tests__/GeoFeatures.spec.js"],"names":["jest","mock","describe","geoFeatures","beforeEach","GeoFeatures","it","expect","getGeoFeatures","toBeInstanceOf","byOrgUnit","orgUnits","toContain","toEqual","undefined","not","toThrow","displayProperty","displayName","toBe","mockApi","MockApi","getApi","afterEach","mockReset","get","mockReturnValue","Promise","resolve","getAll","toBeCalledWith","ou","includeGroupSets","id","then","features","reject","assertions","catch"],"mappings":"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","sourcesContent":["import MockApi from '../../api/Api';\nimport GeoFeatures from '../GeoFeatures';\n\njest.mock('../../api/Api'); // src/api/__mocks/Api.js\n\ndescribe('GeoFeatures', () => {\n    let geoFeatures;\n\n    beforeEach(() => {\n        geoFeatures = new GeoFeatures();\n    });\n\n    describe('getGeoFeatures', () => {\n        it('should create an instance of GeoFeatures', () => {\n            expect(GeoFeatures.getGeoFeatures()).toBeInstanceOf(GeoFeatures);\n        });\n    });\n\n    describe('byOrgUnit', () => {\n        it('should return an instance of GeoFeatures', () => {\n            expect(geoFeatures.byOrgUnit()).toBeInstanceOf(GeoFeatures);\n        });\n\n        it('should add LEVEL-3 to the orgUnits array', () => {\n            geoFeatures = geoFeatures.byOrgUnit('LEVEL-3');\n\n            expect(geoFeatures.orgUnits).toContain('LEVEL-3');\n        });\n\n        it('should add LEVEL-3 and org unit to the orgUnits array', () => {\n            geoFeatures = geoFeatures.byOrgUnit(['LEVEL-3', 'YuQRtpLP10I']);\n\n            expect(geoFeatures.orgUnits).toEqual(['LEVEL-3', 'YuQRtpLP10I']);\n        });\n\n        it('should not add undefined to the orgUnits array', () => {\n            geoFeatures = geoFeatures.byOrgUnit(undefined);\n\n            expect(geoFeatures.orgUnits).not.toContain(undefined);\n        });\n\n        it('should throw when invalid uid', () => {\n            expect(() => geoFeatures.byOrgUnit('invalid')).toThrow('Invalid organisation unit: invalid');\n        });\n\n        it('should throw when invalid org unit level format', () => {\n            expect(() => geoFeatures.byOrgUnit('LEVEL-1b')).toThrow('Invalid organisation unit: LEVEL-1b');\n        });\n\n        it('should throw when invalid org unit group format', () => {\n            expect(() => geoFeatures.byOrgUnit('OU_GROUP-invalid')).toThrow('Invalid organisation unit: OU_GROUP-invalid');\n        });\n\n        it('should throw when invalid user org unit', () => {\n            expect(() => geoFeatures.byOrgUnit('SHORTNAMES')).toThrow('Invalid organisation unit: SHORTNAMES');\n        });\n    });\n\n    describe('displayProperty', () => {\n        it('should return an instance of GeoFeatures', () => {\n            expect(geoFeatures.displayProperty()).toBeInstanceOf(GeoFeatures);\n        });\n\n        it('should set displayProperty to SHORTNAME', () => {\n            geoFeatures = geoFeatures.displayProperty('SHORTNAME');\n\n            expect(geoFeatures.displayName).toEqual('SHORTNAME');\n        });\n\n        it('should return the same instance when display property is undefined', () => {\n            expect(geoFeatures.displayProperty(undefined)).toBe(geoFeatures);\n        });\n\n        it('should throw when invalid displayProperty', () => {\n            expect(() => geoFeatures.displayProperty('invalid')).toThrow('Invalid display property: invalid');\n        });\n    });\n\n    describe('getAll', () => {\n        let mockApi;\n\n        beforeEach(() => {\n            mockApi = MockApi.getApi();\n        });\n\n        afterEach(() => {\n            MockApi.mockReset();\n        });\n\n        it('should request geoFeature for one org. unit', () => {\n            mockApi.get.mockReturnValue(Promise.resolve([]));\n\n            geoFeatures = geoFeatures.byOrgUnit('YuQRtpLP10I').getAll();\n\n            expect(mockApi.get).toBeCalledWith('geoFeatures', {\n                ou: 'ou:YuQRtpLP10I',\n            });\n        });\n\n        it('should request geoFeature for multiple org. units', () => {\n            mockApi.get.mockReturnValue(Promise.resolve([]));\n\n            geoFeatures = geoFeatures\n                .byOrgUnit(['XuQRtpLP10I', 'YuQRtpLP10I'])\n                .getAll();\n\n            expect(mockApi.get).toBeCalledWith('geoFeatures', {\n                ou: 'ou:XuQRtpLP10I;YuQRtpLP10I',\n            });\n        });\n\n        it('should request geoFeature using uid and SHORTNAME display property', () => {\n            mockApi.get.mockReturnValue(Promise.resolve([]));\n\n            geoFeatures = geoFeatures\n                .byOrgUnit('YuQRtpLP10I')\n                .displayProperty('SHORTNAME')\n                .getAll();\n\n            expect(mockApi.get).toBeCalledWith('geoFeatures', {\n                ou: 'ou:YuQRtpLP10I',\n                displayProperty: 'SHORTNAME',\n            });\n        });\n\n        it('should request geoFeature using uid and extra URL parameter', () => {\n            mockApi.get.mockReturnValue(Promise.resolve([]));\n\n            geoFeatures = geoFeatures\n                .byOrgUnit('YuQRtpLP10I')\n                .getAll({\n                    includeGroupSets: true,\n                });\n\n            expect(mockApi.get).toBeCalledWith('geoFeatures', {\n                ou: 'ou:YuQRtpLP10I',\n                includeGroupSets: true,\n            });\n        });\n\n        it('should return an array of geoFeatures', () => {\n            mockApi.get.mockReturnValue(Promise.resolve([\n                {\n                    id: 'YuQRtpLP10I',\n                },\n            ]));\n\n            // Async test\n            return geoFeatures.byOrgUnit('YuQRtpLP10I').getAll().then((features) => {\n                expect(features).toEqual([\n                    {\n                        id: 'YuQRtpLP10I',\n                    },\n                ]);\n            });\n        });\n\n        it('should reject the promise with an error if a wrong org. unit has been requested', () => {\n            mockApi.get.mockReturnValue(Promise.reject());\n\n            expect.assertions(1);\n\n            return geoFeatures.byOrgUnit('LEVEL-20').getAll()\n                .catch(() => {\n                    // TODO: this seems to just be testing the mock\n                    expect(true).toBe(true);\n                });\n        });\n    });\n});\n"],"file":"GeoFeatures.spec.js"}