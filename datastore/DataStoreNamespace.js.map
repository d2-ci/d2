{"version":3,"sources":["../../src/datastore/DataStoreNamespace.js"],"names":["DataStoreNamespace","namespace","keys","api","getApi","endPoint","key","get","join"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;AAEA;;;;;;;;;;IAUMA,kB;;;AACF,gCAAYC,SAAZ,EAAuBC,IAAvB,EAAyE;AAAA,YAA5CC,GAA4C,uEAAtC,cAAIC,MAAJ,EAAsC;AAAA,YAAxBC,QAAwB,uEAAb,WAAa;;AAAA;;AAAA,uIAC/DJ,SAD+D,EACpDC,IADoD,EAC9CC,GAD8C,EACzCE,QADyC;AAExE;;AAED;;;;;;;;;oCAKYC,G,EAAK;AACb,mBAAO,KAAKH,GAAL,CAASI,GAAT,CACH,CAAC,KAAKF,QAAN,EAAgB,KAAKJ,SAArB,EAAgCK,GAAhC,EAAqC,UAArC,EAAiDE,IAAjD,CAAsD,GAAtD,CADG,CAAP;AAGH;;;;;;kBAGUR,kB","file":"DataStoreNamespace.js","sourcesContent":["import Api from '../api/Api';\nimport BaseStoreNamespace from './BaseStoreNamespace';\n\n/**\n * @augments module:datastore.BaseStoreNamespace\n * @description\n * Represents a namespace in the dataStore that can be used to be used to interact with\n * the remote API.\n *\n * @property {array} keys an array of the loaded keys.\n * @property {string} namespace Name of the namespace as on the server.\n * @memberof module:datastore\n */\nclass DataStoreNamespace extends BaseStoreNamespace {\n    constructor(namespace, keys, api = Api.getApi(), endPoint = 'dataStore') {\n        super(namespace, keys, api, endPoint);\n    }\n\n    /**\n     * Retrieves metaData of given key in current namespace.\n     *\n     * @param key - the key to retrieve metaData for.\n     */\n    getMetaData(key) {\n        return this.api.get(\n            [this.endPoint, this.namespace, key, 'metaData'].join('/'),\n        );\n    }\n}\n\nexport default DataStoreNamespace;\n"]}