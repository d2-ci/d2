{"version":3,"sources":["../../src/i18n/I18n.js"],"names":["I18n","sources","api","Api","getApi","strings","Set","translations","undefined","path","push","trim","length","add","Array","from","filter","string","forEach","i18n","parseProperties","text","split","reduce","props","line","map","out","key","value","hasOwnProperty","replace","match","grp","String","fromCharCode","parseInt","propFiles","source","request","then","data","Promise","resolve","all","propFile","Object","keys","str","delete","size","post","res","variables","Error","translatedString","partial"],"mappings":"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","sourcesContent":["/**\n * @module i18n\n */\n\nimport Api from '../api/Api'\n\n/**\n * I18n class for dealing with translations\n */\nclass I18n {\n    constructor(sources = [], api = Api.getApi()) {\n        this.sources = sources\n        this.api = api\n        this.strings = new Set()\n        this.translations = undefined\n    }\n\n    /**\n     * Adds a .properties file to the list of sources to load translations from\n     *\n     * Files are loaded in the order they're added, and the first translation of each string that's encountered will be\n     * used.\n     *\n     * @param {String} path\n     */\n    addSource(path) {\n        this.sources.push(path)\n    }\n\n    /**\n     * Adds one or more strings to the list of strings to translate\n     *\n     * @param {(String[]|String)} strings\n     */\n    addStrings(strings) {\n        if (typeof strings === 'string' && strings.trim().length > 0) {\n            this.strings.add(strings.trim())\n        } else {\n            Array.from(strings)\n                .filter(string => string && `${string}`.trim().length > 0)\n                .forEach(string => this.strings.add(string))\n        }\n    }\n\n    /**\n     * Load translations\n     *\n     * First, all properties files (specified with addSource) are loaded.\n     * Then, if any untranslated strings remain, these are POSTed to the i18n endpoint of the DHIS2 API.\n     *\n     * @returns {Promise}\n     */\n    load() {\n        const i18n = this\n        i18n.translations = {}\n\n        function parseProperties(text) {\n            return text.split('\\n').reduce((props, line) => {\n                const [key, value] = line.split('=').map(out => out.trim())\n                if (\n                    key !== undefined &&\n                    value !== undefined &&\n                    !props.hasOwnProperty(key)\n                ) {\n                    props[key] = value.replace(\n                        /\\\\u([0-9a-f]{4})/gi,\n                        (match, grp) => String.fromCharCode(parseInt(grp, 16))\n                    )\n                }\n                return props\n            }, {})\n        }\n\n        const propFiles = []\n\n        this.sources.forEach(source => {\n            propFiles.push(\n                i18n.api.request('GET', source).then(\n                    data => Promise.resolve(parseProperties(data)),\n\n                    // Resolve errors to an empty object, so that one missing file doesn't prevent\n                    // the rest from being loaded\n                    () => Promise.resolve({})\n                )\n            )\n        })\n\n        return Promise.all(propFiles).then(propFile => {\n            propFile.forEach(props => {\n                Object.keys(props).forEach(str => {\n                    if (!i18n.translations.hasOwnProperty(str)) {\n                        i18n.translations[str] = props[str]\n                    }\n                    this.strings.delete(str)\n                })\n            })\n\n            if (this.strings.size > 0) {\n                return i18n.api\n                    .post('i18n', Array.from(i18n.strings))\n                    .then(res => {\n                        Object.keys(res)\n                            .filter(str => str !== res[str])\n                            .forEach(str => {\n                                i18n.translations[str] = res[str]\n                                i18n.strings.delete(str)\n                            })\n\n                        return Promise.resolve(i18n.translations)\n                    })\n            }\n\n            return Promise.resolve(i18n.translations)\n        })\n    }\n\n    /**\n     * Gets the translated version of the specified string\n     *\n     * If no translation exists for the specified string, the string is returned as is with two asterisks on each side,\n     * in order to easily identify missing translations in the UI\n     *\n     * @param string\n     * @returns {String}\n     */\n    getTranslation(string, variables = {}) {\n        if (this.translations === undefined) {\n            throw new Error('Tried to translate before loading translations!')\n        }\n        const translatedString = this.translations.hasOwnProperty(string)\n            ? this.translations[string]\n            : `** ${string} **`\n\n        if (Object.keys(variables).length) {\n            return translatedString.replace(\n                /\\$\\$(.+?)\\$\\$/gi,\n                (match, partial) => variables[partial] || ''\n            )\n        }\n\n        return translatedString\n    }\n\n    /**\n     * Check if a translation exists for the specified string\n     *\n     * @param string\n     * @returns {boolean} True if a translation exists, false otherwise\n     */\n    isTranslated(string) {\n        if (this.translations === undefined) {\n            throw new Error('Tried to translate before loading translations!')\n        }\n        return this.translations.hasOwnProperty(string)\n    }\n\n    /**\n     * Get the list of strings that don't have translations\n     *\n     * If no translations have been loaded yet, `undefined` is returned in stead.\n     *\n     * @returns {Array|undefined} Array of untranslated strings, or undefined if translations haven't been loaded\n     */\n    getUntranslatedStrings() {\n        return this.translations ? Array.from(this.strings) : undefined\n    }\n\n    /**\n     * Return a new instance of this class\n     *\n     * @returns {I18n}\n     */\n    static getI18n() {\n        return new I18n()\n    }\n}\n\nexport default I18n\n"],"file":"I18n.js"}