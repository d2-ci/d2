{"version":3,"sources":["../../../src/period/__tests__/parser_spec.js"],"names":["makePeriodFixture","id","name","startDate","endDate","periodFixtures","doPeriodTest","expect","toEqual","describe","it","toThrowError"],"mappings":"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","sourcesContent":["import { getPeriodFromPeriodId } from '../parser';\n\nfunction makePeriodFixture(id, name, startDate, endDate) {\n    return { id, name, startDate, endDate };\n}\n\nconst periodFixtures = {\n    // Daily\n    19810331: makePeriodFixture('19810331', 'March 31, 1981', '1981-03-31', '1981-03-31'),\n    20171231: makePeriodFixture('20171231', 'December 31, 2017', '2017-12-31', '2017-12-31'),\n    20040229: makePeriodFixture('20040229', 'February 29, 2004', '2004-02-29', '2004-02-29'),\n    20170229: makePeriodFixture('20170301', 'March 1, 2017', '2017-03-01', '2017-03-01'),\n    // Weekly\n    '2017W4': makePeriodFixture('2017W4', '2017 W4 January 23 - 29', '2017-01-23', '2017-01-29'),\n    '1981W37': makePeriodFixture('1981W37', '1981 W37 September 7 - 13', '1981-09-07', '1981-09-13'),\n    '2015W1': makePeriodFixture('2015W1', '2015 W1 December 29 - January 4', '2014-12-29', '2015-01-04'),\n    '1981W1': makePeriodFixture('1981W1', '1981 W1 December 29 - January 4', '1980-12-29', '1981-01-04'),\n    '2015W53': makePeriodFixture('2015W53', '2015 W53 December 28 - January 3', '2015-12-28', '2016-01-03'),\n    '2016W53': makePeriodFixture('2017W1', '2017 W1 January 2 - 8', '2017-01-02', '2017-01-08'),\n    '2016W52': makePeriodFixture('2016W52', '2016 W52 December 26 - January 1', '2016-12-26', '2017-01-01'),\n    '2017W04': makePeriodFixture('2017W4', '2017 W4 January 23 - 29', '2017-01-23', '2017-01-29'),\n    // Weekly Wednesday/Thursday/Saturday/Sunday\n    '2017WedW4': makePeriodFixture('2017WedW4', '2017 W4 January 25 - 31', '2017-01-25', '2017-01-31'),\n    '2017ThuW4': makePeriodFixture('2017ThuW4', '2017 W4 January 26 - February 1', '2017-01-26', '2017-02-01'),\n    '2017SatW4': makePeriodFixture('2017SatW4', '2017 W4 January 21 - 27', '2017-01-21', '2017-01-27'),\n    '2017SunW4': makePeriodFixture('2017SunW4', '2017 W4 January 22 - 28', '2017-01-22', '2017-01-28'),\n    // Monthly\n    198103: makePeriodFixture('198103', 'March 1981', '1981-03-01', '1981-03-31'),\n    198002: makePeriodFixture('198002', 'February 1980', '1980-02-01', '1980-02-29'),\n    198102: makePeriodFixture('198102', 'February 1981', '1981-02-01', '1981-02-28'),\n    // BiMonthly\n    '198101B': makePeriodFixture('198101B', 'January - February 1981', '1981-01-01', '1981-02-28'),\n    '198102B': makePeriodFixture('198102B', 'March - April 1981', '1981-03-01', '1981-04-30'),\n    '198103B': makePeriodFixture('198103B', 'May - June 1981', '1981-05-01', '1981-06-30'),\n    '198104B': makePeriodFixture('198104B', 'July - August 1981', '1981-07-01', '1981-08-31'),\n    '198105B': makePeriodFixture('198105B', 'September - October 1981', '1981-09-01', '1981-10-31'),\n    '198106B': makePeriodFixture('198106B', 'November - December 1981', '1981-11-01', '1981-12-31'),\n    // Quarterly\n    '1981Q1': makePeriodFixture('1981Q1', 'January - March 1981', '1981-01-01', '1981-03-31'),\n    '1981Q2': makePeriodFixture('1981Q2', 'April - June 1981', '1981-04-01', '1981-06-30'),\n    '1981Q3': makePeriodFixture('1981Q3', 'July - September 1981', '1981-07-01', '1981-09-30'),\n    '1981Q4': makePeriodFixture('1981Q4', 'October - December 1981', '1981-10-01', '1981-12-31'),\n    // SixMonthly\n    '1981S1': makePeriodFixture('1981S1', 'January - June 1981', '1981-01-01', '1981-06-30'),\n    '1981S2': makePeriodFixture('1981S2', 'July - December 1981', '1981-07-01', '1981-12-31'),\n    // SixMonthlyApril\n    '1981AprilS1': makePeriodFixture('1981AprilS1', 'April - September 1981', '1981-04-01', '1981-09-30'),\n    '1981AprilS2': makePeriodFixture('1981AprilS2', 'October 1981 - March 1982', '1981-10-01', '1982-03-31'),\n    // Yearly\n    1981: makePeriodFixture('1981', '1981', '1981-01-01', '1981-12-31'),\n    2017: makePeriodFixture('2017', '2017', '2017-01-01', '2017-12-31'),\n    // FinancialApril\n    '1981April': makePeriodFixture('1981April', 'April 1981 - March 1982', '1981-04-01', '1982-03-31'),\n    // FinancialJuly\n    '1981July': makePeriodFixture('1981July', 'July 1981 - June 1982', '1981-07-01', '1982-06-30'),\n    // FinancialOct\n    '1981Oct': makePeriodFixture('1981Oct', 'October 1981 - September 1982', '1981-10-01', '1982-09-30'),\n};\n\nfunction doPeriodTest(id) {\n    expect(getPeriodFromPeriodId(id)).toEqual(periodFixtures[id]);\n}\n\ndescribe('getPeriodFromPeriodId(periodId, locale) period parser', () => {\n    describe('for Daily periods', () => {\n        it('should handle valid Daily periods', () => {\n            doPeriodTest('19810331');\n            doPeriodTest('20171231');\n            doPeriodTest('20040229');\n        });\n        // it('should handle Daily periods in French');\n        it('should accept nearly valid Daily periods', () => {\n            doPeriodTest('20170229');\n        });\n        it('should not accept invalid Daily periods', () => {\n            expect(() => getPeriodFromPeriodId('19813103')).toThrowError();\n            expect(() => getPeriodFromPeriodId('20170000')).toThrowError();\n        });\n    });\n    describe('for Weekly periods', () => {\n        it('should handle valid Weekly periods', () => {\n            doPeriodTest('2017W4');\n            doPeriodTest('1981W37');\n        });\n        // it('should handle Weekly periods in French');\n        it('should handle Week 1 that starts the previous year', () => {\n            doPeriodTest('2015W1');\n            doPeriodTest('1981W1');\n        });\n        it('should handle Week 53 for 53-week years', () => {\n            doPeriodTest('2015W53');\n        });\n        it('should handle Week 53 for 52-week years', () => {\n            doPeriodTest('2016W53');\n        });\n        it('should handle weeks that end the following year', () => {\n            doPeriodTest('2016W52');\n        });\n        it('should not accept week numbers higher than 53', () => {\n            expect(() => getPeriodFromPeriodId('2017W54')).toThrowError();\n        });\n        it('should not accept week numbers below 1', () => {\n            expect(() => getPeriodFromPeriodId('2017W0')).toThrowError();\n        });\n        it('should handle Week 1-9 with leading zero', () => {\n            doPeriodTest('2017W04');\n        });\n        it('should handle Weekly Wednesday period types', () => {\n            doPeriodTest('2017WedW4');\n        });\n        it('should handle Weekly Thursday period types', () => {\n            doPeriodTest('2017ThuW4');\n        });\n        it('should handle Weekly Saturday period types', () => {\n            doPeriodTest('2017SatW4');\n        });\n        it('should handle Weekly Sunday period types', () => {\n            doPeriodTest('2017SunW4');\n        });\n    });\n    describe('for Monthly periods', () => {\n        it('should handle valid Monthly periods', () => {\n            doPeriodTest('198103');\n        });\n        // it('should handle Monthly periods in French');\n        it('should handle February properly in leap years', () => {\n            doPeriodTest('198002');\n        });\n        it('should handle February properly in normal years', () => {\n            doPeriodTest('198102');\n        });\n        it('should not accept invalid Monthly periods', () => {\n            expect(() => getPeriodFromPeriodId('193414')).toThrowError();\n        });\n    });\n    describe('for BiMonthly periods', () => {\n        it('should handle valid BiMonthly periods', () => {\n            doPeriodTest('198101B');\n            doPeriodTest('198102B');\n            doPeriodTest('198103B');\n            doPeriodTest('198104B');\n            doPeriodTest('198105B');\n            doPeriodTest('198106B');\n        });\n        // it('should handle BiMonthly periods in French');\n        it('should not accept invalid BiMonthly periods without leading zeros', () => {\n            expect(() => getPeriodFromPeriodId('19812B')).toThrowError();\n        });\n        it('should not accept BiMonthly periods above 6', () => {\n            expect(() => getPeriodFromPeriodId('198107B')).toThrowError();\n        });\n        it('should not accept BiMonthly periods below 1', () => {\n            expect(() => getPeriodFromPeriodId('198100B')).toThrowError();\n        });\n    });\n    describe('for Quarterly periods', () => {\n        it('should handle Quarters 1-4', () => {\n            doPeriodTest('1981Q1');\n            doPeriodTest('1981Q2');\n            doPeriodTest('1981Q3');\n            doPeriodTest('1981Q4');\n        });\n        // it('should handle Quarters in French');\n        it('should not accept Quarters below 1 or above 4', () => {\n            expect(() => getPeriodFromPeriodId('1981Q0')).toThrowError();\n            expect(() => getPeriodFromPeriodId('2017Q5')).toThrowError();\n        });\n    });\n    describe('for SixMonthly periods', () => {\n        it('should handle valid SixMonthly periods', () => {\n            doPeriodTest('1981S1');\n            doPeriodTest('1981S2');\n        });\n        // it('should handle SixMonthly periods in French');\n        it('should not accept SixMonthly periods below 1 or above 2', () => {\n            expect(() => getPeriodFromPeriodId('1981S0')).toThrowError();\n            expect(() => getPeriodFromPeriodId('1981S3')).toThrowError();\n        });\n    });\n    describe('for SixMonthlyApril periods', () => {\n        it('should handle valid SixMonthlyApril periods', () => {\n            doPeriodTest('1981AprilS1');\n            doPeriodTest('1981AprilS2');\n        });\n        // it('should handle SixMonthlyApril periods in French');\n        it('should not accept SixMonthlyApril periods below 1 or above 2', () => {\n            expect(() => getPeriodFromPeriodId('1981AprilS0')).toThrowError();\n            expect(() => getPeriodFromPeriodId('1981AprilS3')).toThrowError();\n        });\n    });\n    describe('for Yearly periods', () => {\n        it('should handle valid Yearly periods', () => {\n            doPeriodTest('1981');\n            doPeriodTest('2017');\n        });\n    });\n    describe('for FinancialApril periods', () => {\n        it('should handle FinancialApril periods', () => {\n            doPeriodTest('1981April');\n        });\n        // xit('should handle FinancialApril periods in French', () => {\n        //     expect(getPeriodFromPeriodId('1981April', 'fr')).to.deep.equal(\n        //         makePeriodFixture('1981April', 'avril 1981 - march 1982', '1981-04-01', '1982-03-31')\n        //     );\n        // });\n    });\n    describe('for FinancialJuly periods', () => {\n        it('should handle FinancialJuly periods', () => {\n            doPeriodTest('1981July');\n        });\n        // xit('should handle FinancialJuly periods in French', () => {\n        //     expect(getPeriodFromPeriodId('1981July', 'fr')).to.deep.equal(\n        //         makePeriodFixture('1981July', 'juilet 1981 - juin 1982', '1981-07-01', '1982-06-30')\n        //     );\n        // });\n    });\n    describe('for FinancialOct periods', () => {\n        it('should handle FinancialOct periods', () => {\n            doPeriodTest('1981Oct');\n        });\n        // xit('should handle FinancialOct periods in French', () => {\n        //     expect(getPeriodFromPeriodId('1981Oct', 'fr')).to.deep.equal(\n        //         makePeriodFixture('1981Oct', 'octobre 1981 - septembre 1982', '1981-10-01', '1982-09-30')\n        //     );\n        // });\n    });\n    describe('for invalid periods', () => {\n        it('should not accept invalid periods', () => {\n            expect(() => getPeriodFromPeriodId('test')).toThrowError();\n            expect(() => getPeriodFromPeriodId('1234567890')).toThrowError();\n        });\n    });\n});\n"],"file":"parser_spec.js"}