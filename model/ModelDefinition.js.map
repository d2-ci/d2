{"version":3,"sources":["../../src/model/ModelDefinition.js"],"names":["createModelPropertyDescriptor","propertiesObject","schemaProperty","propertyName","collection","collectionName","name","propertyDetails","configurable","enumerable","get","dataValues","constants","writable","set","dynamicPropertySetter","value","dirty","add","createPropertiesObject","schemaProperties","createModelPropertyDescriptorOn","forEach","createValidationSetting","validationObject","validationDetails","persisted","type","typeLookup","propertyType","required","min","max","owner","unique","ordered","Boolean","embeddedObject","getReferenceTypeFrom","property","href","split","pop","undefined","itemPropertyType","referenceType","createValidations","validationsObject","createModelPropertyOn","shouldBeModelCollectionProperty","model","models","shouldBeModelCollectionPropertyIterator","modelProperty","modelDefinition","modelValidations","hasOwnProperty","isAnUpdate","modelToCheck","id","translatableProperties","WeakMap","ModelDefinition","schema","properties","validations","attributes","authorities","singular","plural","displayName","shareable","metadata","apiEndpoint","klass","identifiableObject","translatable","filters","getFilters","filter","prop","translationKey","map","getOwnedPropertyJSON","bind","clone","data","create","getModelDefinitions","Object","assign","keys","values","Array","isArray","ModelDefinitionPrototype","getPrototypeOf","priorFilters","getFilterList","clonedDefinition","identifier","queryParams","fields","list","join","api","then","catch","response","message","Promise","reject","listParams","extraParams","definedRootJunction","rootJunction","params","definedFilters","getQueryFilterValues","length","responseData","pager","query","jsonPayload","updateUrl","baseUrl","update","saveNew","post","delete","ModelDefinitionClass","specialClasses","freeze","reduce","current","attributeDefinition","UserModelDefinition","DataSetModelDefinition","hasData","dataClone","key","obj","compulsoryDataElementOperands","OrganisationUnitModelDefinition","root","user","dataSet","organisationUnit"],"mappings":"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","file":"ModelDefinition.js","sourcesContent":["import { checkType, isObject, checkDefined, isDefined } from '../lib/check';\nimport { addLockedProperty, curry, copyOwnProperties, updateAPIUrlWithBaseUrlVersionNumber, pick } from '../lib/utils';\nimport ModelDefinitions from './ModelDefinitions';\nimport Model from './Model';\nimport ModelCollection from './ModelCollection';\nimport ModelCollectionProperty from './ModelCollectionProperty';\nimport schemaTypes from '../lib/SchemaTypes';\nimport Filters from './Filters';\nimport { DIRTY_PROPERTY_LIST } from './ModelBase';\nimport { getDefaultValuesForModelType } from './config';\nimport { getOwnedPropertyJSON } from './helpers/json';\n\nfunction createModelPropertyDescriptor(propertiesObject, schemaProperty) {\n    const propertyName = schemaProperty.collection ? schemaProperty.collectionName : schemaProperty.name;\n    const propertyDetails = {\n        // Actual property descriptor properties\n        configurable: false,\n        enumerable: true,\n        get() {\n            return this.dataValues[propertyName];\n        },\n    };\n\n    // Store available constants for ENUM type properties\n    if (schemaProperty.constants) {\n        propertyDetails.constants = schemaProperty.constants;\n    }\n\n    // Only add a setter for writable properties\n    if (schemaProperty.writable) {\n        propertyDetails.set = function dynamicPropertySetter(value) {\n            // TODO: Objects and Arrays are considered unequal when their data is the same and therefore trigger a dirty\n            if ((!isObject(value) && (value !== this.dataValues[propertyName])) || isObject(value)) {\n                this.dirty = true;\n                this[DIRTY_PROPERTY_LIST].add(propertyName);\n                this.dataValues[propertyName] = value;\n            }\n        };\n    }\n\n    if (propertyName) {\n        propertiesObject[propertyName] = propertyDetails; // eslint-disable-line no-param-reassign\n    }\n}\n\nfunction createPropertiesObject(schemaProperties) {\n    const propertiesObject = {};\n    const createModelPropertyDescriptorOn = curry(createModelPropertyDescriptor, propertiesObject);\n\n    (schemaProperties || []).forEach(createModelPropertyDescriptorOn);\n\n    return propertiesObject;\n}\n\nfunction createValidationSetting(validationObject, schemaProperty) {\n    const propertyName = schemaProperty.collection ? schemaProperty.collectionName : schemaProperty.name;\n    const validationDetails = {\n        persisted: schemaProperty.persisted,\n        type: schemaTypes.typeLookup(schemaProperty.propertyType),\n        required: schemaProperty.required,\n        min: schemaProperty.min,\n        max: schemaProperty.max,\n        owner: schemaProperty.owner,\n        unique: schemaProperty.unique,\n        writable: schemaProperty.writable,\n        ordered: Boolean(schemaProperty.ordered),\n        embeddedObject: Boolean(schemaProperty.embeddedObject),\n    };\n\n    function getReferenceTypeFrom(property) {\n        if (property.href) {\n            return property.href.split('/').pop();\n        }\n\n        return undefined;\n    }\n\n    // Add a referenceType to be able to get a hold of the reference objects model.\n    if (\n        validationDetails.type === 'REFERENCE' ||\n        (validationDetails.type === 'COLLECTION' &&\n        schemaProperty.itemPropertyType === 'REFERENCE')\n    ) {\n        validationDetails.referenceType = getReferenceTypeFrom(schemaProperty);\n    }\n\n    if (propertyName) {\n        validationObject[propertyName] = validationDetails; // eslint-disable-line no-param-reassign\n    }\n}\n\nfunction createValidations(schemaProperties) {\n    const validationsObject = {};\n    const createModelPropertyOn = curry(createValidationSetting, validationsObject);\n\n    (schemaProperties || []).forEach(createModelPropertyOn);\n\n    return validationsObject;\n}\n\n\nfunction shouldBeModelCollectionProperty(model, models) {\n    return function shouldBeModelCollectionPropertyIterator(modelProperty) {\n        return model &&\n            models &&\n            model.modelDefinition &&\n            model.modelDefinition.modelValidations &&\n            model.modelDefinition.modelValidations[modelProperty] &&\n            model.modelDefinition.modelValidations[modelProperty].type === 'COLLECTION' &&\n            models.hasOwnProperty(model.modelDefinition.modelValidations[modelProperty].referenceType);\n    };\n}\n\nfunction isAnUpdate(modelToCheck) {\n    return Boolean(modelToCheck.id);\n}\n\nconst translatableProperties = new WeakMap();\n\n/**\n * Definition of a Model. Basically this object contains the meta data related to the Model. Like `name`, `apiEndPoint`, `modelValidation`, etc.\n * It also has methods to create and load Models that are based on this definition. The Data element `ModelDefinition` would be used to create Data Element `Model`s\n *\n * Note: ModelDefinition has a property `api` that is used for the communication with the dhis2 api. The value of this\n * property is an instance of `Api`.\n *\n * @memberof module:model\n */\nclass ModelDefinition {\n    constructor(schema = {}, properties, validations, attributes, authorities) {\n        checkType(schema.singular, 'string');\n        checkType(schema.plural, 'string', 'Plural');\n\n        addLockedProperty(this, 'name', schema.singular);\n        addLockedProperty(this, 'displayName', schema.displayName);\n        addLockedProperty(this, 'plural', schema.plural);\n        addLockedProperty(this, 'isShareable', schema.shareable || false);\n        addLockedProperty(this, 'isMetaData', schema.metadata || false);\n        addLockedProperty(this, 'apiEndpoint', schema.apiEndpoint);\n        addLockedProperty(this, 'javaClass', schema.klass);\n        addLockedProperty(this, 'identifiableObject', schema && schema.identifiableObject);\n        addLockedProperty(this, 'modelProperties', properties);\n        addLockedProperty(this, 'modelValidations', validations);\n        addLockedProperty(this, 'attributeProperties', attributes);\n        addLockedProperty(this, 'authorities', authorities);\n        addLockedProperty(this, 'translatable', schema.translatable || false);\n\n        this.filters = Filters.getFilters(this);\n\n        translatableProperties.set(this, (schema.properties || [])\n            .filter(prop => prop.translationKey)\n            .map(({ name, translationKey }) => ({ name, translationKey })),\n        );\n\n        // TODO: The function getOwnedPropertyJSON should probably not be exposed, perhaps we could have a getJSONForModel(ownedPropertiesOnly=true) method.\n        this.getOwnedPropertyJSON = getOwnedPropertyJSON.bind(this);\n    }\n\n    filter() {\n        return this.clone().filters;\n    }\n\n    /**\n     * Creates a fresh Model instance based on the `ModelDefinition`. If data is passed into the method that\n     * data will be loaded into the matching properties of the model.\n     *\n     * @param {Object} [data] Data values that should be loaded into the model.\n     *\n     * @returns {Model} Returns the newly created model instance.\n     *\n     * @example\n     * dataElement.create({name: 'ANC', id: 'd2sf33s3ssf'});\n     */\n    create(data) {\n        const model = Model.create(this);\n        const models = ModelDefinitions.getModelDefinitions();\n        const dataValues = data ? Object.assign({}, data) : getDefaultValuesForModelType(model.modelDefinition.name);\n\n        Object\n            .keys(model)\n            .filter(shouldBeModelCollectionProperty(model, models))\n            .forEach((modelProperty) => {\n                const referenceType = model.modelDefinition.modelValidations[modelProperty].referenceType;\n                let values = [];\n\n                if (Array.isArray(dataValues[modelProperty])) {\n                    values = dataValues[modelProperty].map(value => models[referenceType].create(value));\n                } else if (dataValues[modelProperty] === true || dataValues[modelProperty] === undefined) {\n                    values = dataValues[modelProperty];\n                }\n\n                dataValues[modelProperty] = ModelCollectionProperty.create(\n                    model,\n                    models[referenceType],\n                    modelProperty,\n                    values,\n                );\n                model.dataValues[modelProperty] = dataValues[modelProperty];\n            });\n\n        Object\n            .keys(model)\n            .filter(modelProperty => !shouldBeModelCollectionProperty(model, models)(modelProperty))\n            .forEach((modelProperty) => {\n                model.dataValues[modelProperty] = dataValues[modelProperty];\n            });\n\n\n        return model;\n    }\n\n    clone() {\n        const ModelDefinitionPrototype = Object.getPrototypeOf(this);\n        const priorFilters = this.filters.getFilterList();\n        const clonedDefinition = copyOwnProperties(\n            Object.create(ModelDefinitionPrototype),\n            this,\n        );\n\n        clonedDefinition.filters = Filters.getFilters(clonedDefinition, priorFilters);\n\n        return clonedDefinition;\n    }\n\n    /**\n     * Get a `Model` instance from the api loaded with data that relates to `identifier`.\n     * This will do an API call and return a Promise that resolves with a `Model` or rejects with the api error message.\n     *\n     * @param {String} identifier\n     * @param {Object} [queryParams={fields: ':all'}] Query parameters that should be passed to the GET query.\n     * @returns {Promise} Resolves with a `Model` instance or an error message.\n     *\n     * @example\n     * //Do a get request for the dataElement with given id (d2sf33s3ssf) and print it's name\n     * //when that request is complete and the model is loaded.\n     * dataElement.get('d2sf33s3ssf')\n     *   .then(model => console.log(model.name));\n     */\n    get(identifier, queryParams = { fields: ':all,attributeValues[:all,attribute[id,name,displayName]]' }) {\n        checkDefined(identifier, 'Identifier');\n\n        if (Array.isArray(identifier)) {\n            return this.list({ filter: [`id:in:[${identifier.join(',')}]`] });\n        }\n\n        // TODO: should throw error if API has not been defined\n        return this.api.get([this.apiEndpoint, identifier].join('/'), queryParams)\n            .then(data => this.create(data))\n            .catch((response) => {\n                if (response.message) {\n                    return Promise.reject(response.message);\n                }\n\n                return Promise.reject(response);\n            });\n    }\n\n    /**\n     * Loads a list of models.\n     *\n     * @param {Object} [listParams={fields: ':all'}] Query parameters that should be passed to the GET query.\n     * @returns {Promise} ModelCollection collection of models objects of the `ModelDefinition` type.\n     *\n     * @example\n     * // Loads a list of models and prints their name.\n     * dataElement.list()\n     *   .then(modelCollection => {\n     *     modelCollection.forEach(model => console.log(model.name));\n     *   });\n     */\n    list(listParams = {}) {\n        const { apiEndpoint, ...extraParams } = listParams;\n        const definedRootJunction = this.filters.rootJunction ? { rootJunction: this.filters.rootJunction } : {};\n        const params = Object.assign({ fields: ':all' }, definedRootJunction, extraParams);\n        const definedFilters = this.filters.getQueryFilterValues();\n\n        if (!isDefined(params.filter)) {\n            delete params.filter;\n            if (definedFilters.length) {\n                params.filter = definedFilters;\n            }\n        }\n\n        // If listParams.apiEndpoint exists, send the request there in stead of this.apiEndpoint\n        return this.api.get(apiEndpoint || this.apiEndpoint, params)\n            .then(responseData => ModelCollection.create(\n                this,\n                responseData[this.plural].map(data => this.create(data)),\n                Object.assign(responseData.pager || {}, { query: params }),\n            ));\n    }\n\n    /**\n     * This method is used by the `Model` instances to save the model when calling `model.save()`.\n     *\n     * @param {Model} model The model that should be saved to the server.\n     * @returns {Promise} A promise which resolves when the save was successful\n     * or rejects when it failed. The promise will resolve with the data that is\n     * returned from the server.\n     *\n     * @note {warning} This should generally not be called directly.\n     */\n    // TODO: check the return status of the save to see if it was actually successful and not ignored\n    save(model) {\n        if (isAnUpdate(model)) {\n            const jsonPayload = getOwnedPropertyJSON.bind(this)(model);\n            // Fallback to modelDefinition if href is unavailable\n            const updateUrl = model.dataValues.href\n                ? updateAPIUrlWithBaseUrlVersionNumber(model.dataValues.href, this.api.baseUrl)\n                : [model.modelDefinition.apiEndpoint, model.dataValues.id].join('/');\n\n            // Save the existing model\n            return this.api.update(updateUrl, jsonPayload, true);\n        }\n\n        return this.saveNew(model);\n    }\n\n    saveNew(model) {\n        const jsonPayload = getOwnedPropertyJSON.bind(this)(model);\n\n        // Its a new object\n        return this.api.post(this.apiEndpoint, jsonPayload);\n    }\n\n    /**\n     * This method returns a list of property names that that are defined\n     * as \"owner\" properties on this schema. This means these properties are used\n     * when saving the model to the server.\n     *\n     * @returns {String[]} Returns an array of property names.\n     *\n     * @example\n     * dataElement.getOwnedPropertyNames()\n     */\n    getOwnedPropertyNames() {\n        return Object.keys(this.modelValidations)\n            .filter(propertyName => this.modelValidations[propertyName].owner);\n    }\n\n    /**\n     * This method is used by the `Model` instances to delete the model when calling `model.delete()`.\n     *\n     * @returns {Promise} Returns a promise to the deletion operation\n     *\n     * @note {warning} This should generally not be called directly.\n     */\n    delete(model) {\n        if (model.dataValues.href) {\n            return this.api.delete(model.dataValues.href);\n        }\n        return this.api.delete([model.modelDefinition.apiEndpoint, model.dataValues.id].join('/'));\n    }\n\n    /**\n     * Check for if the Model supports translations\n     *\n     * @returns {Boolean} True when the schema can be translated, false otherwise\n     */\n    isTranslatable() {\n        return this.translatable;\n    }\n\n    /**\n     * These properties can be translated using the DHIS2 _database_ translations.\n     *\n     * @returns {String[]} Returns a list of property names on the object that are translatable.\n     */\n    getTranslatableProperties() {\n        return translatableProperties\n            .get(this)\n            .map(pick('name'));\n    }\n\n    /**\n     * This method is similar to getTranslatableProperties() but in addition to the property names also returns the\n     * `translationKey` that is used to save the translations for the property names.\n     *\n     * @returns {Object[]} Returns an array with objects that have `name` and `translationKey` properties.\n     */\n    getTranslatablePropertiesWithKeys() {\n        return translatableProperties\n            .get(this);\n    }\n\n    /**\n     * @static\n     *\n     * This method creates a new `ModelDefinition` based on a JSON structure called\n     * a schema. A schema represents the structure of a domain model as it is\n     * required by DHIS. Since these schemas can not be altered on the server from\n     * the modelDefinition is frozen to prevent accidental changes to the definition.\n     *\n     * @param {Object} schema A schema definition received from the web api (/api/schemas)\n     * @param {Object[]} attributes A list of attribute objects that describe custom attributes (/api/attributes)\n     *\n     * @returns {ModelDefinition} Frozen model definition object.\n     *\n     * @example\n     * ModelDefinition.createFromSchema(schemaDefinition, attributes);\n     *\n     * @note {info} An example of a schema definition can be found on\n     * https://apps.dhis2.org/demo/api/schemas/dataElement\n     */\n    static createFromSchema(schema, attributes = []) {\n        let ModelDefinitionClass;\n        checkType(schema, Object, 'Schema');\n\n        if (typeof ModelDefinition.specialClasses[schema.singular] === 'function') {\n            ModelDefinitionClass = ModelDefinition.specialClasses[schema.singular];\n        } else {\n            ModelDefinitionClass = ModelDefinition;\n        }\n\n        return Object.freeze(new ModelDefinitionClass(\n            schema,\n            Object.freeze(createPropertiesObject(schema.properties)),\n            Object.freeze(createValidations(schema.properties)),\n            attributes\n                .reduce((current, attributeDefinition) => {\n                    current[attributeDefinition.name] = attributeDefinition; // eslint-disable-line no-param-reassign\n                    return current;\n                }, {}),\n            schema.authorities,\n        ));\n    }\n}\n\nclass UserModelDefinition extends ModelDefinition {\n    // TODO: userCredentials should always be included, no matter what the query params, that is currently not the case\n    get(identifier, queryParams = { fields: ':all,userCredentials[:owner]' }) {\n        return super.get(identifier, queryParams);\n    }\n}\n\nclass DataSetModelDefinition extends ModelDefinition {\n    create(data = {}) {\n        const hasData = Boolean(Object.keys(data).length);\n\n        // Filter out the compulsoryDataElementOperands structure from the retrieved data\n        // This structure does not follow the convention of a typical reference. We can not create a proper\n        // ModelCollection for this collection.\n        const dataClone = Object\n            .keys(data)\n            .filter(key => key !== 'compulsoryDataElementOperands')\n            .reduce((obj, key) => {\n                obj[key] = data[key]; // eslint-disable-line no-param-reassign\n                return obj;\n            }, {});\n\n        // Create the model using the usual way of creating a model\n        // Only pass data when there is data in the object passed to the constructor. This will guarantee\n        // that the empty ModelCollections are created properly.\n        const model = super.create(hasData ? dataClone : undefined);\n\n        // Set the compulsoryDataElementOperands onto the dataValues so it will be included during the save operations\n        model.dataValues.compulsoryDataElementOperands = data.compulsoryDataElementOperands;\n\n        return model;\n    }\n}\n\nclass OrganisationUnitModelDefinition extends ModelDefinition {\n    // If a 'root' is specified when listing organisation units the results will be limited to the root and its\n    // descendants. This is special behavior for the organisation unit API endpoint, which is documented here:\n    // https://dhis2.github.io/dhis2-docs/master/en/developer/html/webapi_organisation_units.html\n    list(extraParams = {}) {\n        const { root, ...params } = extraParams;\n\n        if (extraParams.hasOwnProperty('root') && root) {\n            params.apiEndpoint = `${this.apiEndpoint}/${root}`;\n        }\n\n        return super.list(params);\n    }\n}\n\nModelDefinition.specialClasses = {\n    user: UserModelDefinition,\n    dataSet: DataSetModelDefinition,\n    organisationUnit: OrganisationUnitModelDefinition,\n};\n\nexport default ModelDefinition;\n"]}