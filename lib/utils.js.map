{"version":3,"sources":["../../src/lib/utils.js"],"names":["throwError","curry","addLockedProperty","copyOwnProperties","pick","updateAPIUrlWithBaseUrlVersionNumber","customEncodeURIComponent","identity","message","Error","toCurry","parameter","curried","args","apply","concat","object","name","value","propertyDescriptor","enumerable","configurable","writable","Object","defineProperty","to","from","keys","filter","hasOwnProperty","key","forEach","propertyPath","propertiesToGet","split","reduce","result","property","undefined","item","pickOr","pathProperty","defaultValue","pathResult","Deferred","promise","Promise","resolve","reject","apiUrl","baseUrl","apiUrlWithVersionRexExp","apiVersionMatch","match","baseUrlHasVersion","apiUrlHasVersion","test","version","replace","whitelistURI","whitelistURICodes","map","encodeURIComponent","c","whitelistRegExp","RegExp","join","uri","decodeURIComponent"],"mappings":"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","file":"utils.js","sourcesContent":["/**\n * @module lib/utils\n */\n\n\nexport function throwError(message) {\n    throw new Error(message);\n}\n\n// TODO: Throw an error when `toCurry` is not a function\nexport function curry(toCurry, parameter) {\n    return function curried(...args) {\n        return toCurry.apply(this, [parameter].concat(args));\n    };\n}\n\nexport function addLockedProperty(object, name, value) {\n    const propertyDescriptor = {\n        enumerable: true,\n        configurable: false,\n        writable: false,\n        value,\n    };\n    Object.defineProperty(object, name, propertyDescriptor);\n}\n\nexport function copyOwnProperties(to, from) {\n    Object.keys(from)\n        .filter(key => from.hasOwnProperty(key))\n        .forEach((key) => {\n            to[key] = from[key]; // eslint-disable-line no-param-reassign\n        });\n\n    return to;\n}\n\n/**\n * Curried get function to pick a property from an object\n * Will safely pick a property from an object and guards against the infamous \"can not read property of undefined\".\n *\n * @param {String} propertyPath\n * @param {Any} defaultValue A default value to be returned when no value was found at the path\n * @returns Function\n *\n * get :: String -> Object -> Any\n */\nexport function pick(propertyPath) {\n    const propertiesToGet = propertyPath.split('.');\n\n    return item => propertiesToGet\n        .reduce((result, property) => {\n            if (result) {\n                return result[property];\n            }\n            return undefined;\n        }, item);\n}\n\nexport const pickOr = (pathProperty, defaultValue) => (item) => {\n    const pathResult = pick(pathProperty)(item);\n\n    return pathResult !== undefined ? pathResult : defaultValue;\n};\n\nexport class Deferred {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n\n    static create() {\n        return new Deferred();\n    }\n}\n\nexport function updateAPIUrlWithBaseUrlVersionNumber(apiUrl, baseUrl) {\n    if (!baseUrl || !apiUrl) {\n        return apiUrl;\n    }\n\n    const apiUrlWithVersionRexExp = /api\\/([1-9][0-9])/;\n    const apiVersionMatch = baseUrl.match(apiUrlWithVersionRexExp);\n\n    const baseUrlHasVersion = apiVersionMatch && apiVersionMatch[1];\n    const apiUrlHasVersion = apiUrl && !apiUrlWithVersionRexExp.test(apiUrl);\n\n    if (baseUrlHasVersion && apiUrlHasVersion) {\n        const version = apiVersionMatch[1];\n\n        // Inject the current api version number into the endPoint urls\n        return apiUrl.replace(/api/, `api/${version}`);\n    }\n\n    return apiUrl;\n}\n\n// Define our very own special list of characters that we don't want to encode in the URI\nconst whitelistURI = ',&$=/;:';\nconst whitelistURICodes = whitelistURI.split('').map(c => encodeURIComponent(c));\nconst whitelistRegExp = new RegExp(`(?:${whitelistURICodes.join('|')})`, 'g');\n\n/**\n * Encode all invalid URI characters, except the ones we've decided we don't want to\n */\nexport function customEncodeURIComponent(uri) {\n    // return uri;\n    return encodeURIComponent(uri)\n        .replace(whitelistRegExp, decodeURIComponent);\n}\n\nexport function identity(value) {\n    return value;\n}\n"]}