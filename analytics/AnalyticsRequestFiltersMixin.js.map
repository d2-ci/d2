{"version":3,"sources":["../../src/analytics/AnalyticsRequestFiltersMixin.js"],"names":["AnalyticsRequestFiltersMixin","base","items","addFilter","dimension","filterIndex","existingFilter","filters","find","item","index","updatedItems","existingItems","Set","Array","isArray","splice","push","AnalyticsRequest"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,4BAA4B,GAAG,SAA/BA,4BAA+B,CAAAC,IAAI;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAEjC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfyC,oCAgBnBC,KAhBmB,EAgBZ;AACjB,eAAO,KAAKC,SAAL,CAAe,IAAf,EAAqBD,KAArB,CAAP;AACH;AAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAjCyC;AAAA;AAAA,sCAkCjBA,KAlCiB,EAkCV;AACnB,eAAO,KAAKC,SAAL,CAAe,IAAf,EAAqBD,KAArB,CAAP;AACH;AAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnDyC;AAAA;AAAA,uCAoDhBA,KApDgB,EAoDT;AACpB,eAAO,KAAKC,SAAL,CAAe,IAAf,EAAqBD,KAArB,CAAP;AACH;AAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ;;AAvEiC;AAAA;AAAA,gCAwEvBE,SAxEuB,EAwEZF,KAxEY,EAwEL;AACxB,YAAIG,WAAW,GAAG,CAAlB;AAEA,YAAMC,cAAc,GAAG,KAAKC,OAAL,CAAaC,IAAb,CAAkB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACtD,cAAID,IAAI,CAACL,SAAL,KAAmBA,SAAvB,EAAkC;AAC9BC,YAAAA,WAAW,GAAGK,KAAd;AAEA,mBAAOD,IAAP;AACH;;AAED,iBAAO,KAAP;AACH,SARsB,CAAvB;AAUA,YAAIE,YAAY,GAAG,EAAnB;AACA,YAAIC,aAAa,GAAG,EAApB;;AAEA,YAAIN,cAAJ,EAAoB;AAChBM,UAAAA,aAAa,GAAGN,cAAc,CAACJ,KAAf,IAAwB,EAAxC;AACH;;AAED,YAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3BS,UAAAA,YAAY,sBAAO,IAAIE,GAAJ,8BAAYD,aAAZ,IAA2BV,KAA3B,GAAP,CAAZ;AACH,SAFD,MAEO,IAAIY,KAAK,CAACC,OAAN,CAAcb,KAAd,CAAJ,EAA0B;AAC7BS,UAAAA,YAAY,sBAAO,IAAIE,GAAJ,8BAAYD,aAAZ,sBAA8BV,KAA9B,GAAP,CAAZ;AACH;;AAED,YAAII,cAAJ,EAAoB;AAChB,eAAKC,OAAL,CAAaS,MAAb,CAAoBX,WAApB,EAAiC,CAAjC,EAAoC;AAChCD,YAAAA,SAAS,EAATA,SADgC;AAEhCF,YAAAA,KAAK,EAAES;AAFyB,WAApC;AAIH,SALD,MAKO;AACH,eAAKJ,OAAL,CAAaU,IAAb,CAAkB;AAAEb,YAAAA,SAAS,EAATA,SAAF;AAAaF,YAAAA,KAAK,EAAES;AAApB,WAAlB;AACH;;AAED,eAAO,IAAIO,yBAAJ,CAAqB,IAArB,CAAP;AACH;AA5GgC;;AAAA;AAAA,IACvBjB,IADuB;AAAA,CAAzC;;eA+GeD,4B","sourcesContent":["import AnalyticsRequest from './AnalyticsRequest'\n\n/**\n * @private\n * @description\n * AnalyticsRequest filters mixin function\n *\n * @param {*} base The base class to mix onto\n * @return {module:analytics.AnalyticsRequestFiltersMixin} The mixin class\n * @mixin\n */\n/**\n * @private\n * @description\n * AnalyticsRequest filters mixin class\n *\n * @alias module:analytics.AnalyticsRequestFiltersMixin\n */\nconst AnalyticsRequestFiltersMixin = base =>\n    class extends base {\n        /**\n         * Adds/updates the dx dimension filter to use in the request.\n         *\n         * @param {!(String|Array)} items The dimension items to add to the dx dimension filter\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .addDataFilter(['fbfJHSPpUQD', 'cYeuwXTCPkU'])\n         *    .addDataFilter('BfMAe6Itzgt.REPORTING_RATE');\n         *\n         * // filter=dx:fbfJHSPpUQD;cYeuwXTCPkU;BfMAe6Itzgt.REPORTING_RATE\n         */\n        addDataFilter(items) {\n            return this.addFilter('dx', items)\n        }\n\n        /**\n         * Adds/updates the pe dimension filter to use in the request.\n         *\n         * @param {!(String|Array)} items The dimension items to add to the pe dimension filter\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .addPeriodFilter(['201701', '201702'])\n         *    .addPeriodFilter('LAST_4_QUARTERS')\n         *\n         * // filter=pe:201701;201702;LAST_4_QUARTERS\n         */\n        addPeriodFilter(items) {\n            return this.addFilter('pe', items)\n        }\n\n        /**\n         * Adds/updates the ou dimension filter to use in the request.\n         *\n         * @param {!(String|Array)} items The dimension items to add to the ou dimension filter\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .addOrgUnitFilter(['O6uvpzGd5pu', 'lc3eMKXaEfw'])\n         *    .addOrgUnitFilter('OU_GROUP-w0gFTTmsUcF')\n         *\n         * // filter=ou:O6uvpzGd5pu;lc3eMKXaEfw;OU_GROUP-w0gFTTmsUcF\n         */\n        addOrgUnitFilter(items) {\n            return this.addFilter('ou', items)\n        }\n\n        /**\n         * Adds a filter to the request.\n         *\n         * @param {!String} dimension The dimension to add as filter to the request\n         * @param {(String|Array)} items The dimension items to add to the dimension filter\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .addFilter('Bpx0589u8y0', ['oRVt7g429ZO', 'MAs88nJc9nL'])\n         *    .addFilter('qrur9Dvnyt5-Yf6UHoPkdS6');\n         *\n         * // filter=Bpx0589u8y0:oRVt7g429ZO;MAs88nJc9nL&filter=qrur9Dvnyt5-Yf6UHoPkdS6\n         */\n        // eslint-disable-next-line complexity\n        addFilter(dimension, items) {\n            let filterIndex = 0\n\n            const existingFilter = this.filters.find((item, index) => {\n                if (item.dimension === dimension) {\n                    filterIndex = index\n\n                    return item\n                }\n\n                return false\n            })\n\n            let updatedItems = []\n            let existingItems = []\n\n            if (existingFilter) {\n                existingItems = existingFilter.items || []\n            }\n\n            if (typeof items === 'string') {\n                updatedItems = [...new Set([...existingItems, items])]\n            } else if (Array.isArray(items)) {\n                updatedItems = [...new Set([...existingItems, ...items])]\n            }\n\n            if (existingFilter) {\n                this.filters.splice(filterIndex, 1, {\n                    dimension,\n                    items: updatedItems,\n                })\n            } else {\n                this.filters.push({ dimension, items: updatedItems })\n            }\n\n            return new AnalyticsRequest(this)\n        }\n    }\n\nexport default AnalyticsRequestFiltersMixin\n"],"file":"AnalyticsRequestFiltersMixin.js"}