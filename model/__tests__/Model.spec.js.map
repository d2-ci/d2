{"version":3,"sources":["../../../src/model/__tests__/Model.spec.js"],"names":["describe","model","beforeEach","Model","modelProperties","it","expect","toThrowErrorMatchingSnapshot","shouldThrow","toThrowError","create","toBe","save","validate","dirty","keys","Object","not","toContain","dataElementModel","fixtures","get","length","modelDefinition","skip","name","configurable","enumerable","dataValues","set","value","jest","fn","toHaveBeenCalledWith","mockReturnValue","toHaveBeenCalled","dataElementSchema","dataElementModelDefinition","ModelDefinition","createFromSchema","getDirtyPropertyNames","toBeInstanceOf","Function","toEqual","attributes","toBeUndefined","toBeDefined","attributeValues","attribute","id","marktribute","undefined","modelKeys","changeAttributesProperty","toThrow"],"mappings":"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","sourcesContent":["import fixtures from '../../__fixtures__/fixtures';\nimport Model from '../Model';\nimport ModelDefinition from '../ModelDefinition';\n\ndescribe('Model', () => {\n    let model;\n\n    beforeEach(() => {\n        model = new Model({\n            modelProperties: [],\n        });\n    });\n\n    it('should not be allowed to be called without new', () => {\n        expect(() => Model()).toThrowErrorMatchingSnapshot();\n    });\n\n    it('should throw when modelDefinition is not defined', () => {\n        function shouldThrow() {\n            return new Model();\n        }\n        expect(shouldThrow).toThrowError('modelDefinition should be provided');\n    });\n\n    it('should throw when modelDefinition.modelProperties is not provided', () => {\n        function shouldThrow() {\n            return new Model({});\n        }\n        expect(shouldThrow).toThrowError('modelProperties should be provided');\n    });\n\n    it('should have a create method on the class', () => {\n        expect(typeof Model.create).toBe('function');\n    });\n\n    it('should have a save method', () => {\n        expect(typeof model.save).toBe('function');\n    });\n\n    it('should have a validate method', () => {\n        expect(typeof model.validate).toBe('function');\n    });\n\n    it('should have a dirty property that is set to false', () => {\n        expect(model.dirty).toBe(false);\n    });\n\n    it('should not show the dirty property in the enumerable properties', () => {\n        const keys = Object.keys(model);\n\n        expect(keys).not.toContain('dirty');\n    });\n\n    it('should add properties based on the modelDefinition', () => {\n        // TODO: This fixture is outdated and we should update to a fixture with getters and setters.\n        const dataElementModel = Model.create(fixtures.get('/modelDefinitions/dataElement'));\n\n        expect(Object.keys(dataElementModel).length).toBe(34);\n    });\n\n    it('should keep a reference to its definition', () => {\n        const modelDefinition = { modelProperties: [] };\n        const dataElementModel = Model.create(modelDefinition);\n\n        expect(dataElementModel.modelDefinition).toBe(modelDefinition);\n    });\n\n    it('should not show the modelDefinition property in the enumerable properties', () => {\n        const keys = Object.keys(model);\n\n        expect(keys).not.toContain('modelDefinition');\n    });\n\n    it.skip('should not allow the modelDefinition to be changed', () => {\n        const modelDefinition = { modelProperties: [] };\n        const dataElementModel = Model.create(modelDefinition);\n\n        function shouldThrow() {\n            dataElementModel.modelDefinition = {};\n        }\n\n        expect(shouldThrow).toThrowError();\n    });\n\n    describe('properties based off model definition', () => {\n        let modelDefinition;\n\n        beforeEach(() => {\n            modelDefinition = {\n                modelProperties: {\n                    name: {\n                        configurable: false,\n                        enumerable: true,\n                        get() {\n                            return this.dataValues.name;\n                        },\n                        set(value) {\n                            this.dataValues.name = value;\n                        },\n                    },\n                },\n            };\n        });\n\n        it('should call the set method for name', () => {\n            modelDefinition.modelProperties.name.set = jest.fn();\n            const dataElementModel = Model.create(modelDefinition);\n\n            dataElementModel.name = 'ANC';\n\n            expect(modelDefinition.modelProperties.name.set).toHaveBeenCalledWith('ANC');\n        });\n\n        it('should set the correct value', () => {\n            const dataElementModel = Model.create(modelDefinition);\n\n            dataElementModel.name = 'ANC';\n\n            expect(dataElementModel.dataValues.name).toBe('ANC');\n        });\n\n        it('should call the get method for name', () => {\n            modelDefinition.modelProperties.name.get = jest.fn().mockReturnValue('ANC');\n            const dataElementModel = Model.create(modelDefinition);\n            const name = dataElementModel.name;\n\n            expect(modelDefinition.modelProperties.name.get).toHaveBeenCalled();\n            expect(name).toBe('ANC');\n        });\n\n        it('should return the correct value', () => {\n            const dataElementModel = Model.create(modelDefinition);\n\n            dataElementModel.name = 'ANC';\n\n            expect(dataElementModel.name).toBe('ANC');\n        });\n    });\n\n    describe('getDirtyPropertyNames', () => {\n        let dataElementModel;\n\n        beforeEach(() => {\n            const dataElementSchema = fixtures.get('/api/schemas/dataElement');\n            const dataElementModelDefinition = ModelDefinition.createFromSchema(dataElementSchema);\n\n            dataElementModel = new Model(dataElementModelDefinition);\n        });\n\n        it('should be a method', () => {\n            expect(dataElementModel.getDirtyPropertyNames).toBeInstanceOf(Function);\n        });\n\n        it('should return the names of properties that are dirty', () => {\n            dataElementModel.name = 'ANC new';\n\n            expect(dataElementModel.getDirtyPropertyNames()).toEqual(['name']);\n        });\n\n        it('should return an empty array for a clean model', () => {\n            expect(dataElementModel.getDirtyPropertyNames()).toEqual([]);\n        });\n    });\n\n    describe('attributes', () => {\n        let dataElementModel;\n\n        beforeEach(() => {\n            const dataElementModelDefinition = ModelDefinition.createFromSchema(\n                fixtures.get('/api/schemas/dataElement'),\n                fixtures.get('/dataElementAttributes'),\n            );\n\n            dataElementModel = Model.create(dataElementModelDefinition);\n        });\n\n        it('should not create the property when there are no attributes', () => {\n            const dataElementSchema = fixtures.get('/api/schemas/dataElement');\n            const dataElementModelDefinition = ModelDefinition.createFromSchema(dataElementSchema);\n\n            dataElementModel = Model.create(dataElementModelDefinition);\n\n            expect(dataElementModel.attributes).toBeUndefined();\n        });\n\n        it('should create the property when there are attributes available', () => {\n            expect(dataElementModel.attributes).toBeDefined();\n        });\n\n        it('should have a property for each of the attributes that belong to this model type', () => {\n            expect(Object.keys(dataElementModel.attributes)).toEqual(['marktribute', 'marktribute2', 'name']);\n        });\n\n        it('should set the correct value onto the attributeValues properties', () => {\n            dataElementModel.attributes.name = 'Mark';\n\n            expect(dataElementModel.attributeValues.length).toBe(1);\n            expect(dataElementModel.attributeValues[0].value).toBe('Mark');\n            expect(dataElementModel.attributeValues[0].attribute).toEqual({ id: 'S8a2OBRnqEc', name: 'name' });\n        });\n\n        it('should get the correct value from the attributeValues property', () => {\n            dataElementModel.dataValues.attributeValues = [{\n                value: 'Mark',\n                attribute: { id: 'FpoWdhxCMwH', name: 'marktribute' },\n            }];\n\n            expect(dataElementModel.attributes.marktribute).toBe('Mark');\n        });\n\n        it('should not add a value for the same attribute twice', () => {\n            dataElementModel.dataValues.attributeValues = [{\n                value: 'Mark',\n                attribute: { id: 'FpoWdhxCMwH', name: 'marktribute' },\n            }];\n\n            dataElementModel.attributes.marktribute = 'John';\n\n            expect(dataElementModel.attributes.marktribute).toBe('John');\n            expect(dataElementModel.attributeValues[0].value).toBe('John');\n            expect(dataElementModel.attributeValues.length).toBe(1);\n        });\n\n        it('should add a value for the attribute when it does not exist yet', () => {\n            dataElementModel.dataValues.attributeValues = [{\n                value: 'Mark',\n                attribute: { id: 'FpoWdhxCMwH', name: 'marktribute' },\n            }];\n\n            dataElementModel.attributes.name = 'John';\n\n            expect(dataElementModel.attributes.marktribute).toBe('Mark');\n            expect(dataElementModel.attributes.name).toBe('John');\n            expect(dataElementModel.attributeValues[0].value).toBe('Mark');\n            expect(dataElementModel.attributeValues[1].value).toBe('John');\n            expect(dataElementModel.attributeValues.length).toBe(2);\n        });\n\n        it('should remove the attributeValue from the attributeValue array when the value is cleared out', () => {\n            dataElementModel.dataValues.attributeValues = [{\n                value: 'Mark',\n                attribute: { id: 'FpoWdhxCMwH', name: 'name' },\n            }];\n\n            dataElementModel.attributes.name = '';\n\n            expect(dataElementModel.attributes.name).toBe(undefined);\n            expect(dataElementModel.attributeValues.length).toBe(0);\n        });\n\n        it('should not remove the attributeValue when the attribute is set to false', () => {\n            dataElementModel.dataValues.attributeValues = [{\n                value: 'Mark',\n                attribute: { id: 'FpoWdhxCMwH', name: 'name' },\n            }];\n\n            dataElementModel.attributes.name = false;\n\n            expect(dataElementModel.attributes.name).toBe(false);\n            expect(dataElementModel.attributeValues.length).toBe(1);\n        });\n\n        it('should not remove the attributeValue when the attribute is set 0', () => {\n            dataElementModel.dataValues.attributeValues = [{\n                value: 'Mark',\n                attribute: { id: 'FpoWdhxCMwH', name: 'name' },\n            }];\n\n            dataElementModel.attributes.name = 0;\n\n            expect(dataElementModel.attributes.name).toBe(0);\n            expect(dataElementModel.attributeValues.length).toBe(1);\n        });\n\n        it('should remove the attributeValue when the attribute is set to undefined', () => {\n            dataElementModel.dataValues.attributeValues = [{\n                value: 'Mark',\n                attribute: { id: 'FpoWdhxCMwH', name: 'name' },\n            }];\n\n            dataElementModel.attributes.name = undefined;\n\n            expect(dataElementModel.attributes.name).toBe(undefined);\n            expect(dataElementModel.attributeValues.length).toBe(0);\n        });\n\n        it('should remove the attributeValue when the attribute is set to null', () => {\n            dataElementModel.dataValues.attributeValues = [{\n                value: 'Mark',\n                attribute: { id: 'FpoWdhxCMwH', name: 'name' },\n            }];\n\n            dataElementModel.attributes.name = null;\n\n            expect(dataElementModel.attributes.name).toBe(undefined);\n            expect(dataElementModel.attributeValues.length).toBe(0);\n        });\n\n        it('should not show up in the list of model keys', () => {\n            const modelKeys = Object.keys(dataElementModel);\n\n            expect(modelKeys).not.toContain('attributes');\n        });\n\n        it('should not be able to set attributes to something else', () => {\n            const changeAttributesProperty = () => { dataElementModel.attributes = 'something else'; };\n\n            expect(changeAttributesProperty).toThrow();\n            expect(dataElementModel.attributes).not.toBe('something else');\n        });\n\n        it('should set the model to dirty when an attribute was changed', () => {\n            dataElementModel.dataValues.attributeValues = [{\n                value: 'Mark',\n                attribute: { id: 'FpoWdhxCMwH', name: 'marktribute' },\n            }];\n\n            expect(dataElementModel.dirty).toBe(false);\n\n            dataElementModel.attributes.marktribute = 'John';\n\n            expect(dataElementModel.dirty).toBe(true);\n        });\n\n        it('should not set the model to be dirty when the attribute value is the same', () => {\n            dataElementModel.dataValues.attributeValues = [{\n                value: 'Mark',\n                attribute: { id: 'FpoWdhxCMwH', name: 'marktribute' },\n            }];\n\n            dataElementModel.attributes.marktribute = 'Mark';\n\n            expect(dataElementModel.dirty).toBe(false);\n        });\n\n        it('should not fail if requesting an attribute but the model has no attributeValues', () => {\n            dataElementModel.dataValues.attributeValues = undefined;\n\n            expect(() => dataElementModel.attributes.marktribute).not.toThrowError();\n        });\n\n        it('should still correctly set the attributeValue if the model has initially no attributeValues', () => {\n            dataElementModel.dataValues.attributeValues = undefined;\n\n            dataElementModel.attributes.marktribute = 'John';\n\n            expect(dataElementModel.attributes.marktribute).toBe('John');\n            expect(dataElementModel.attributeValues[0].attribute.id).toBe('FpoWdhxCMwH');\n        });\n    });\n});\n"],"file":"Model.spec.js"}