{"version":3,"sources":["../../../src/lib/__tests__/utils.spec.js"],"names":["describe","it","shouldThrow","utils","throwError","expect","toThrowError","object","name","users","pick","toBe","toBeUndefined","undefined","value","user","settings","disabled","not","toThrow","baseUrl","i","updateAPIUrlWithBaseUrlVersionNumber","pickOr"],"mappings":";;AAAA;;;;AAEAA,QAAQ,CAAC,OAAD,EAAU,YAAM;AACpBA,EAAAA,QAAQ,CAAC,YAAD,EAAe,YAAM;AACzBC,IAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAM;AAC9B,eAASC,WAAT,GAAuB;AACnBC,QAAAA,KAAK,CAACC,UAAN,CAAiB,WAAjB;AACH;;AAEDC,MAAAA,MAAM,CAACH,WAAD,CAAN,CAAoBI,YAApB,CAAiC,WAAjC;AACH,KANC,CAAF;AAOH,GARO,CAAR;AAUAN,EAAAA,QAAQ,CAAC,MAAD,EAAS,YAAM;AACnB,QAAMO,MAAM,GAAG;AACXC,MAAAA,IAAI,EAAE,MADK;AAEXC,MAAAA,KAAK,EAAE,CACH,MADG,EACK,MADL,EACa,OADb;AAFI,KAAf;AAOAR,IAAAA,EAAE,CAAC,yCAAD,EAA4C,YAAM;AAChDI,MAAAA,MAAM,CAACF,KAAK,CAACO,IAAN,CAAW,MAAX,EAAmBH,MAAnB,CAAD,CAAN,CAAmCI,IAAnC,CAAwC,MAAxC;AACAN,MAAAA,MAAM,CAACF,KAAK,CAACO,IAAN,CAAW,OAAX,EAAoBH,MAApB,CAAD,CAAN,CAAoCI,IAApC,CAAyCJ,MAAM,CAACE,KAAhD;AACH,KAHC,CAAF;AAKAR,IAAAA,EAAE,CAAC,wDAAD,EAA2D,YAAM;AAC/DI,MAAAA,MAAM,CAACF,KAAK,CAACO,IAAN,CAAW,QAAX,EAAqBH,MAArB,CAAD,CAAN,CAAqCK,aAArC;AACH,KAFC,CAAF;AAIAX,IAAAA,EAAE,CAAC,oDAAD,EAAuD,YAAM;AAC3DI,MAAAA,MAAM,CAACF,KAAK,CAACO,IAAN,CAAW,MAAX,EAAmBG,SAAnB,CAAD,CAAN,CAAsCD,aAAtC;AACH,KAFC,CAAF;AAIAX,IAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAM;AACtC,UAAMa,KAAK,GAAG;AACVC,QAAAA,IAAI,EAAE;AACFP,UAAAA,IAAI,EAAE,MADJ;AAEFQ,UAAAA,QAAQ,EAAE;AACNC,YAAAA,QAAQ,EAAE;AADJ;AAFR;AADI,OAAd;AASAZ,MAAAA,MAAM,CAACF,KAAK,CAACO,IAAN,CAAW,WAAX,EAAwBI,KAAxB,CAAD,CAAN,CAAuCH,IAAvC,CAA4C,MAA5C;AACAN,MAAAA,MAAM,CAACF,KAAK,CAACO,IAAN,CAAW,wBAAX,EAAqCI,KAArC,CAAD,CAAN,CAAoDH,IAApD,CAAyD,KAAzD;AACH,KAZC,CAAF;AAcAV,IAAAA,EAAE,CAAC,6DAAD,EAAgE,YAAM;AACpE,UAAMa,KAAK,GAAG,EAAd;AAEAT,MAAAA,MAAM,CAAC;AAAA,eAAMF,KAAK,CAACO,IAAN,CAAW,WAAX,EAAwBI,KAAxB,CAAN;AAAA,OAAD,CAAN,CAA6CI,GAA7C,CAAiDC,OAAjD;AACAd,MAAAA,MAAM,CAAC;AAAA,eAAMF,KAAK,CAACO,IAAN,CAAW,wBAAX,EAAqCI,KAArC,CAAN;AAAA,OAAD,CAAN,CAA0DI,GAA1D,CAA8DC,OAA9D;AACH,KALC,CAAF;AAMH,GAzCO,CAAR;AA2CAnB,EAAAA,QAAQ,CAAC,wCAAD,EAA2C,YAAM;AACrD,QAAMoB,OAAO,GAAG,gDAAhB;AAEAnB,IAAAA,EAAE,CAAC,sCAAD,EAAyC,YAAM;AAC7C,WAAK,IAAIoB,CAAC,GAAG,EAAb,EAAiBA,CAAC,GAAG,EAArB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1BhB,QAAAA,MAAM,CAACF,KAAK,CAACmB,oCAAN,CACH,4DADG,YAEAF,OAFA,cAEWC,CAFX,EAAD,CAAN,CAGGV,IAHH,2CAG2CU,CAH3C;AAIH;AACJ,KAPC,CAAF;AAQH,GAXO,CAAR;AAaArB,EAAAA,QAAQ,CAAC,QAAD,EAAW,YAAM;AACrBC,IAAAA,EAAE,CAAC,kDAAD,EAAqD,YAAM;AACzD,UAAMa,KAAK,GAAG,EAAd;AAEAT,MAAAA,MAAM,CAACF,KAAK,CAACoB,MAAN,CAAa,WAAb,EAA0B,MAA1B,EAAkCT,KAAlC,CAAD,CAAN,CAAiDH,IAAjD,CAAsD,MAAtD;AACAN,MAAAA,MAAM,CAACF,KAAK,CAACoB,MAAN,CAAa,wBAAb,EAAuC,IAAvC,EAA6CT,KAA7C,CAAD,CAAN,CAA4DH,IAA5D,CAAiE,IAAjE;AACH,KALC,CAAF;AAOAV,IAAAA,EAAE,CAAC,wDAAD,EAA2D,YAAM;AAC/D,UAAMa,KAAK,GAAG;AACVC,QAAAA,IAAI,EAAE;AACFP,UAAAA,IAAI,EAAE,IADJ;AAEFQ,UAAAA,QAAQ,EAAE;AACNC,YAAAA,QAAQ,EAAE;AADJ;AAFR;AADI,OAAd;AASAZ,MAAAA,MAAM,CAACF,KAAK,CAACoB,MAAN,CAAa,WAAb,EAA0B,MAA1B,EAAkCT,KAAlC,CAAD,CAAN,CAAiDH,IAAjD,CAAsD,IAAtD;AACAN,MAAAA,MAAM,CAACF,KAAK,CAACoB,MAAN,CAAa,wBAAb,EAAuC,IAAvC,EAA6CT,KAA7C,CAAD,CAAN,CAA4DH,IAA5D,CAAiE,KAAjE;AACH,KAZC,CAAF;AAaH,GArBO,CAAR;AAsBH,CAzFO,CAAR","sourcesContent":["import * as utils from '../utils';\n\ndescribe('Utils', () => {\n    describe('throwError', () => {\n        it('should throw an error', () => {\n            function shouldThrow() {\n                utils.throwError('MyMessage');\n            }\n\n            expect(shouldThrow).toThrowError('MyMessage');\n        });\n    });\n\n    describe('pick', () => {\n        const object = {\n            name: 'Mark',\n            users: [\n                'mark', 'this', 'color',\n            ],\n        };\n\n        it('should return the value of the property', () => {\n            expect(utils.pick('name')(object)).toBe('Mark');\n            expect(utils.pick('users')(object)).toBe(object.users);\n        });\n\n        it('should return undefined if the property does not exist', () => {\n            expect(utils.pick('groups')(object)).toBeUndefined();\n        });\n\n        it('should return undefined if the object is undefined', () => {\n            expect(utils.pick('name')(undefined)).toBeUndefined();\n        });\n\n        it('should support property paths', () => {\n            const value = {\n                user: {\n                    name: 'Mark',\n                    settings: {\n                        disabled: false,\n                    },\n                },\n            };\n\n            expect(utils.pick('user.name')(value)).toBe('Mark');\n            expect(utils.pick('user.settings.disabled')(value)).toBe(false);\n        });\n\n        it('should not throw when a property in the path does not exist', () => {\n            const value = {};\n\n            expect(() => utils.pick('user.name')(value)).not.toThrow();\n            expect(() => utils.pick('user.settings.disabled')(value)).not.toThrow();\n        });\n    });\n\n    describe('updateAPIUrlWithBaseUrlVersionNumber()', () => {\n        const baseUrl = 'https://www.whitehouse.gov/secret/top/dhis/api';\n\n        it('works with unreasonable api versions', () => {\n            for (let i = 10; i < 99; i++) {\n                expect(utils.updateAPIUrlWithBaseUrlVersionNumber(\n                    'https://localhost:8080/dhis/api/dataSetElements/abcDEFghi3',\n                    `${baseUrl}/${i}`,\n                )).toBe(`https://localhost:8080/dhis/api/${i}/dataSetElements/abcDEFghi3`);\n            }\n        });\n    });\n\n    describe('pickOr', () => {\n        it('should return the defaultValue if it was defined', () => {\n            const value = {};\n\n            expect(utils.pickOr('user.name', 'John')(value)).toBe('John');\n            expect(utils.pickOr('user.settings.disabled', true)(value)).toBe(true);\n        });\n\n        it('should return a null value over a default if it exists', () => {\n            const value = {\n                user: {\n                    name: null,\n                    settings: {\n                        disabled: false,\n                    },\n                },\n            };\n\n            expect(utils.pickOr('user.name', 'John')(value)).toBe(null);\n            expect(utils.pickOr('user.settings.disabled', true)(value)).toBe(false);\n        });\n    });\n});\n"],"file":"utils.spec.js"}