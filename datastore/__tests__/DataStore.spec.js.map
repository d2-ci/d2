{"version":3,"sources":["../../../src/datastore/__tests__/DataStore.spec.js"],"names":["jest","mock","describe","namespaces","keys","dataStore","apiMock","beforeEach","MockApi","DataStore","afterEach","mockReset","it","get","mockReturnValueOnce","Promise","resolve","then","namespace","expect","toBeInstanceOf","DataStoreNamespace","getKeys","res","toEqual","toHaveBeenCalledTimes","not","toHaveBeenCalled","catch","e","message","toBe","err","httpStatusCode","reject","toThrow","rejects","toBeDefined","error","join","assertions","getAll","namespaceRes","delete","namespaceDel","toBeCalledWith","getDataStore","create","toHaveLength","has","hasNamespace"],"mappings":"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","sourcesContent":["import DataStore from '../../datastore/DataStore';\nimport DataStoreNamespace from '../../datastore/DataStoreNamespace';\nimport MockApi from '../../api/Api';\n\njest.mock('../../api/Api');\n\ndescribe('DataStore', () => {\n    const namespaces = ['DHIS', 'History', 'social-media-video'];\n    const keys = ['key1', 'a key', 'aowelfkxuw'];\n    let dataStore;\n    let apiMock;\n\n    beforeEach(() => {\n        apiMock = new MockApi();\n        dataStore = new DataStore(apiMock);\n    });\n\n    afterEach(() => {\n        MockApi.mockReset();\n    });\n\n    describe('get()', () => {\n        it('should return an instance of datastorenamespace', () => {\n            apiMock.get.mockReturnValueOnce(Promise.resolve(namespaces));\n\n            return dataStore.get('DHIS').then((namespace) => {\n                expect(namespace).toBeInstanceOf(DataStoreNamespace);\n            });\n        });\n\n\n        it('should return a datastorenamespace with keys if it exists', () => {\n            apiMock.get.mockReturnValueOnce(Promise.resolve(namespaces))\n                .mockReturnValueOnce(Promise.resolve(keys));\n\n            return dataStore.get('DHIS').then(namespace => namespace.getKeys().then((res) => {\n                expect(res).toEqual(keys);\n                expect(apiMock.get).toHaveBeenCalledTimes(2);\n            }));\n        });\n\n        it('should not request API if autoload is false', () => dataStore.get('DHIS', false).then((res) => {\n            expect(res).toBeInstanceOf(DataStoreNamespace);\n            expect(apiMock.get).not.toHaveBeenCalled();\n        }));\n\n        it('should throw an error when no response', () => {\n            apiMock.get.mockReturnValueOnce(Promise.resolve(null));\n\n            return dataStore.get('DHIS').catch((e) => {\n                expect(e.message).toBe('The requested namespace has no keys or does not exist.');\n            });\n        });\n\n        it('should throw an error if namespace does not exist on server', () => {\n            const err = { httpStatusCode: 404 };\n            apiMock.get.mockReturnValueOnce(Promise.reject(err));\n\n            return expect(dataStore.get('DHIS').catch((e) => {\n                expect(e).toThrow();\n            })).rejects.toBeDefined();\n        });\n\n        it('should throw when error is not 404', () => {\n            const error = { httpStatusCode: 500 };\n            apiMock.get.mockReturnValueOnce(Promise.reject(error));\n\n            return dataStore.get('DHIS')\n                .catch((e) => {\n                    expect(e).toEqual(error);\n                });\n        });\n\n        describe('for an invalid namespace', () => {\n            beforeEach(() => {\n                apiMock.get.mockReturnValueOnce(Promise.reject([\n                    '{',\n                    '\"httpStatus\":\"Not Found\",',\n                    '\"httpStatusCode\":404,',\n                    '\"status\":\"ERROR\",',\n                    '\"message\":\"The namespace \\'not-my-namespace\\' was not found.\"',\n                    '}',\n                ].join('')));\n            });\n\n            it('should throw an error', () => {\n                expect.assertions(1);\n\n                return dataStore.get('not-my-namespace')\n                    .catch(() => {\n                        // TODO: this test looks like it's just testing the mock\n                        expect(true).toBe(true);\n                    });\n            });\n        });\n    });\n\n    describe('getAll()', () => {\n        it('should return an array of namespaces', () => {\n            apiMock.get.mockReturnValueOnce(Promise.resolve(namespaces));\n\n            expect.assertions(1);\n\n            return dataStore\n                .getAll()\n                .then((namespaceRes) => {\n                    expect(namespaces).toEqual(namespaceRes);\n                });\n        });\n\n        it('should throw an error when there is no response', () => {\n            apiMock.get.mockReturnValueOnce(Promise.resolve(null));\n\n            expect.assertions(1);\n\n            return dataStore.getAll()\n                .catch((namespaceRes) => {\n                    expect(namespaceRes.message).toBe('No namespaces exist.');\n                });\n        });\n    });\n\n    describe('delete()', () => {\n        beforeEach(() => {\n            apiMock.delete.mockReturnValueOnce(Promise.resolve());\n        });\n\n        it('should call the api with correct url', () => {\n            const namespaceDel = 'DHIS';\n\n            return dataStore.delete(namespaceDel).then(() => {\n                expect(apiMock.delete).toBeCalledWith(`dataStore/${namespaceDel}`);\n            });\n        });\n    });\n\n    describe('getDataStore', () => {\n        it('should return an instance of DataStore', () => {\n            expect(DataStore.getDataStore()).toBeInstanceOf(DataStore);\n        });\n\n        it('should return the same object when called twice', () => {\n            expect(DataStore.getDataStore()).toBe(DataStore.getDataStore());\n        });\n    });\n\n    describe('create()', () => {\n        it('should return an instance of DataStore if namespace do not exist', () => {\n            const error = { httpStatusCode: 404 };\n            apiMock.get.mockReturnValueOnce(Promise.reject(error));\n\n            return dataStore.create('DHIS').then((namespace) => {\n                expect(namespace).toBeInstanceOf(DataStoreNamespace);\n                expect(namespace.keys).toHaveLength(0);\n            });\n        });\n\n        it('should return an error if namespace exists', () => {\n            apiMock.get.mockReturnValueOnce(Promise.resolve(keys));\n\n            return dataStore.get('DHIS').then((namespace) => {\n                expect(namespace).toBeInstanceOf(DataStoreNamespace);\n            });\n        });\n    });\n\n    describe('has', () => {\n        it('should resolve with true if namespace exists', async () => {\n            apiMock.get.mockReturnValueOnce(Promise.resolve(keys));\n            const hasNamespace = await dataStore.has('DHIS');\n            expect(hasNamespace).toBe(true);\n        });\n\n        it('should resolve with false if namespace does not exists (404 from server)', async () => {\n            const err = { httpStatusCode: 404 };\n            apiMock.get.mockReturnValueOnce(Promise.reject(err));\n            const hasNamespace = await dataStore.has('arandomnamespace');\n            expect(hasNamespace).toBe(false);\n        });\n\n        it('should resolve with false if namespace does not exists (empty array)', async () => {\n            apiMock.get.mockReturnValueOnce(Promise.resolve([]));\n            const hasNamespace = await dataStore.has('arandomnamespace');\n            expect(hasNamespace).toBe(false);\n        });\n\n        it('should throw an error if resolved response is not an array', async () => {\n            apiMock.get.mockReturnValueOnce(Promise.resolve({}));\n            await expect(dataStore.has('arandomnamespace')).rejects.toBeDefined();\n        });\n\n        it('should throw an error if rejected response is not 404 or empty array ', async () => {\n            const err = { httpStatusCode: 500 };\n            apiMock.get.mockReturnValueOnce(Promise.resolve(err));\n            await expect(dataStore.has('arandomnamespace')).rejects.toBeDefined();\n        });\n    });\n});\n"],"file":"DataStore.spec.js"}