{"version":3,"sources":["../../src/system/System.js"],"names":["System","settings","configuration","systemInfo","undefined","version","installedApps","parseVersionString","apps","api","Api","getApi","get","then","setInstalledApps","zipFile","onProgress","data","FormData","xhr","append","XMLHttpRequest","upload","onprogress","progress","lengthComputable","loaded","total","post","contentType","processData","compatibleOnly","Promise","resolve","reject","appStoreData","map","appData","app","Object","assign","versions","filter","versionData","isVersionCompatible","length","catch","err","uid","join","dataType","appKey","delete","update","loadInstalledApps","major","Number","parseInt","minor","substring","indexOf","snapshot","a","b","from","String","to","systemVersion","appVersion","minVersion","minDhisVersion","min_platform_version","maxVersion","maxDhisVersion","max_platform_version","isNewEnough","compareVersions","isNotTooOld","getSystem","system","SystemSettings","SystemConfiguration"],"mappings":"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","sourcesContent":["/**\n * @module system\n *\n * @requires module:api/Api\n */\n\nimport Api from '../api/Api'\nimport SystemSettings from './SystemSettings'\nimport SystemConfiguration from './SystemConfiguration'\n\n/**\n * @description\n * Represents the system that can be interacted with. There is a single instance of this pre-defined onto the d2\n * object after initialisation. This can be interacted with using its property objects to among other be used\n * to get and save systemSettings.\n *\n * @memberof module:system\n */\nclass System {\n    constructor(settings, configuration) {\n        /**\n         * Contains a reference to a `SystemSettings` instance that can be used\n         * to retrieve and save system settings.\n         *\n         * ```js\n         * d2.system.settings.get('keyLastSuccessfulResourceTablesUpdate')\n         *  .then(systemSettingsValue => {\n         *    console.log('Analytics was last updated on: ' + systemSettingsValue);\n         *  });\n         * ```\n         * @type {SystemSettings}\n         *\n         */\n        this.settings = settings\n\n        /**\n         * A representation of the system configuration,\n         * that can be used to retrieve and change system configuration options.\n         * @type {SystemConfiguration}\n         */\n        this.configuration = configuration\n\n        /**\n         * An object containing system information about the DHIS2 instance\n         * @type {Object}\n         */\n        this.systemInfo = undefined\n\n        /**\n         * An object containing version information about the DHIS2 instance\n         * @type {Object}\n         */\n        this.version = undefined\n\n        /**\n         * An array of all the webapps that are installed on the current DHIS2 instance\n         * @type {Array}\n         */\n        this.installedApps = undefined\n    }\n\n    /**\n     * Sets the systemInfo and version properties\n     *\n     * @param systemInfo\n     */\n    setSystemInfo(systemInfo) {\n        this.version = System.parseVersionString(systemInfo.version)\n        this.systemInfo = systemInfo\n    }\n\n    /**\n     * Sets the list of currently installed webapps\n     *\n     * @param apps\n     */\n    setInstalledApps(apps) {\n        this.installedApps = apps\n    }\n\n    /**\n     * Refreshes the list of currently installed webapps\n     *\n     * @returns {Promise} A promise that resolves to the list of installed apps\n     */\n    loadInstalledApps() {\n        const api = Api.getApi()\n\n        return api.get('apps').then(apps => {\n            this.setInstalledApps(apps)\n\n            return apps\n        })\n    }\n\n    /**\n     * Upload and install a zip file containing a new webapp\n     *\n     * @param zipFile Zip file data from a file input form field\n     * @param onProgress An optional callback that will be called whenever file upload progress info is available\n     * @returns {Promise}\n     */\n    uploadApp(zipFile, onProgress) {\n        const api = Api.getApi()\n        const data = new FormData()\n        let xhr\n        data.append('file', zipFile)\n\n        if (onProgress !== undefined) {\n            xhr = new XMLHttpRequest()\n            xhr.upload.onprogress = progress => {\n                if (progress.lengthComputable) {\n                    onProgress(progress.loaded / progress.total)\n                }\n            }\n        }\n\n        return api.post('apps', data, {\n            contentType: false,\n            processData: false,\n            xhr: xhr !== undefined ? () => xhr : undefined,\n        })\n    }\n\n    /**\n     * Load the list of apps available in the DHIS 2 app store\n     *\n     * @param compatibleOnly If true, apps that are incompatible with the current system will be filtered out\n     * @returns {Promise}\n     */\n    loadAppStore(compatibleOnly = true) {\n        return new Promise((resolve, reject) => {\n            const api = Api.getApi()\n            api.get('appStore')\n                .then(appStoreData =>\n                    resolve(\n                        appStoreData\n                            .map(appData => {\n                                const app = Object.assign({}, appData)\n\n                                if (compatibleOnly) {\n                                    app.versions = app.versions.filter(\n                                        versionData =>\n                                            System.isVersionCompatible(\n                                                this.version,\n                                                versionData\n                                            )\n                                    )\n                                }\n\n                                return app\n                            })\n                            .filter(appData => appData.versions.length > 0)\n                    )\n                )\n                .catch(err => reject(err))\n        })\n    }\n\n    /**\n     * Install the specified app version from the DHIS 2 app store\n     *\n     * @param uid The uid of the app version to install\n     * @returns {Promise}\n     */\n    installAppVersion(uid) {\n        const api = Api.getApi()\n        return new Promise((resolve, reject) => {\n            api.post(['appStore', uid].join('/'), '', { dataType: 'text' })\n                .then(() => {\n                    resolve()\n                })\n                .catch(err => {\n                    reject(err)\n                })\n        })\n    }\n\n    /**\n     * Remove the specified app from the system\n     *\n     * @param appKey The key of the app to remove\n     * @returns {Promise}\n     */\n    uninstallApp(appKey) {\n        const api = Api.getApi()\n\n        return (\n            api\n                .delete(['apps', appKey].join('/'))\n                // TODO: Stop jQuery from rejecting successful promises\n                .catch(() => undefined)\n        )\n    }\n\n    /**\n     * Refresh the list of apps that are installed on the server\n     *\n     * @returns {Promise} A promise that resolves to the updated list of installed apps\n     */\n    reloadApps() {\n        const api = Api.getApi()\n        return api.update('apps').then(() => this.loadInstalledApps())\n    }\n\n    /**\n     * @static\n     * @typedef {Object} ParsedVersion\n     * @property {number} major - Major version of the parsed-string (before .)\n     * @property {number} minor - Minor version of the parsed-string (after .)\n     * @property {boolean} snapshot - If it's a snapshot-version\n     */\n    // TODO: Validate string\n    // TODO: Handle valid version objects too\n    /**\n     * Parses a version string into an object describing the version.\n     * @param {string} version Version-string to parse\n     * @returns {module:system.ParsedVersion}\n     */\n    static parseVersionString(version) {\n        return {\n            major: Number.parseInt(version, 10),\n            minor: Number.parseInt(\n                version.substring(version.indexOf('.') + 1),\n                10\n            ),\n            snapshot: version.indexOf('-SNAPSHOT') >= 0,\n        }\n    }\n\n    // Disable eslint complexity warning\n    /* eslint-disable complexity */\n    /**\n     * Compares version a to version b.\n     * @param a {string|module:system.ParsedVersion}\n     * @param b {string|module:system.ParsedVersion}\n     * @returns {number} 0 if same version, else a - b.\n     */\n    static compareVersions(a, b) {\n        const from =\n            typeof a === 'string' || a instanceof String\n                ? System.parseVersionString(a)\n                : a\n        const to =\n            typeof b === 'string' || b instanceof String\n                ? System.parseVersionString(b)\n                : b\n\n        if (from.major !== to.major) {\n            return from.major - to.major\n        }\n        if (from.minor !== to.minor) {\n            return from.minor - to.minor\n        }\n\n        return (from.snapshot ? 0 : 1) - (to.snapshot ? 0 : 1)\n    }\n\n    /**\n     * Checks if systemVersion is compatible with appVersion.\n     * Versions are compatible if appVersion.minDhisVersion <= parsed systemVersion and\n     * if appVersion.maxDhisVersion >= parsed systemVersion.\n     * @param systemVersion {string|module:system.ParsedVersion} systemVersion to check\n     * @param {Object} appVersion - AppVersion object to check\n     * @returns {boolean} true if compatible, false otherwise.\n     */\n    static isVersionCompatible(systemVersion, appVersion) {\n        const minVersion =\n            appVersion.minDhisVersion || appVersion.min_platform_version || null\n        const maxVersion =\n            appVersion.maxDhisVersion || appVersion.max_platform_version || null\n\n        const isNewEnough = minVersion\n            ? System.compareVersions(systemVersion, minVersion) >= 0\n            : true\n        const isNotTooOld = maxVersion\n            ? System.compareVersions(systemVersion, maxVersion) <= 0\n            : true\n\n        return isNewEnough && isNotTooOld\n    }\n    /* eslint-enable */\n\n    /**\n     * Get a new instance of the system object. This will function as a singleton, when a System object has been created\n     * when requesting getSystem again the original version will be returned.\n     *\n     * @returns {System} Object with the system interaction properties\n     */\n    static getSystem() {\n        if (!System.getSystem.system) {\n            System.getSystem.system = new System(\n                new SystemSettings(),\n                new SystemConfiguration()\n            )\n        }\n\n        return System.getSystem.system\n    }\n}\n\nexport default System\n"],"file":"System.js"}