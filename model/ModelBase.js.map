{"version":3,"sources":["../../src/model/ModelBase.js"],"names":["modelValidator","ModelValidation","getModelValidation","DIRTY_PROPERTY_LIST","Symbol","ModelBase","modelValidations","Object","defineProperty","writable","value","validate","then","validationState","status","Promise","reject","modelDefinition","saveNew","apiResponse","updateModelFromResponseStatus","call","includeChildren","isDirty","resolve","save","validationMessages","unique","current","property","indexOf","push","asyncRemoteValidation","model","validateAgainstSchema","catch","remoteMessages","Array","isArray","concat","length","fields","map","validationMessage","reduce","messages","message","modelClone","create","keys","dirty","delete","hasDirtyChildren","getDirtyChildren","forEach","resetDirtyState","clear","from","values","filter","propertyName","getCollectionChildrenPropertyNames","getCollectionChildren"],"mappings":"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","sourcesContent":["import ModelValidation from './ModelValidation';\nimport { getJSONForProperties } from './helpers/json';\nimport {\n    hasModelValidationForProperty,\n    pickTypeFromModelValidation,\n    pickEmbeddedObjectFromModelValidation,\n    pickOwnerFromModelValidation,\n    updateModelFromResponseStatus,\n} from './helpers/models';\n\nconst modelValidator = ModelValidation.getModelValidation();\n\nexport const DIRTY_PROPERTY_LIST = Symbol('List to keep track of dirty properties');\n\n/**\n * Base class that supplies functionality to the Model classes\n *\n * @memberof module:model\n */\nclass ModelBase {\n    constructor() {\n        const modelValidations = { modelValidations: {} };\n        Object.defineProperty(this, 'modelDefinition', { writable: true, value: modelValidations });\n    }\n    /**\n     * @returns {Promise} Returns a promise that resolves when the model has been saved or rejected with the result from\n     * the `validate()` call.\n     *\n     * @definition\n     * Will save model as a new object to the server using a POST request. This method would generally be used if\n     * you're creating models with pre-specified IDs. Note that this does not check if the model is marked as dirty.\n     */\n    create() {\n        return this.validate()\n            .then((validationState) => {\n                if (!validationState.status) {\n                    return Promise.reject(validationState);\n                }\n\n                return this.modelDefinition\n                    .saveNew(this)\n                    .then(apiResponse => updateModelFromResponseStatus.call(this, apiResponse));\n            });\n    }\n\n    /**\n     * @returns {Promise} Returns a promise that resolves when the model has been saved\n     * or rejects with the result from the `validate()` call.\n     *\n     * @description\n     * Checks if the model is dirty. When the model is dirty it will check if the values of the model are valid by calling\n     * `validate`. If this is correct it will attempt to save the [Model](#/model/Model) to the api.\n     *\n     * ```js\n     * myModel.save()\n     *   .then((message) => console.log(message));\n     * ```\n     */\n    save(includeChildren) {\n        // Calling save when there's nothing to be saved is a no-op\n        if (!this.isDirty(includeChildren)) {\n            return Promise.resolve({});\n        }\n\n        return this.validate()\n            .then((validationState) => {\n                if (!validationState.status) {\n                    return Promise.reject(validationState);\n                }\n\n                return this.modelDefinition\n                    .save(this)\n                    .then(apiResponse => updateModelFromResponseStatus.call(this, apiResponse));\n            });\n    }\n\n    /**\n     * @returns {Promise} Promise that resolves with an object with a status property that represents if the model\n     * is valid or not the fields array will return the names of the fields that are invalid.\n     *\n     * @description\n     * This will run the validations on the properties which have validations set. Normally these validations are defined\n     * through the DHIS2 schema. It will check min/max for strings/numbers etc. Additionally it will\n     * run model validations against the schema.\n     *\n     * ```js\n     * myModel.validate()\n     *  .then(myModelStatus => {\n     *    if (myModelStatus.status === false) {\n     *      myModelStatus.fields.forEach((fieldName) => console.log(fieldName));\n     *    }\n     * });\n     * ```\n     *\n     * @deprecated The api now validates the object on save, so doing the additional request to validate the object\n     * is not very useful anymore as the validation on POST/PUT is more extensive than the /api/schemas validation.\n     */\n    validate() {\n        return new Promise((resolve, reject) => {\n            let validationMessages = [];\n\n            function unique(current, property) {\n                if (property && current.indexOf(property) === -1) {\n                    current.push(property);\n                }\n                return current;\n            }\n\n            function asyncRemoteValidation(model) {\n                return modelValidator.validateAgainstSchema(model);\n            }\n\n            // Run async validation against the api\n            asyncRemoteValidation(this)\n                .catch((remoteMessages) => {\n                    // Errors are ok in this case\n                    if (Array.isArray(remoteMessages)) {\n                        return remoteMessages;\n                    }\n                    return Promise.reject(remoteMessages);\n                })\n                .then((remoteMessages) => {\n                    validationMessages = validationMessages.concat(remoteMessages);\n\n                    const validationState = {\n                        status: remoteMessages.length === 0,\n                        fields: validationMessages\n                            .map(validationMessage => validationMessage.property)\n                            .reduce(unique, []),\n                        messages: validationMessages,\n                    };\n                    resolve(validationState);\n                })\n                .catch(message => reject(message));\n        });\n    }\n\n    // TODO: Cloning large graphs is very slow\n    clone() {\n        const modelClone = this.modelDefinition.create(\n            getJSONForProperties(\n                this,\n                Object.keys(this.modelDefinition.modelValidations),\n                true,\n            ),\n        );\n\n        if (this.isDirty()) {\n            modelClone.dirty = this.isDirty(true);\n        }\n\n        return modelClone;\n    }\n\n    /**\n     * Deletes the object from the server.\n     *\n     * This will fire a DELETE request to have the object be removed from the system.\n     *\n     * @returns {Promise} Resolves when the object was successfully deleted.\n     */\n    delete() {\n        return this.modelDefinition.delete(this);\n    }\n\n    /**\n     * Check if the model is in a dirty state and is a candidate to be saved.\n     *\n     * It will check for direct properties that have been changed and if any of the children have been changed.\n     *\n     * @param {boolean} includeChildren If set to false only the models direct properties will be checked.\n     * @returns {boolean} Returns true when the model is in a dirty state.\n     */\n    isDirty(includeChildren = true) {\n        return this.dirty || (includeChildren === true && this.hasDirtyChildren());\n    }\n\n    /**\n     * Utility method to reset the dirty state of the object.\n     *\n     * This is called after a successful save operation was done.\n     *\n     * @returns {ModelBase} Returns itself for potential chaining\n     */\n    resetDirtyState() {\n        this.dirty = false;\n\n        // Also set it's children to be clean\n        this.getDirtyChildren()\n            .forEach((value) => {\n                if (value.resetDirtyState) {\n                    value.resetDirtyState();\n                } else {\n                    value.dirty = false; // eslint-disable-line no-param-reassign\n                }\n            });\n\n        this[DIRTY_PROPERTY_LIST].clear();\n\n        return this;\n    }\n\n    /**\n     * Returns a list of properties that have been changed.\n     *\n     * @returns {Array<string>} The names of the properties that were changed.\n     */\n    getDirtyPropertyNames() {\n        return Array.from(this[DIRTY_PROPERTY_LIST].values());\n    }\n\n    /**\n     * This will return the properties that are marked as `owner: true` in the schema definition for the model.\n     *\n     * @returns {Array<any>} Returns an array of properties that are owned by the object\n     */\n    // TODO: This name is very misleading and should probably be renamed to something like `getOwnerProperties` (would be a breaking change)\n    getCollectionChildren() {\n        return Object.keys(this)\n            .filter(propertyName =>\n                this[propertyName] &&\n                hasModelValidationForProperty(this, propertyName) &&\n                pickOwnerFromModelValidation(propertyName, this),\n            )\n            .map(propertyName => this[propertyName]);\n    }\n\n    /**\n     * Gets the names of the properties that are collections on the object.\n     *\n     * These are usually the properties that contain ModelCollectionProperties.\n     *\n     * @returns {Array<string>} A list of property names that are marked as type `COLLECTION` in the schema.\n     */\n    getCollectionChildrenPropertyNames() {\n        return Object\n            .keys(this)\n            .filter(propertyName => pickTypeFromModelValidation(propertyName, this) === 'COLLECTION');\n    }\n\n    /**\n     * Gets the names of the properties that are references on the object.\n     *\n     * These are usually the properties that contain a Model of a different type. (e.g DataElement -> CategoryCombo)\n     *\n     * @returns {Array<string>} A list of property names that are marked as type `REFERENCE` in the schema.\n     */\n    getReferenceProperties() {\n        return Object\n            .keys(this)\n            .filter(propertyName =>\n                pickTypeFromModelValidation(propertyName, this) === 'REFERENCE' &&\n                pickEmbeddedObjectFromModelValidation(propertyName, this) === false,\n            );\n    }\n\n    /**\n     * Gets the names of the properties that are embedded objects.\n     *\n     * These the properties that are not represented by a different Model, but are just plain objects that are\n     * embedded within the current object.\n     *\n     * @returns {Array<string>} A list of property names of embedded objects.\n     */\n    getEmbeddedObjectCollectionPropertyNames() {\n        return this.getCollectionChildrenPropertyNames()\n            .filter(propertyName => pickEmbeddedObjectFromModelValidation(propertyName, this));\n    }\n\n    /**\n     * Returns a list of child properties that are marked as dirty. This uses the `getCollectionChildren()` method\n     * to retrieve the children properties and then checks if they are marked as dirty.\n     *\n     * The method does not check if direct properties are dirty as those are tracked on the Model itself.\n     *\n     * @returns {Array<any>}\n     */\n    getDirtyChildren() {\n        return this.getCollectionChildren()\n            .filter(property => property && (property.dirty === true));\n    }\n\n    /**\n     * Check if any of the Model's child collections are dirty.\n     *\n     * @returns {boolean} True when one of the children is dirty.\n     */\n    hasDirtyChildren() {\n        return this.getDirtyChildren().length > 0;\n    }\n\n    /**\n     * This method is generally intended to, by default, usefully serialize Model objects during JSON serialization.\n     *\n     * This method will take all the properties that are defined on the schema and create an object with the keys and\n     * values for those properties. This will remove any circular dependencies that could have occurred otherwise.\n     *\n     * @returns {Object}\n     */\n    toJSON() {\n        return getJSONForProperties(this, Object.keys(this.modelDefinition.modelValidations));\n    }\n}\n\nexport default ModelBase;\n"],"file":"ModelBase.js"}