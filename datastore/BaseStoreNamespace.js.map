{"version":3,"sources":["../../src/datastore/BaseStoreNamespace.js"],"names":["BaseStoreNamespace","namespace","keys","api","Api","getApi","endPoint","Error","constructor","get","join","then","response","Promise","reject","key","value","overrideUpdate","encrypt","includes","update","queryParams","post","resp","delete","filter","elem"],"mappings":"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","sourcesContent":["import Api from '../api/Api';\nimport { isString, isArray } from '../lib/check';\n\n/**\n * @private\n * @description\n * Represents a namespace in the dataStore that can be used to be used to interact with\n * the remote API.\n *\n * @property {Array} keys an array of the loaded keys.\n * @property {String} namespace name of this namespace as on the server.\n *\n * @memberof module:datastore\n */\nclass BaseStoreNamespace {\n    /**\n     * @param {string} namespace - the name of the namespace this represents.\n     * @param {string[]} keys - preloaded keys for this namespace.\n     * @param {module:api.Api} api - the api implementation, used for testing.\n     * @param {string} endPoint - the relative API-endpoint, one of ['dataStore, userDataStore'].\n     */\n    constructor(namespace, keys, api = Api.getApi(), endPoint) {\n        if (!isString(namespace)) {\n            throw new Error('BaseStoreNamespace must be called with a string to identify the Namespace');\n        }\n        if (!isString(endPoint)) {\n            throw new Error('BaseStoreNamespace must be called with an endPoint');\n        }\n        if (this.constructor === BaseStoreNamespace) {\n            throw new Error('Can\\'t instantiate abstract class!');\n        }\n\n        this.api = api;\n\n        /**\n         * The name of the namespace\n         * @type {string}\n         */\n        this.namespace = namespace;\n\n        /**\n         * an array of the loaded keys.\n         * @type {string[]}\n         */\n        this.keys = keys || [];\n        this.endPoint = endPoint;\n    }\n\n    /**\n     * Get the keys for this namespace.\n     *\n     * @returns {Promise} - The internal list of keys for current namespace.\n     */\n    getKeys() {\n        return this.api.get([this.endPoint, this.namespace].join('/')).then((response) => {\n            if (response && isArray(response)) {\n                this.keys = response;\n                return response;\n            }\n            return Promise.reject(new Error('The requested namespace has no keys or does not exist.'));\n        });\n    }\n\n    /**\n     * Retrieves the value of given key in current namespace.\n     *\n     * @param key - key to retrieve.\n     * @returns {Promise} - The value of the given key.\n     */\n    get(key) {\n        return this.api.get([this.endPoint, this.namespace, key].join('/'));\n    }\n\n    /**\n     * Sets the value of given key to given value.\n     *\n     * This will also create a new namespace on the API-end if it does not exist.\n     * If the key exists <a href='#update'> update</a> will be called, unless <code>overrideUpdate</code> equals\n     * true.\n     *\n     * @param key - key in this namespace to set.\n     * @param value - JSON-value to be set.\n     * @param [overrideUpdate=false] - If true a post-request is sent even if key exists.\n     * @param [encrypt=false] - If the value should be encrypted on the server.\n     * @returns {Promise} - the response body from the {@link module:api.Api#get API}.\n     */\n    set(key, value, overrideUpdate = false, encrypt = false) {\n        if (!overrideUpdate && this.keys.includes(key)) {\n            return this.update(key, value);\n        }\n        const queryParams = encrypt === true ? '?encrypt=true' : '';\n        return this.api.post([this.endPoint, this.namespace, key + queryParams].join('/'), value).then((resp) => {\n            this.keys = [...this.keys, key];\n            return resp;\n        });\n    }\n\n    /**\n     * Deletes given key from the API.\n     * @param {string} key - key to delete.\n     * @returns {Promise} - the response body from the {@link module:api.Api#get API}.\n     */\n    delete(key) {\n        if (!isString(key)) {\n            return Promise.reject(new Error(`Expected key to be string, but got ${typeof key}`));\n        }\n        return this.api.delete([this.endPoint, this.namespace, key].join('/')).then((resp) => {\n            this.keys = this.keys.filter(elem => elem !== key);\n            return resp;\n        });\n    }\n\n    /**\n     * Updates a key with given value.\n     * @param key - key to update.\n     * @param value - value to update to.\n     * @returns {Promise} - the response body from the {@link module:api.Api#get API}.\n     */\n    update(key, value) {\n        return this.api.update([this.endPoint, this.namespace, key].join('/'), value);\n    }\n}\n\nexport default BaseStoreNamespace;\n"],"file":"BaseStoreNamespace.js"}