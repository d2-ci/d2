{"version":3,"sources":["../../src/model/ModelDefinition.js"],"names":["createModelPropertyDescriptor","propertiesObject","schemaProperty","propertyName","collection","collectionName","name","propertyDetails","configurable","enumerable","get","dataValues","constants","writable","set","dynamicPropertySetter","value","dirty","DIRTY_PROPERTY_LIST","add","createPropertiesObject","schemaProperties","createModelPropertyDescriptorOn","forEach","createValidationSetting","validationObject","validationDetails","persisted","type","schemaTypes","typeLookup","propertyType","required","min","max","owner","unique","ordered","Boolean","embeddedObject","getReferenceTypeFrom","property","href","split","pop","undefined","itemPropertyType","referenceType","createValidations","validationsObject","createModelPropertyOn","shouldBeModelCollectionProperty","model","models","shouldBeModelCollectionPropertyIterator","modelProperty","modelDefinition","modelValidations","hasOwnProperty","isAnUpdate","modelToCheck","id","translatableProperties","WeakMap","ModelDefinition","schema","properties","validations","attributes","authorities","singular","plural","displayName","shareable","metadata","apiEndpoint","klass","identifiableObject","translatable","filters","Filters","getFilters","filter","prop","translationKey","map","getOwnedPropertyJSON","bind","clone","data","Model","create","ModelDefinitions","getModelDefinitions","Object","assign","keys","values","Array","isArray","ModelCollectionProperty","ModelDefinitionPrototype","getPrototypeOf","priorFilters","getFilterList","clonedDefinition","identifier","queryParams","fields","list","join","api","then","catch","response","message","Promise","reject","listParams","extraParams","definedRootJunction","rootJunction","params","definedFilters","getQueryFilterValues","length","responseData","ModelCollection","pager","query","jsonPayload","updateUrl","baseUrl","update","saveNew","post","delete","ModelDefinitionClass","specialClasses","freeze","reduce","current","attributeDefinition","UserModelDefinition","DataSetModelDefinition","hasData","dataClone","key","obj","compulsoryDataElementOperands","OrganisationUnitModelDefinition","root","user","dataSet","organisationUnit"],"mappings":"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","sourcesContent":["import { checkType, isObject, checkDefined, isDefined } from '../lib/check'\nimport {\n    addLockedProperty,\n    curry,\n    copyOwnProperties,\n    updateAPIUrlWithBaseUrlVersionNumber,\n    pick,\n} from '../lib/utils'\nimport ModelDefinitions from './ModelDefinitions'\nimport Model from './Model'\nimport ModelCollection from './ModelCollection'\nimport ModelCollectionProperty from './ModelCollectionProperty'\nimport schemaTypes from '../lib/SchemaTypes'\nimport Filters from './Filters'\n\nimport { DIRTY_PROPERTY_LIST } from './ModelBase'\nimport { getDefaultValuesForModelType } from './config'\nimport { getOwnedPropertyJSON } from './helpers/json'\n\nfunction createModelPropertyDescriptor(propertiesObject, schemaProperty) {\n    const propertyName = schemaProperty.collection\n        ? schemaProperty.collectionName\n        : schemaProperty.name\n    const propertyDetails = {\n        // Actual property descriptor properties\n        configurable: false,\n        enumerable: true,\n        get() {\n            return this.dataValues[propertyName]\n        },\n    }\n\n    // Store available constants for ENUM type properties\n    if (schemaProperty.constants) {\n        propertyDetails.constants = schemaProperty.constants\n    }\n\n    // Only add a setter for writable properties\n    if (schemaProperty.writable) {\n        propertyDetails.set = function dynamicPropertySetter(value) {\n            // TODO: Objects and Arrays are considered unequal when their data is the same and therefore trigger a dirty\n            if (\n                (!isObject(value) && value !== this.dataValues[propertyName]) ||\n                isObject(value)\n            ) {\n                this.dirty = true\n                this[DIRTY_PROPERTY_LIST].add(propertyName)\n                this.dataValues[propertyName] = value\n            }\n        }\n    }\n\n    if (propertyName) {\n        propertiesObject[propertyName] = propertyDetails\n    }\n}\n\nfunction createPropertiesObject(schemaProperties) {\n    const propertiesObject = {}\n    const createModelPropertyDescriptorOn = curry(\n        createModelPropertyDescriptor,\n        propertiesObject\n    )\n\n    ;(schemaProperties || []).forEach(createModelPropertyDescriptorOn)\n\n    return propertiesObject\n}\n\n// eslint-disable-next-line complexity\nfunction createValidationSetting(validationObject, schemaProperty) {\n    const propertyName = schemaProperty.collection\n        ? schemaProperty.collectionName\n        : schemaProperty.name\n    const validationDetails = {\n        persisted: schemaProperty.persisted,\n        type: schemaTypes.typeLookup(schemaProperty.propertyType),\n        required: schemaProperty.required,\n        min: schemaProperty.min,\n        max: schemaProperty.max,\n        owner: schemaProperty.owner,\n        unique: schemaProperty.unique,\n        writable: schemaProperty.writable,\n        ordered: Boolean(schemaProperty.ordered),\n        embeddedObject: Boolean(schemaProperty.embeddedObject),\n    }\n\n    function getReferenceTypeFrom(property) {\n        if (property.href) {\n            return property.href.split('/').pop()\n        }\n\n        return undefined\n    }\n\n    // Add a referenceType to be able to get a hold of the reference objects model.\n    if (\n        validationDetails.type === 'REFERENCE' ||\n        (validationDetails.type === 'COLLECTION' &&\n            schemaProperty.itemPropertyType === 'REFERENCE')\n    ) {\n        validationDetails.referenceType = getReferenceTypeFrom(schemaProperty)\n    }\n\n    if (propertyName) {\n        validationObject[propertyName] = validationDetails\n    }\n}\n\nfunction createValidations(schemaProperties) {\n    const validationsObject = {}\n    const createModelPropertyOn = curry(\n        createValidationSetting,\n        validationsObject\n    )\n\n    ;(schemaProperties || []).forEach(createModelPropertyOn)\n\n    return validationsObject\n}\n\nfunction shouldBeModelCollectionProperty(model, models) {\n    // eslint-disable-next-line complexity\n    return function shouldBeModelCollectionPropertyIterator(modelProperty) {\n        return (\n            model &&\n            models &&\n            model.modelDefinition &&\n            model.modelDefinition.modelValidations &&\n            model.modelDefinition.modelValidations[modelProperty] &&\n            model.modelDefinition.modelValidations[modelProperty].type ===\n                'COLLECTION' &&\n            models.hasOwnProperty(\n                model.modelDefinition.modelValidations[modelProperty]\n                    .referenceType\n            )\n        )\n    }\n}\n\nfunction isAnUpdate(modelToCheck) {\n    return Boolean(modelToCheck.id)\n}\n\nconst translatableProperties = new WeakMap()\n\n/**\n * Definition of a Model. Basically this object contains the meta data related to the Model. Like `name`, `apiEndPoint`, `modelValidation`, etc.\n * It also has methods to create and load Models that are based on this definition. The Data element `ModelDefinition` would be used to create Data Element `Model`s\n *\n * Note: ModelDefinition has a property `api` that is used for the communication with the dhis2 api. The value of this\n * property is an instance of `Api`.\n *\n * @memberof module:model\n */\nclass ModelDefinition {\n    // eslint-disable-next-line complexity\n    constructor(schema = {}, properties, validations, attributes, authorities) {\n        checkType(schema.singular, 'string')\n        checkType(schema.plural, 'string', 'Plural')\n\n        addLockedProperty(this, 'name', schema.singular)\n        addLockedProperty(this, 'displayName', schema.displayName)\n        addLockedProperty(this, 'plural', schema.plural)\n        addLockedProperty(this, 'isShareable', schema.shareable || false)\n        addLockedProperty(this, 'isMetaData', schema.metadata || false)\n        addLockedProperty(this, 'apiEndpoint', schema.apiEndpoint)\n        addLockedProperty(this, 'javaClass', schema.klass)\n        addLockedProperty(\n            this,\n            'identifiableObject',\n            schema && schema.identifiableObject\n        )\n        addLockedProperty(this, 'modelProperties', properties)\n        addLockedProperty(this, 'modelValidations', validations)\n        addLockedProperty(this, 'attributeProperties', attributes)\n        addLockedProperty(this, 'authorities', authorities)\n        addLockedProperty(this, 'translatable', schema.translatable || false)\n\n        this.filters = Filters.getFilters(this)\n\n        translatableProperties.set(\n            this,\n            (schema.properties || [])\n                .filter(prop => prop.translationKey)\n                .map(({ name, translationKey }) => ({ name, translationKey }))\n        )\n\n        // TODO: The function getOwnedPropertyJSON should probably not be exposed, perhaps we could have a getJSONForModel(ownedPropertiesOnly=true) method.\n        this.getOwnedPropertyJSON = getOwnedPropertyJSON.bind(this)\n    }\n\n    filter() {\n        return this.clone().filters\n    }\n\n    /**\n     * Creates a fresh Model instance based on the `ModelDefinition`. If data is passed into the method that\n     * data will be loaded into the matching properties of the model.\n     *\n     * @param {Object} [data] Data values that should be loaded into the model.\n     *\n     * @returns {Model} Returns the newly created model instance.\n     *\n     * @example\n     * dataElement.create({name: 'ANC', id: 'd2sf33s3ssf'});\n     */\n    create(data) {\n        const model = Model.create(this)\n        const models = ModelDefinitions.getModelDefinitions()\n        const dataValues = data\n            ? Object.assign({}, data)\n            : getDefaultValuesForModelType(model.modelDefinition.name)\n\n        Object.keys(model)\n            .filter(shouldBeModelCollectionProperty(model, models))\n            .forEach(modelProperty => {\n                const {\n                    referenceType,\n                } = model.modelDefinition.modelValidations[modelProperty]\n                let values = []\n\n                if (Array.isArray(dataValues[modelProperty])) {\n                    values = dataValues[modelProperty].map(value =>\n                        models[referenceType].create(value)\n                    )\n                } else if (\n                    dataValues[modelProperty] === true ||\n                    dataValues[modelProperty] === undefined\n                ) {\n                    values = dataValues[modelProperty]\n                }\n\n                dataValues[modelProperty] = ModelCollectionProperty.create(\n                    model,\n                    models[referenceType],\n                    modelProperty,\n                    values\n                )\n                model.dataValues[modelProperty] = dataValues[modelProperty]\n            })\n\n        Object.keys(model)\n            .filter(\n                modelProperty =>\n                    !shouldBeModelCollectionProperty(\n                        model,\n                        models\n                    )(modelProperty)\n            )\n            .forEach(modelProperty => {\n                model.dataValues[modelProperty] = dataValues[modelProperty]\n            })\n\n        return model\n    }\n\n    clone() {\n        const ModelDefinitionPrototype = Object.getPrototypeOf(this)\n        const priorFilters = this.filters.getFilterList()\n        const clonedDefinition = copyOwnProperties(\n            Object.create(ModelDefinitionPrototype),\n            this\n        )\n\n        clonedDefinition.filters = Filters.getFilters(\n            clonedDefinition,\n            priorFilters\n        )\n\n        return clonedDefinition\n    }\n\n    /**\n     * Get a `Model` instance from the api loaded with data that relates to `identifier`.\n     * This will do an API call and return a Promise that resolves with a `Model` or rejects with the api error message.\n     *\n     * @param {String} identifier\n     * @param {Object} [queryParams={fields: ':all'}] Query parameters that should be passed to the GET query.\n     * @returns {Promise} Resolves with a `Model` instance or an error message.\n     *\n     * @example\n     * //Do a get request for the dataElement with given id (d2sf33s3ssf) and print it's name\n     * //when that request is complete and the model is loaded.\n     * dataElement.get('d2sf33s3ssf')\n     *   .then(model => console.log(model.name));\n     */\n    get(\n        identifier,\n        queryParams = {\n            fields: ':all,attributeValues[:all,attribute[id,name,displayName]]',\n        }\n    ) {\n        checkDefined(identifier, 'Identifier')\n\n        if (Array.isArray(identifier)) {\n            return this.list({ filter: [`id:in:[${identifier.join(',')}]`] })\n        }\n\n        // TODO: should throw error if API has not been defined\n        return this.api\n            .get([this.apiEndpoint, identifier].join('/'), queryParams)\n            .then(data => this.create(data))\n            .catch(response => {\n                if (response.message) {\n                    return Promise.reject(response.message)\n                }\n\n                return Promise.reject(response)\n            })\n    }\n\n    /**\n     * Loads a list of models.\n     *\n     * @param {Object} [listParams={fields: ':all'}] Query parameters that should be passed to the GET query.\n     * @returns {Promise} ModelCollection collection of models objects of the `ModelDefinition` type.\n     *\n     * @example\n     * // Loads a list of models and prints their name.\n     * dataElement.list()\n     *   .then(modelCollection => {\n     *     modelCollection.forEach(model => console.log(model.name));\n     *   });\n     */\n    list(listParams = {}) {\n        const { apiEndpoint, ...extraParams } = listParams\n        const definedRootJunction = this.filters.rootJunction\n            ? { rootJunction: this.filters.rootJunction }\n            : {}\n        const params = Object.assign(\n            { fields: ':all' },\n            definedRootJunction,\n            extraParams\n        )\n        const definedFilters = this.filters.getQueryFilterValues()\n\n        if (!isDefined(params.filter)) {\n            delete params.filter\n            if (definedFilters.length) {\n                params.filter = definedFilters\n            }\n        }\n\n        // If listParams.apiEndpoint exists, send the request there in stead of this.apiEndpoint\n        return this.api\n            .get(apiEndpoint || this.apiEndpoint, params)\n            .then(responseData =>\n                ModelCollection.create(\n                    this,\n                    responseData[this.plural].map(data => this.create(data)),\n                    Object.assign(responseData.pager || {}, { query: params })\n                )\n            )\n    }\n\n    /**\n     * This method is used by the `Model` instances to save the model when calling `model.save()`.\n     *\n     * @param {Model} model The model that should be saved to the server.\n     * @returns {Promise} A promise which resolves when the save was successful\n     * or rejects when it failed. The promise will resolve with the data that is\n     * returned from the server.\n     *\n     * @note {warning} This should generally not be called directly.\n     */\n    // TODO: check the return status of the save to see if it was actually successful and not ignored\n    save(model) {\n        if (isAnUpdate(model)) {\n            const jsonPayload = getOwnedPropertyJSON.bind(this)(model)\n            // Fallback to modelDefinition if href is unavailable\n            const updateUrl = model.dataValues.href\n                ? updateAPIUrlWithBaseUrlVersionNumber(\n                      model.dataValues.href,\n                      this.api.baseUrl\n                  )\n                : [model.modelDefinition.apiEndpoint, model.dataValues.id].join(\n                      '/'\n                  )\n\n            // Save the existing model\n            return this.api.update(updateUrl, jsonPayload, true)\n        }\n\n        return this.saveNew(model)\n    }\n\n    saveNew(model) {\n        const jsonPayload = getOwnedPropertyJSON.bind(this)(model)\n\n        // Its a new object\n        return this.api.post(this.apiEndpoint, jsonPayload)\n    }\n\n    /**\n     * This method returns a list of property names that that are defined\n     * as \"owner\" properties on this schema. This means these properties are used\n     * when saving the model to the server.\n     *\n     * @returns {String[]} Returns an array of property names.\n     *\n     * @example\n     * dataElement.getOwnedPropertyNames()\n     */\n    getOwnedPropertyNames() {\n        return Object.keys(this.modelValidations).filter(\n            propertyName => this.modelValidations[propertyName].owner\n        )\n    }\n\n    /**\n     * This method is used by the `Model` instances to delete the model when calling `model.delete()`.\n     *\n     * @returns {Promise} Returns a promise to the deletion operation\n     *\n     * @note {warning} This should generally not be called directly.\n     */\n    delete(model) {\n        if (model.dataValues.href) {\n            return this.api.delete(model.dataValues.href)\n        }\n        return this.api.delete(\n            [model.modelDefinition.apiEndpoint, model.dataValues.id].join('/')\n        )\n    }\n\n    /**\n     * Check for if the Model supports translations\n     *\n     * @returns {Boolean} True when the schema can be translated, false otherwise\n     */\n    isTranslatable() {\n        return this.translatable\n    }\n\n    /**\n     * These properties can be translated using the DHIS2 _database_ translations.\n     *\n     * @returns {String[]} Returns a list of property names on the object that are translatable.\n     */\n    getTranslatableProperties() {\n        return translatableProperties.get(this).map(pick('name'))\n    }\n\n    /**\n     * This method is similar to getTranslatableProperties() but in addition to the property names also returns the\n     * `translationKey` that is used to save the translations for the property names.\n     *\n     * @returns {Object[]} Returns an array with objects that have `name` and `translationKey` properties.\n     */\n    getTranslatablePropertiesWithKeys() {\n        return translatableProperties.get(this)\n    }\n\n    /**\n     * @static\n     *\n     * This method creates a new `ModelDefinition` based on a JSON structure called\n     * a schema. A schema represents the structure of a domain model as it is\n     * required by DHIS. Since these schemas can not be altered on the server from\n     * the modelDefinition is frozen to prevent accidental changes to the definition.\n     *\n     * @param {Object} schema A schema definition received from the web api (/api/schemas)\n     * @param {Object[]} attributes A list of attribute objects that describe custom attributes (/api/attributes)\n     *\n     * @returns {ModelDefinition} Frozen model definition object.\n     *\n     * @example\n     * ModelDefinition.createFromSchema(schemaDefinition, attributes);\n     *\n     * @note {info} An example of a schema definition can be found on\n     * https://apps.dhis2.org/demo/api/schemas/dataElement\n     */\n    static createFromSchema(schema, attributes = []) {\n        let ModelDefinitionClass\n        checkType(schema, Object, 'Schema')\n\n        if (\n            typeof ModelDefinition.specialClasses[schema.singular] ===\n            'function'\n        ) {\n            ModelDefinitionClass =\n                ModelDefinition.specialClasses[schema.singular]\n        } else {\n            ModelDefinitionClass = ModelDefinition\n        }\n\n        return Object.freeze(\n            new ModelDefinitionClass(\n                schema,\n                Object.freeze(createPropertiesObject(schema.properties)),\n                Object.freeze(createValidations(schema.properties)),\n                attributes.reduce((current, attributeDefinition) => {\n                    current[attributeDefinition.name] = attributeDefinition\n                    return current\n                }, {}),\n                schema.authorities\n            )\n        )\n    }\n}\n\nclass UserModelDefinition extends ModelDefinition {\n    // TODO: userCredentials should always be included, no matter what the query params, that is currently not the case\n    get(identifier, queryParams = { fields: ':all,userCredentials[:owner]' }) {\n        return super.get(identifier, queryParams)\n    }\n}\n\nclass DataSetModelDefinition extends ModelDefinition {\n    create(data = {}) {\n        const hasData = Boolean(Object.keys(data).length)\n\n        // Filter out the compulsoryDataElementOperands structure from the retrieved data\n        // This structure does not follow the convention of a typical reference. We can not create a proper\n        // ModelCollection for this collection.\n        const dataClone = Object.keys(data)\n            .filter(key => key !== 'compulsoryDataElementOperands')\n            .reduce((obj, key) => {\n                obj[key] = data[key]\n                return obj\n            }, {})\n\n        // Create the model using the usual way of creating a model\n        // Only pass data when there is data in the object passed to the constructor. This will guarantee\n        // that the empty ModelCollections are created properly.\n        const model = super.create(hasData ? dataClone : undefined)\n\n        // Set the compulsoryDataElementOperands onto the dataValues so it will be included during the save operations\n        model.dataValues.compulsoryDataElementOperands =\n            data.compulsoryDataElementOperands\n\n        return model\n    }\n}\n\nclass OrganisationUnitModelDefinition extends ModelDefinition {\n    // If a 'root' is specified when listing organisation units the results will be limited to the root and its\n    // descendants. This is special behavior for the organisation unit API endpoint, which is documented here:\n    // https://dhis2.github.io/dhis2-docs/master/en/developer/html/webapi_organisation_units.html\n    list(extraParams = {}) {\n        const { root, ...params } = extraParams\n\n        if (extraParams.hasOwnProperty('root') && root) {\n            params.apiEndpoint = `${this.apiEndpoint}/${root}`\n        }\n\n        return super.list(params)\n    }\n}\n\nModelDefinition.specialClasses = {\n    user: UserModelDefinition,\n    dataSet: DataSetModelDefinition,\n    organisationUnit: OrganisationUnitModelDefinition,\n}\n\nexport default ModelDefinition\n"],"file":"ModelDefinition.js"}