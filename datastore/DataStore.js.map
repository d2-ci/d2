{"version":3,"sources":["../../src/datastore/DataStore.js"],"names":["DataStore","api","Api","getApi","endPoint","DataStoreNamespace","namespace","autoLoad","getDataStore","dataStore","BaseStore"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;IAyBMA,S;;;;;AACF,uBAAwD;AAAA,QAA5CC,GAA4C,uEAAtCC,aAAIC,MAAJ,EAAsC;AAAA,QAAxBC,QAAwB,uEAAb,WAAa;;AAAA;;AAAA,kFAC9CH,GAD8C,EACzCG,QADyC,EAC/BC,2BAD+B;AAEvD;AAED;;;;;;;;;;;;;;;;;;;wBAeIC,S,EAA4B;AAAA,UAAjBC,QAAiB,uEAAN,IAAM;AAC5B,gFAAiBD,SAAjB,EAA4BC,QAA5B;AACH;AAED;;;;;;;;;;;;;;;2BAYOD,S,EAAW;AACd,mFAAoBA,SAApB;AACH;AAED;;;;;;;;;;;;mCASsB;AAClB,UAAI,CAACN,SAAS,CAACQ,YAAV,CAAuBC,SAA5B,EAAuC;AACnCT,QAAAA,SAAS,CAACQ,YAAV,CAAuBC,SAAvB,GAAmC,IAAIT,SAAJ,EAAnC;AACH;;AAED,aAAOA,SAAS,CAACQ,YAAV,CAAuBC,SAA9B;AACH;;;;EAvDmBC,mB;;eA0DTV,S","sourcesContent":["import BaseStore from './BaseStore'\nimport DataStoreNamespace from './DataStoreNamespace'\nimport Api from '../api/Api'\n\n/**\n * @augments module:datastore.BaseStore\n * @description\n * Represents the dataStore that can be interacted with. This can be used to get instances of DataStoreNamespace, which\n * can be used to interact with the {@link module:datastore.DataStoreNamespace namespace API}.\n *\n * The store is a key-value store, where a namespace contains a list of keys, and\n * a key corresponds to an arbitrary JSON-object. The dataStore is DHIS2-instance wide.\n *\n * Note that a namespace cannot exist without at least one key-value pair, for this reason\n * you need to call {@link module:datastore.DataStoreNamespace#set set()} after {@link module:datastore.DataStore#create create()} to save a namespace\n * with a key and a value.\n *\n * @example\n * import { init } from 'd2';\n *\n * init({baseUrl: 'https://play.dhis2.org/demo/api'})\n *   .then((d2) => {\n *     d2.dataStore.get('namespace').then(namespace => {\n *          namespace.get('key').then(value => console.log(value))\n *      });\n *   });\n *\n * @memberof module:datastore\n */\nclass DataStore extends BaseStore {\n    constructor(api = Api.getApi(), endPoint = 'dataStore') {\n        super(api, endPoint, DataStoreNamespace)\n    }\n\n    /**\n     * @description\n     * Tries to get the given namespace from the server, and returns an instance of DataStore that\n     * may be used to interact with this namespace. See {@link module:datastore.DataStoreNamespace DataStore}.\n     *\n     * @example <caption>Getting a namespace</caption>\n     * d2.dataStore.get('namespace').then(namespace => {\n     *     namespace.set('new key', value);\n     *});\n     * @param namespace - Namespace to get.\n     * @param [autoLoad=true] If true, autoloads the keys of the namespace from the server.\n     * If false, an instance of the namespace is returned without any keys (no request is sent to the server).\n     * @returns {Promise<DataStoreNamespace>} An instance of a DataStore representing the namespace that can be interacted with,\n     * or an error if namespace exists.\n     */\n    get(namespace, autoLoad = true) {\n        return super.get(namespace, autoLoad)\n    }\n\n    /**\n     * Creates a namespace. Ensures that the namespace does not exists on the server.\n     * Note that for the namespace to be saved on the server, you need to call {@link module:datastore.DataStoreNamespace#set set}.\n     *\n     * @example <caption>Creating a namespace</caption>\n     * d2.dataStore.create('new namespace').then(namespace => {\n     *     namespace.set('new key', value);\n     * });\n     * @param {string} namespace The namespace to create.\n     * @returns {Promise<DataStoreNamespace>} An instance of the current store-Namespace-instance representing the namespace that can be interacted with, or\n     * an error if namespace exists.\n     */\n    create(namespace) {\n        return super.create(namespace)\n    }\n\n    /**\n     * @static\n     *\n     * @returns {DataStore} Object with the dataStore interaction properties\n     *\n     * @description\n     * Get a new instance of the dataStore object. This will function as a singleton, when a DataStore object has been created\n     * when requesting getDataStore again the original version will be returned.\n     */\n    static getDataStore() {\n        if (!DataStore.getDataStore.dataStore) {\n            DataStore.getDataStore.dataStore = new DataStore()\n        }\n\n        return DataStore.getDataStore.dataStore\n    }\n}\n\nexport default DataStore\n"],"file":"DataStore.js"}