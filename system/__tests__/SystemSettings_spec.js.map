{"version":3,"sources":["../../../src/system/__tests__/SystemSettings_spec.js"],"names":["jest","mock","settingsFixture","keyLastSuccessfulResourceTablesUpdate","describe","systemSettings","mockApi","beforeEach","MockApi","mockReset","getApi","SystemSettings","it","expect","toThrowErrorMatchingSnapshot","api","toBe","get","mockReturnValueOnce","Promise","resolve","all","toBeInstanceOf","Function","then","toHaveBeenCalledTimes","calls","toEqual","settings","result","assertions","catch","error","TypeError","message","value","mydataKey","reject","mockReturnValue","post","delete","set","type","requestOptions","headers","toBeCalledWith","afterEach"],"mappings":";;AAAA;;AACA;;;;AAEAA,IAAI,CAACC,IAAL,CAAU,eAAV;AAEA,IAAMC,eAAe,GAAG;AACpBC,EAAAA,qCAAqC,EAAE;AADnB,CAAxB;AAIAC,QAAQ,CAAC,iBAAD,EAAoB,YAAM;AAC9B,MAAIC,cAAJ;AACA,MAAIC,OAAJ;AAEAC,EAAAA,UAAU,CAAC,YAAM;AACbC,iBAAQC,SAAR;;AACAH,IAAAA,OAAO,GAAGE,aAAQE,MAAR,EAAV;AACAL,IAAAA,cAAc,GAAG,IAAIM,uBAAJ,CAAmB,IAAIH,YAAJ,EAAnB,CAAjB;AACH,GAJS,CAAV;AAMAI,EAAAA,EAAE,CAAC,gDAAD,EAAmD,YAAM;AACvDC,IAAAA,MAAM,CAAC;AAAA,aAAM,8BAAN;AAAA,KAAD,CAAN,CAA+BC,4BAA/B,GADuD,CACQ;AAClE,GAFC,CAAF;AAIAF,EAAAA,EAAE,CAAC,gEAAD,EAAmE,YAAM;AACvEC,IAAAA,MAAM,CAACR,cAAc,CAACU,GAAhB,CAAN,CAA2BC,IAA3B,CAAgCV,OAAhC;AACH,GAFC,CAAF;AAIAF,EAAAA,QAAQ,CAAC,KAAD,EAAQ,YAAM;AAClBG,IAAAA,UAAU,CAAC,YAAM;AACbF,MAAAA,cAAc,CAACU,GAAf,CAAmBE,GAAnB,CACKC,mBADL,CACyBC,OAAO,CAACC,OAAR,CAAgBlB,eAAhB,CADzB;AAEH,KAHS,CAAV;AAKAU,IAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAM;AAC7BC,MAAAA,MAAM,CAACR,cAAc,CAACgB,GAAhB,CAAN,CAA2BC,cAA3B,CAA0CC,QAA1C;AACH,KAFC,CAAF;AAIAX,IAAAA,EAAE,CAAC,mDAAD,EAAsD;AAAA,aAAMP,cAAc,CAACgB,GAAf,GAAqBG,IAArB,CAA0B,YAAM;AAC1FX,QAAAA,MAAM,CAACP,OAAO,CAACW,GAAT,CAAN,CAAoBQ,qBAApB,CAA0C,CAA1C;AACAZ,QAAAA,MAAM,CAACP,OAAO,CAACW,GAAR,CAAYhB,IAAZ,CAAiByB,KAAjB,CAAuB,CAAvB,EAA0B,CAA1B,CAAD,CAAN,CAAqCC,OAArC,CAA6C,gBAA7C;AACH,OAH6D,CAAN;AAAA,KAAtD,CAAF;AAKAf,IAAAA,EAAE,CAAC,8CAAD,EAAiD;AAAA,aAAMP,cAAc,CAACgB,GAAf,GACpDG,IADoD,CAC/C,UAACI,QAAD,EAAc;AAChBf,QAAAA,MAAM,CAACe,QAAQ,CAACzB,qCAAV,CAAN,CAAuDa,IAAvD,CAA4D,8BAA5D;AACH,OAHoD,CAAN;AAAA,KAAjD,CAAF;AAKAJ,IAAAA,EAAE,CAAC,+BAAD,EAAkC;AAAA,aAAMP,cAAc,CAACgB,GAAf,GAAqBG,IAArB,CAA0B;AAAA,eAAMnB,cAAc,CAACgB,GAAf,EAAN;AAAA,OAA1B,EACrCG,IADqC,CAChC,YAAM;AACRX,QAAAA,MAAM,CAACR,cAAc,CAACuB,QAAhB,CAAN,CAAgCD,OAAhC,CAAwCzB,eAAxC;AACAW,QAAAA,MAAM,CAACP,OAAO,CAACW,GAAT,CAAN,CAAoBQ,qBAApB,CAA0C,CAA1C;AACH,OAJqC,CAAN;AAAA,KAAlC,CAAF;AAKH,GAzBO,CAAR;AA2BArB,EAAAA,QAAQ,CAAC,KAAD,EAAQ,YAAM;AAClBG,IAAAA,UAAU,CAAC,YAAM;AACbF,MAAAA,cAAc,GAAG,IAAIM,uBAAJ,CAAmBH,aAAQE,MAAR,EAAnB,CAAjB;AACH,KAFS,CAAV;AAIAE,IAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAM;AAC7BC,MAAAA,MAAM,CAACR,cAAc,CAACY,GAAhB,CAAN,CAA2BK,cAA3B,CAA0CC,QAA1C;AACH,KAFC,CAAF;AAIAX,IAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAM;AAChCP,MAAAA,cAAc,CAACU,GAAf,CAAmBE,GAAnB,CACKC,mBADL,CACyBC,OAAO,CAACC,OAAR,CAAgBlB,eAAe,CAACC,qCAAhC,CADzB;AAGA,UAAM0B,MAAM,GAAGxB,cAAc,CAACY,GAAf,CAAmB,uCAAnB,CAAf;AAEAJ,MAAAA,MAAM,CAACgB,MAAD,CAAN,CAAeP,cAAf,CAA8BH,OAA9B;AACH,KAPC,CAAF;AASAP,IAAAA,EAAE,CAAC,sEAAD,EAAyE,YAAM;AAC7EC,MAAAA,MAAM,CAACiB,UAAP,CAAkB,CAAlB;AAEA,aAAOzB,cAAc,CAACY,GAAf,GACFc,KADE,CACI,UAACC,KAAD,EAAW;AACdnB,QAAAA,MAAM,CAACmB,KAAD,CAAN,CAAcV,cAAd,CAA6BW,SAA7B;AACApB,QAAAA,MAAM,CAACmB,KAAK,CAACE,OAAP,CAAN,CAAsBlB,IAAtB,CACI,4EADJ;AAGH,OANE,CAAP;AAOH,KAVC,CAAF;AAYAJ,IAAAA,EAAE,CAAC,sCAAD,EAAyC,YAAM;AAC7CP,MAAAA,cAAc,CAACU,GAAf,CAAmBE,GAAnB,CACKC,mBADL,CACyBC,OAAO,CAACC,OAAR,CAAgBlB,eAAe,CAACC,qCAAhC,CADzB;AAGAE,MAAAA,cAAc,CAACY,GAAf,CAAmB,uCAAnB;AAEAJ,MAAAA,MAAM,CAACR,cAAc,CAACU,GAAf,CAAmBE,GAAnB,CAAuBhB,IAAvB,CAA4ByB,KAA5B,CAAkC,CAAlC,EAAqC,CAArC,CAAD,CAAN,CACKV,IADL,CACU,sDADV;AAEH,KARC,CAAF;AAUAJ,IAAAA,EAAE,CAAC,0CAAD,EAA6C,YAAM;AACjDP,MAAAA,cAAc,CAACU,GAAf,CAAmBE,GAAnB,CACKC,mBADL,CACyBC,OAAO,CAACC,OAAR,CAAgBlB,eAAe,CAACC,qCAAhC,CADzB;AAGA,aAAOE,cAAc,CAACY,GAAf,CAAmB,uCAAnB,EACFO,IADE,CACG,UAACW,KAAD,EAAW;AACbtB,QAAAA,MAAM,CAACsB,KAAD,CAAN,CAAcnB,IAAd,CAAmB,8BAAnB;AACH,OAHE,CAAP;AAIH,KARC,CAAF;AAUAJ,IAAAA,EAAE,CAAC,0DAAD,EAA6D,YAAM;AACjEP,MAAAA,cAAc,CAACU,GAAf,CAAmBE,GAAnB,CACKC,mBADL,CACyBC,OAAO,CAACC,OAAR,CAAgB,8BAAhB,CADzB;AAGA,aAAOf,cAAc,CAACY,GAAf,CAAmB,uCAAnB,EACFO,IADE,CACG,UAACW,KAAD,EAAW;AACbtB,QAAAA,MAAM,CAACsB,KAAD,CAAN,CAAcR,OAAd,CAAsB;AAAES,UAAAA,SAAS,EAAE;AAAb,SAAtB;AACH,OAHE,CAAP;AAIH,KARC,CAAF;AAUAxB,IAAAA,EAAE,CAAC,iDAAD,EAAoD,YAAM;AACxDP,MAAAA,cAAc,CAACU,GAAf,CAAmBE,GAAnB,CAAuBC,mBAAvB,CAA2CC,OAAO,CAACC,OAAR,EAA3C;AAEA,aAAOf,cAAc,CAACY,GAAf,CAAmB,+BAAnB,EACFO,IADE,CAEC;AAAA,eAAML,OAAO,CAACkB,MAAR,CAAe,kBAAf,CAAN;AAAA,OAFD,EAGC,UAACL,KAAD,EAAW;AACPnB,QAAAA,MAAM,CAACmB,KAAK,CAACE,OAAP,CAAN,CAAsBlB,IAAtB,CAA2B,6DAA3B;AACH,OALF,CAAP;AAMH,KATC,CAAF;AAWAJ,IAAAA,EAAE,CAAC,gEAAD,EAAmE,YAAM;AACvEP,MAAAA,cAAc,CAACU,GAAf,CAAmBE,GAAnB,CACKC,mBADL,CACyBC,OAAO,CAACC,OAAR,CAAgBlB,eAAe,CAACC,qCAAhC,CADzB,EAEKe,mBAFL,CAEyBC,OAAO,CAACC,OAAR,CAAgBlB,eAAe,CAACC,qCAAhC,CAFzB;AAIA,aAAOE,cAAc,CAACY,GAAf,CAAmB,uCAAnB,EACFO,IADE,CACG;AAAA,eAAMnB,cAAc,CAACY,GAAf,CAAmB,uCAAnB,CAAN;AAAA,OADH,EAEFO,IAFE,CAEG,YAAM;AACRX,QAAAA,MAAM,CAACR,cAAc,CAACU,GAAf,CAAmBE,GAApB,CAAN,CAA+BQ,qBAA/B,CAAqD,CAArD;AACH,OAJE,CAAP;AAKH,KAVC,CAAF;AAYAb,IAAAA,EAAE,CAAC,qDAAD,EAAwD,YAAM;AAC5DP,MAAAA,cAAc,CAACU,GAAf,CAAmBE,GAAnB,CACKC,mBADL,CACyBC,OAAO,CAACC,OAAR,CAAgBlB,eAAhB,CADzB;AAGA,aAAOG,cAAc,CAACgB,GAAf,GACFG,IADE,CACG;AAAA,eAAMnB,cAAc,CAACY,GAAf,CAAmB,uCAAnB,CAAN;AAAA,OADH,EAEFO,IAFE,CAEG;AAAA,eAAMnB,cAAc,CAACY,GAAf,CAAmB,uCAAnB,CAAN;AAAA,OAFH,EAGFO,IAHE,CAGG,UAACW,KAAD,EAAW;AACbtB,QAAAA,MAAM,CAACsB,KAAD,CAAN,CAAcnB,IAAd,CAAmBd,eAAe,CAACC,qCAAnC;AACAU,QAAAA,MAAM,CAACR,cAAc,CAACU,GAAf,CAAmBE,GAApB,CAAN,CAA+BQ,qBAA/B,CAAqD,CAArD;AACH,OANE,CAAP;AAOH,KAXC,CAAF;AAaAb,IAAAA,EAAE,CAAC,yDAAD,EAA4D,YAAM;AAChEP,MAAAA,cAAc,CAACU,GAAf,CAAmBE,GAAnB,CAAuBC,mBAAvB,CAA2CC,OAAO,CAACC,OAAR,CAAgBlB,eAAhB,CAA3C;AAEA,aAAOG,cAAc,CAACgB,GAAf,GACFG,IADE,CACG,YAAM;AACRX,QAAAA,MAAM,CAACR,cAAc,CAACY,GAAf,CAAmB,uCAAnB,CAAD,CAAN,CAAoEK,cAApE,CAAmFH,OAAnF;AACH,OAHE,CAAP;AAIH,KAPC,CAAF;AAQH,GAxGO,CAAR;AA0GAf,EAAAA,QAAQ,CAAC,MAAD,EAAS,YAAM;AACnBG,IAAAA,UAAU,CAAC,YAAM;AACbF,MAAAA,cAAc,GAAG,IAAIM,uBAAJ,CAAmB,IAAIH,YAAJ,EAAnB,CAAjB;AAEAF,MAAAA,OAAO,CAACW,GAAR,CAAYqB,eAAZ,CAA4BnB,OAAO,CAACC,OAAR,CAAgBlB,eAAhB,CAA5B;AACAI,MAAAA,OAAO,CAACiC,IAAR,CAAaD,eAAb,CAA6BnB,OAAO,CAACC,OAAR,EAA7B;AACAd,MAAAA,OAAO,CAACkC,MAAR,CAAeF,eAAf,CAA+BnB,OAAO,CAACC,OAAR,EAA/B;AACH,KANS,CAAV;AAQAR,IAAAA,EAAE,CAAC,wBAAD,EAA2B;AAAA,aAAMP,cAAc,CAACoC,GAAf,CAAmB,WAAnB,EAAgC,UAAhC,EAC9BjB,IAD8B,CACzB,YAAM;AACRX,QAAAA,MAAM,CAACP,OAAO,CAACW,GAAT,CAAN,CAAoBQ,qBAApB,CAA0C,CAA1C;AACAZ,QAAAA,MAAM,CAACP,OAAO,CAACiC,IAAT,CAAN,CAAqBd,qBAArB,CAA2C,CAA3C;AACAZ,QAAAA,MAAM,CAACP,OAAO,CAACkC,MAAT,CAAN,CAAuBf,qBAAvB,CAA6C,CAA7C;AACH,OAL8B,CAAN;AAAA,KAA3B,CAAF;AAOAb,IAAAA,EAAE,CAAC,uDAAD,EAA0D;AAAA,aAAMP,cAAc,CAACoC,GAAf,CAAmB,WAAnB,EAAgC,EAAhC,EAC7DjB,IAD6D,CACxD,YAAM;AACRX,QAAAA,MAAM,CAACP,OAAO,CAACW,GAAT,CAAN,CAAoBQ,qBAApB,CAA0C,CAA1C;AACAZ,QAAAA,MAAM,CAACP,OAAO,CAACiC,IAAT,CAAN,CAAqBd,qBAArB,CAA2C,CAA3C;AACAZ,QAAAA,MAAM,CAACP,OAAO,CAACkC,MAAT,CAAN,CAAuBf,qBAAvB,CAA6C,CAA7C;AACH,OAL6D,CAAN;AAAA,KAA1D,CAAF;AAOAb,IAAAA,EAAE,CAAC,4BAAD,EAA+B,YAAM;AACnC,UAAMuB,KAAK,GAAG;AAAEO,QAAAA,IAAI,EAAE,QAAR;AAAkBP,QAAAA,KAAK,EAAE;AAAzB,OAAd;AAEA,aAAO9B,cAAc,CAACoC,GAAf,CAAmB,WAAnB,EAAgCN,KAAhC,EACFX,IADE,CACG,YAAM;AACRX,QAAAA,MAAM,CAACP,OAAO,CAACW,GAAT,CAAN,CAAoBQ,qBAApB,CAA0C,CAA1C;AACAZ,QAAAA,MAAM,CAACP,OAAO,CAACiC,IAAT,CAAN,CAAqBd,qBAArB,CAA2C,CAA3C;AACAZ,QAAAA,MAAM,CAACP,OAAO,CAACkC,MAAT,CAAN,CAAuBf,qBAAvB,CAA6C,CAA7C;AAEAZ,QAAAA,MAAM,CAACP,OAAO,CAACiC,IAAR,CAAatC,IAAb,CAAkByB,KAAlB,CAAwB,CAAxB,EAA2B,CAA3B,CAAD,CAAN,CAAsCV,IAAtC,CAA2C,0BAA3C;AACAH,QAAAA,MAAM,CAACP,OAAO,CAACiC,IAAR,CAAatC,IAAb,CAAkByB,KAAlB,CAAwB,CAAxB,EAA2B,CAA3B,CAAD,CAAN,CAAsCV,IAAtC,CAA2CmB,KAA3C;AACH,OARE,CAAP;AASH,KAZC,CAAF;AAcAvB,IAAAA,EAAE,CAAC,+DAAD,EAAkE,YAAM;AACtE,UAAMuB,KAAK,GAAG,MAAd;AAEA,aAAO9B,cAAc,CAACoC,GAAf,CAAmB,WAAnB,EAAgCN,KAAhC,EACFX,IADE,CACG,YAAM;AACRX,QAAAA,MAAM,CAACP,OAAO,CAACW,GAAT,CAAN,CAAoBQ,qBAApB,CAA0C,CAA1C;AACAZ,QAAAA,MAAM,CAACP,OAAO,CAACiC,IAAT,CAAN,CAAqBd,qBAArB,CAA2C,CAA3C;AACAZ,QAAAA,MAAM,CAACP,OAAO,CAACkC,MAAT,CAAN,CAAuBf,qBAAvB,CAA6C,CAA7C;AAEA,YAAMkB,cAAc,GAAG;AAAEC,UAAAA,OAAO,EAAE;AAAE,4BAAgB;AAAlB;AAAX,SAAvB;AACA/B,QAAAA,MAAM,CAACP,OAAO,CAACiC,IAAT,CAAN,CAAqBM,cAArB,CAAoC,0BAApC,EAAgEV,KAAhE,EAAuEQ,cAAvE;AACH,OARE,CAAP;AASH,KAZC,CAAF;AAcA/B,IAAAA,EAAE,CAAC,iCAAD,EAAoC;AAAA,aAAMP,cAAc,CAACgB,GAAf,GACvCG,IADuC,CAClC;AAAA,eAAMnB,cAAc,CAACoC,GAAf,CAAmB,MAAnB,EAA2B,OAA3B,CAAN;AAAA,OADkC,EAEvCjB,IAFuC,CAElC;AAAA,eAAMnB,cAAc,CAACgB,GAAf,EAAN;AAAA,OAFkC,EAGvCG,IAHuC,CAGlC,YAAM;AACRX,QAAAA,MAAM,CAACP,OAAO,CAACW,GAAT,CAAN,CAAoBQ,qBAApB,CAA0C,CAA1C;AACAZ,QAAAA,MAAM,CAACP,OAAO,CAACiC,IAAT,CAAN,CAAqBd,qBAArB,CAA2C,CAA3C;AACH,OANuC,CAAN;AAAA,KAApC,CAAF;AAOH,GA1DO,CAAR;AA4DArB,EAAAA,QAAQ,CAAC,kBAAD,EAAqB,YAAM;AAC/BG,IAAAA,UAAU,CAAC,YAAM;AACbF,MAAAA,cAAc,CAACU,GAAf,CAAmBwB,IAAnB,CACKrB,mBADL,CACyBC,OAAO,CAACC,OAAR,EADzB;AAEH,KAHS,CAAV;AAKA0B,IAAAA,SAAS,CAAC,YAAM;AACZzC,MAAAA,cAAc,GAAG,IAAIM,uBAAJ,CAAmB,IAAIH,YAAJ,EAAnB,CAAjB;AACH,KAFQ,CAAT;AAIAI,IAAAA,EAAE,CAAC,qCAAD,EAAwC,YAAM;AAC5C,UAAMuB,KAAK,GAAG,MAAd;AAEA,aAAO9B,cAAc,CAACoC,GAAf,CAAmB,WAAnB,EAAgCN,KAAhC,EACFX,IADE,CACG,YAAM;AACRX,QAAAA,MAAM,CAACP,OAAO,CAACiC,IAAT,CAAN,CAAqBd,qBAArB,CAA2C,CAA3C;AACAZ,QAAAA,MAAM,CAACP,OAAO,CAACiC,IAAR,CAAatC,IAAb,CAAkByB,KAAlB,CAAwB,CAAxB,EAA2B,CAA3B,CAAD,CAAN,CAAsCV,IAAtC,CAA2C,0BAA3C;AACAH,QAAAA,MAAM,CAACP,OAAO,CAACiC,IAAR,CAAatC,IAAb,CAAkByB,KAAlB,CAAwB,CAAxB,EAA2B,CAA3B,CAAD,CAAN,CAAsCV,IAAtC,CAA2CmB,KAA3C;AACH,OALE,CAAP;AAMH,KATC,CAAF;AAUH,GApBO,CAAR;AAqBH,CAxOO,CAAR","sourcesContent":["import MockApi from '../../api/Api';\nimport SystemSettings from '../SystemSettings';\n\njest.mock('../../api/Api');\n\nconst settingsFixture = {\n    keyLastSuccessfulResourceTablesUpdate: 'Tue Mar 10 12:24:00 CET 2015',\n};\n\ndescribe('settings.System', () => {\n    let systemSettings;\n    let mockApi;\n\n    beforeEach(() => {\n        MockApi.mockReset();\n        mockApi = MockApi.getApi();\n        systemSettings = new SystemSettings(new MockApi());\n    });\n\n    it('should not be allowed to be called without new', () => {\n        expect(() => SystemSettings()).toThrowErrorMatchingSnapshot(); // eslint-disable-line\n    });\n\n    it('should set an instance of Api onto the SystemSettings instance', () => {\n        expect(systemSettings.api).toBe(mockApi);\n    });\n\n    describe('all', () => {\n        beforeEach(() => {\n            systemSettings.api.get\n                .mockReturnValueOnce(Promise.resolve(settingsFixture));\n        });\n\n        it('should be a function', () => {\n            expect(systemSettings.all).toBeInstanceOf(Function);\n        });\n\n        it('should call the api to get all the systemSettings', () => systemSettings.all().then(() => {\n            expect(mockApi.get).toHaveBeenCalledTimes(1);\n            expect(mockApi.get.mock.calls[0][0]).toEqual('systemSettings');\n        }));\n\n        it('should resolve the promise with the settings', () => systemSettings.all()\n            .then((settings) => {\n                expect(settings.keyLastSuccessfulResourceTablesUpdate).toBe('Tue Mar 10 12:24:00 CET 2015');\n            }));\n\n        it('should only call the API once', () => systemSettings.all().then(() => systemSettings.all())\n            .then(() => {\n                expect(systemSettings.settings).toEqual(settingsFixture);\n                expect(mockApi.get).toHaveBeenCalledTimes(1);\n            }));\n    });\n\n    describe('get', () => {\n        beforeEach(() => {\n            systemSettings = new SystemSettings(MockApi.getApi());\n        });\n\n        it('should be a function', () => {\n            expect(systemSettings.get).toBeInstanceOf(Function);\n        });\n\n        it('should return a Promise', () => {\n            systemSettings.api.get\n                .mockReturnValueOnce(Promise.resolve(settingsFixture.keyLastSuccessfulResourceTablesUpdate));\n\n            const result = systemSettings.get('keyLastSuccessfulResourceTablesUpdate');\n\n            expect(result).toBeInstanceOf(Promise);\n        });\n\n        it('should reject the promise with an error if no key has been specified', () => {\n            expect.assertions(2);\n\n            return systemSettings.get()\n                .catch((error) => {\n                    expect(error).toBeInstanceOf(TypeError);\n                    expect(error.message).toBe(\n                        'A \"key\" parameter should be specified when calling get() on systemSettings',\n                    );\n                });\n        });\n\n        it('should call the api to get the value', () => {\n            systemSettings.api.get\n                .mockReturnValueOnce(Promise.resolve(settingsFixture.keyLastSuccessfulResourceTablesUpdate));\n\n            systemSettings.get('keyLastSuccessfulResourceTablesUpdate');\n\n            expect(systemSettings.api.get.mock.calls[0][0])\n                .toBe('systemSettings/keyLastSuccessfulResourceTablesUpdate');\n        });\n\n        it('should return the value from the promise', () => {\n            systemSettings.api.get\n                .mockReturnValueOnce(Promise.resolve(settingsFixture.keyLastSuccessfulResourceTablesUpdate));\n\n            return systemSettings.get('keyLastSuccessfulResourceTablesUpdate')\n                .then((value) => {\n                    expect(value).toBe('Tue Mar 10 12:24:00 CET 2015');\n                });\n        });\n\n        it('should try to transform the response to json if possible', () => {\n            systemSettings.api.get\n                .mockReturnValueOnce(Promise.resolve('{\"mydataKey\": \"myDataValue\"}'));\n\n            return systemSettings.get('keyLastSuccessfulResourceTablesUpdate')\n                .then((value) => {\n                    expect(value).toEqual({ mydataKey: 'myDataValue' });\n                });\n        });\n\n        it('should reject the promise if the value is empty', () => {\n            systemSettings.api.get.mockReturnValueOnce(Promise.resolve());\n\n            return systemSettings.get('keyThatDefinitelyDoesNotExist')\n                .then(\n                    () => Promise.reject('Promise resolved'),\n                    (error) => {\n                        expect(error.message).toBe('The requested systemSetting has no value or does not exist.');\n                    });\n        });\n\n        it('should call the API for every operation when there\\'s no cache', () => {\n            systemSettings.api.get\n                .mockReturnValueOnce(Promise.resolve(settingsFixture.keyLastSuccessfulResourceTablesUpdate))\n                .mockReturnValueOnce(Promise.resolve(settingsFixture.keyLastSuccessfulResourceTablesUpdate));\n\n            return systemSettings.get('keyLastSuccessfulResourceTablesUpdate')\n                .then(() => systemSettings.get('keyLastSuccessfulResourceTablesUpdate'))\n                .then(() => {\n                    expect(systemSettings.api.get).toHaveBeenCalledTimes(2);\n                });\n        });\n\n        it('should only call the API once when there is a cache', () => {\n            systemSettings.api.get\n                .mockReturnValueOnce(Promise.resolve(settingsFixture));\n\n            return systemSettings.all()\n                .then(() => systemSettings.get('keyLastSuccessfulResourceTablesUpdate'))\n                .then(() => systemSettings.get('keyLastSuccessfulResourceTablesUpdate'))\n                .then((value) => {\n                    expect(value).toBe(settingsFixture.keyLastSuccessfulResourceTablesUpdate);\n                    expect(systemSettings.api.get).toHaveBeenCalledTimes(1);\n                });\n        });\n\n        it('should also return a promise when serving cached values', () => {\n            systemSettings.api.get.mockReturnValueOnce(Promise.resolve(settingsFixture));\n\n            return systemSettings.all()\n                .then(() => {\n                    expect(systemSettings.get('keyLastSuccessfulResourceTablesUpdate')).toBeInstanceOf(Promise);\n                });\n        });\n    });\n\n    describe('.set', () => {\n        beforeEach(() => {\n            systemSettings = new SystemSettings(new MockApi());\n\n            mockApi.get.mockReturnValue(Promise.resolve(settingsFixture));\n            mockApi.post.mockReturnValue(Promise.resolve());\n            mockApi.delete.mockReturnValue(Promise.resolve());\n        });\n\n        it('should POST to the API', () => systemSettings.set('mySetting', 'my value')\n            .then(() => {\n                expect(mockApi.get).toHaveBeenCalledTimes(0);\n                expect(mockApi.post).toHaveBeenCalledTimes(1);\n                expect(mockApi.delete).toHaveBeenCalledTimes(0);\n            }));\n\n        it('should DELETE if the value is null or an empty string', () => systemSettings.set('mySetting', '')\n            .then(() => {\n                expect(mockApi.get).toHaveBeenCalledTimes(0);\n                expect(mockApi.post).toHaveBeenCalledTimes(0);\n                expect(mockApi.delete).toHaveBeenCalledTimes(1);\n            }));\n\n        it('should not alter the value', () => {\n            const value = { type: 'object', value: 'some value' };\n\n            return systemSettings.set('mySetting', value)\n                .then(() => {\n                    expect(mockApi.get).toHaveBeenCalledTimes(0);\n                    expect(mockApi.post).toHaveBeenCalledTimes(1);\n                    expect(mockApi.delete).toHaveBeenCalledTimes(0);\n\n                    expect(mockApi.post.mock.calls[0][0]).toBe('systemSettings/mySetting');\n                    expect(mockApi.post.mock.calls[0][1]).toBe(value);\n                });\n        });\n\n        it('should add a \"Content-Type: text/plain\" header to the request', () => {\n            const value = 'test';\n\n            return systemSettings.set('mySetting', value)\n                .then(() => {\n                    expect(mockApi.get).toHaveBeenCalledTimes(0);\n                    expect(mockApi.post).toHaveBeenCalledTimes(1);\n                    expect(mockApi.delete).toHaveBeenCalledTimes(0);\n\n                    const requestOptions = { headers: { 'Content-Type': 'text/plain' } };\n                    expect(mockApi.post).toBeCalledWith('systemSettings/mySetting', value, requestOptions);\n                });\n        });\n\n        it('should clear the settings cache', () => systemSettings.all()\n            .then(() => systemSettings.set('test', 'value'))\n            .then(() => systemSettings.all())\n            .then(() => {\n                expect(mockApi.get).toHaveBeenCalledTimes(2);\n                expect(mockApi.post).toHaveBeenCalledTimes(1);\n            }));\n    });\n\n    describe('.set API request', () => {\n        beforeEach(() => {\n            systemSettings.api.post\n                .mockReturnValueOnce(Promise.resolve());\n        });\n\n        afterEach(() => {\n            systemSettings = new SystemSettings(new MockApi());\n        });\n\n        it('should not encode the value as JSON', () => {\n            const value = 'test';\n\n            return systemSettings.set('mySetting', value)\n                .then(() => {\n                    expect(mockApi.post).toHaveBeenCalledTimes(1);\n                    expect(mockApi.post.mock.calls[0][0]).toBe('systemSettings/mySetting');\n                    expect(mockApi.post.mock.calls[0][1]).toBe(value);\n                });\n        });\n    });\n});\n"],"file":"SystemSettings_spec.js"}