{"version":3,"sources":["../../../src/model/helpers/attibutes.js"],"names":["getValue","getAttributeValueAttributeName","createPropertyDefinitionsForAttributes","attributeProperties","getAttributeValues","setAttributeValues","setDirty","Object","keys","reduce","propertyDefinitions","attributeName","enumerable","get","attributeValues","filter","attributeValue","current","value","undefined","set","av","attribute","name","remainingAttributeValues","concat","id"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,IAAMA,QAAQ,GAAG,iBAAK,OAAL,CAAjB;AACA,IAAMC,8BAA8B,GAAG,iBAAK,gBAAL,CAAvC;;AAEA,SAASC,sCAAT,CAAgDC,mBAAhD,EAAqEC,kBAArE,EAAyFC,kBAAzF,EAA6GC,QAA7G,EAAuH;AACnH,SAAOC,MAAM,CACRC,IADE,CACGL,mBADH,EAEFM,MAFE,CAEK,UAACC,mBAAD,EAAsBC,aAAtB,EAAwC;AAC5CD,IAAAA,mBAAmB,CAACC,aAAD,CAAnB,GAAqC;AAAE;AACnCC,MAAAA,UAAU,EAAE,IADqB;AAEjCC,MAAAA,GAFiC,iBAE3B;AACF,YAAMC,eAAe,GAAGV,kBAAkB,EAA1C;AAEA,eAAOU,eAAe,CACjBC,MADE,CACK,UAAAC,cAAc;AAAA,iBAAIf,8BAA8B,CAACe,cAAD,CAA9B,KAAmDL,aAAvD;AAAA,SADnB,EAEFF,MAFE,CAEK,UAACQ,OAAD,EAAUD,cAAV;AAAA,iBAA6BA,cAAc,CAACE,KAA5C;AAAA,SAFL,EAEwDC,SAFxD,CAAP;AAGH,OARgC;AASjCC,MAAAA,GATiC,eAS7BF,KAT6B,EAStB;AACP,YAAMF,cAAc,GAAGZ,kBAAkB,GACpCW,MADkB,CACX,UAAAM,EAAE;AAAA,iBAAIA,EAAE,CAACC,SAAH,CAAaC,IAAb,KAAsBZ,aAA1B;AAAA,SADS,EAElBF,MAFkB,CAEX,UAACQ,OAAD,EAAUI,EAAV;AAAA,iBAAiBA,EAAjB;AAAA,SAFW,EAEUF,SAFV,CAAvB;;AAIA,YAAI,+BAAmBnB,QAAQ,CAACgB,cAAD,CAA3B,EAA6CE,KAA7C,CAAJ,EAAyD;AACrD,iBADqD,CAC7C;AACX;;AAED,YAAIF,cAAJ,EAAoB;AAChB;AACA;AACA;AACA;AACA,cAAI,yCAA6BE,KAA7B,CAAJ,EAAyC;AACrC,gBAAMM,wBAAwB,GAAGpB,kBAAkB,GAAGW,MAArB,CAA4B,UAAAM,EAAE;AAAA,qBAAIA,EAAE,KAAKL,cAAX;AAAA,aAA9B,CAAjC;AACAX,YAAAA,kBAAkB,CAACmB,wBAAD,CAAlB;AACH;;AAEDR,UAAAA,cAAc,CAACE,KAAf,GAAuBA,KAAvB;AACH,SAXD,MAWO;AACH;AACAb,UAAAA,kBAAkB,CAACD,kBAAkB,GAAGqB,MAArB,CAA4B;AAC3CP,YAAAA,KAAK,EAALA,KAD2C;AAE3CI,YAAAA,SAAS,EAAE;AACPI,cAAAA,EAAE,EAAEvB,mBAAmB,CAACQ,aAAD,CAAnB,CAAmCe,EADhC;AAEPH,cAAAA,IAAI,EAAEpB,mBAAmB,CAACQ,aAAD,CAAnB,CAAmCY;AAFlC;AAFgC,WAA5B,CAAD,CAAlB;AAOH,SA7BM,CA+BP;;;AACAjB,QAAAA,QAAQ;AACX;AA1CgC,KAArC;AA6CA,WAAOI,mBAAP;AACH,GAjDE,EAiDA,EAjDA,CAAP;AAkDH;;eAEcR,sC","sourcesContent":["import { areDefinedAndEqual, isNullUndefinedOrEmptyString } from '../../lib/check';\nimport { pick } from '../../lib/utils';\n\nconst getValue = pick('value');\nconst getAttributeValueAttributeName = pick('attribute.name');\n\nfunction createPropertyDefinitionsForAttributes(attributeProperties, getAttributeValues, setAttributeValues, setDirty) {\n    return Object\n        .keys(attributeProperties)\n        .reduce((propertyDefinitions, attributeName) => {\n            propertyDefinitions[attributeName] = { // eslint-disable-line no-param-reassign\n                enumerable: true,\n                get() {\n                    const attributeValues = getAttributeValues();\n\n                    return attributeValues\n                        .filter(attributeValue => getAttributeValueAttributeName(attributeValue) === attributeName)\n                        .reduce((current, attributeValue) => attributeValue.value, undefined);\n                },\n                set(value) {\n                    const attributeValue = getAttributeValues()\n                        .filter(av => av.attribute.name === attributeName)\n                        .reduce((current, av) => av, undefined);\n\n                    if (areDefinedAndEqual(getValue(attributeValue), value)) {\n                        return; // Don't do anything if the value stayed the same\n                    }\n\n                    if (attributeValue) {\n                        // Remove the attributeValue from the array of attributeValues on the object\n                        // This is done because the server can not handle them properly when empty strings\n                        // as values are sent. It will properly remove the attributeValue\n                        // on the server side when they are not being send to the server at all.\n                        if (isNullUndefinedOrEmptyString(value)) {\n                            const remainingAttributeValues = getAttributeValues().filter(av => av !== attributeValue);\n                            setAttributeValues(remainingAttributeValues);\n                        }\n\n                        attributeValue.value = value;\n                    } else {\n                        // Add the new attribute value to the attributeValues collection\n                        setAttributeValues(getAttributeValues().concat({\n                            value,\n                            attribute: {\n                                id: attributeProperties[attributeName].id,\n                                name: attributeProperties[attributeName].name,\n                            },\n                        }));\n                    }\n\n                    // Set the model to be dirty\n                    setDirty();\n                },\n            };\n\n            return propertyDefinitions;\n        }, {});\n}\n\nexport default createPropertyDefinitionsForAttributes;\n"],"file":"attibutes.js"}