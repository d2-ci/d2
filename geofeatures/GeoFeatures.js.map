{"version":3,"sources":["../../src/geofeatures/GeoFeatures.js"],"names":["GeoFeatures","orgUnits","displayName","orgUnitsArray","concat","every","isValidOrgUnit","Error","isValidDisplayName","params","api","getApi","urlParams","length","ou","join","displayProperty","get","orgUnit","isValidOrgUnitLevel","isValidOrgUnitGroup","isValidUserOrgUnit","level","test","group","match","Array","isArray","USER_ORGUNIT","USER_ORGUNIT_CHILDREN","USER_ORGUNIT_GRANDCHILDREN","DISPLAY_PROPERTY_NAME","DISPLAY_PROPERTY_SHORTNAME","args"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;AAEA;;;;;IAKMA,W;AACF;;;;;;AAMA,2BAAwC;AAAA,YAA5BC,QAA4B,uEAAjB,EAAiB;AAAA,YAAbC,WAAa;;AAAA;;AACpC,aAAKD,QAAL,GAAgBA,QAAhB;AACA,aAAKC,WAAL,GAAmBA,WAAnB;AACH;;AAED;;;;;;;;;;;kCAOUD,Q,EAAU;AAChB,gBAAI,CAACA,QAAL,EAAe;AACX,uBAAO,IAAP;AACH;;AAED,gBAAME,gBAAgB,GAAGC,MAAH,CAAUH,QAAV,CAAtB;;AAEA,gBAAI,CAACE,cAAcE,KAAd,CAAoBL,YAAYM,cAAhC,CAAL,EAAsD;AAClD,sBAAM,IAAIC,KAAJ,iCAAwCN,QAAxC,CAAN;AACH;;AAED,mBAAO,IAAID,WAAJ,CAAgBG,aAAhB,EAA+B,KAAKD,WAApC,CAAP;AACH;;AAED;;;;;;;;;;wCAOgBA,W,EAAa;AACzB,gBAAI,CAACA,WAAL,EAAkB;AACd,uBAAO,IAAP;AACH;;AAED,gBAAI,CAACF,YAAYQ,kBAAZ,CAA+BN,WAA/B,CAAL,EAAkD;AAC9C,sBAAM,IAAIK,KAAJ,gCAAuCL,WAAvC,CAAN;AACH;;AAED,mBAAO,IAAIF,WAAJ,CAAgB,KAAKC,QAArB,EAA+BC,WAA/B,CAAP;AACH;;AAED;;;;;;;;;;iCAOoB;AAAA,gBAAbO,MAAa,uEAAJ,EAAI;;AAChB,gBAAMC,MAAM,cAAIC,MAAJ,EAAZ;AACA,gBAAMC,YAAYH,MAAlB;;AAEA,gBAAI,KAAKR,QAAL,CAAcY,MAAlB,EAA0B;AACtBD,0BAAUE,EAAV,WAAqB,KAAKb,QAAL,CAAcc,IAAd,CAAmB,GAAnB,CAArB;AACH;;AAED,gBAAI,KAAKb,WAAT,EAAsB;AAClBU,0BAAUI,eAAV,GAA4B,KAAKd,WAAjC;AACH;;AAED,mBAAOQ,IAAIO,GAAJ,CAAQ,aAAR,EAAuBL,SAAvB,CAAP;AACH;;AAED;;;;;;;;;;;;uCASsBM,O,EAAS;AAC3B,mBACI,qBAAWA,OAAX,KACAlB,YAAYmB,mBAAZ,CAAgCD,OAAhC,CADA,IAEAlB,YAAYoB,mBAAZ,CAAgCF,OAAhC,CAFA,IAGAlB,YAAYqB,kBAAZ,CAA+BH,OAA/B,CAJJ;AAMH;;AAED;;;;;;;;;;;;4CAS2BI,K,EAAO;AAC9B,mBAAO,kBAAiBC,IAAjB,CAAsBD,KAAtB;AAAP;AACH;;AAED;;;;;;;;;;;;4CAS2BE,K,EAAO;AAC9B,gBAAMC,QAAQD,MAAMC,KAAN,CAAY,gBAAZ,CAAd;AACA,mBAAOC,MAAMC,OAAN,CAAcF,KAAd,KAAwB,qBAAWA,MAAM,CAAN,CAAX,CAA/B;AACH;;AAED;;;;;;;;;;;;2CAS0BP,O,EAAS;AAC/B,mBACIA,YAAYlB,YAAY4B,YAAxB,IACAV,YAAYlB,YAAY6B,qBADxB,IAEAX,YAAYlB,YAAY8B,0BAH5B;AAKH;;AAED;;;;;;;;;;;;2CAS0B5B,W,EAAa;AACnC,mBACIA,gBAAgBF,YAAY+B,qBAA5B,IACA7B,gBAAgBF,YAAYgC,0BAFhC;AAIH;;AAED;;;;;;;;;;;;yCAS+B;AAAA,8CAANC,IAAM;AAANA,oBAAM;AAAA;;AAC3B,sDAAWjC,WAAX,gBAA0BiC,IAA1B;AACH;;;;;;AAnKCjC,W,CAqKK+B,qB,GAAwB,M;AArK7B/B,W,CAsKKgC,0B,GAA6B,W;AAtKlChC,W,CAuKK4B,Y,GAAe,c;AAvKpB5B,W,CAwKK6B,qB,GAAwB,uB;AAxK7B7B,W,CAyKK8B,0B,GAA6B,4B;kBAGzB9B,W","file":"GeoFeatures.js","sourcesContent":["import Api from '../api/Api';\nimport { isValidUid } from '../uid';\n\n/**\n * @class GeoFeatures\n * @description\n * GeoFeatures class used to request organisation unit coordinates from the Web API.\n */\nclass GeoFeatures {\n    /**\n     * @constructor\n     *\n     * @param {Array} orgUnits Organisation units (UID, level, group, user org. unit) to include in the response.\n     * @param {String} displayName The name property to display (NAME|SHORTNAME).\n     */\n    constructor(orgUnits = [], displayName) {\n        this.orgUnits = orgUnits;\n        this.displayName = displayName;\n    }\n\n    /**\n     * @method byOrgUnit\n     *\n     * @param {Array} orgUnits Organisation units (UID, level, group, user org. unit) to include in the response.\n     *\n     * @returns {GeoFeatures}\n     */\n    byOrgUnit(orgUnits) {\n        if (!orgUnits) {\n            return this;\n        }\n\n        const orgUnitsArray = [].concat(orgUnits);\n\n        if (!orgUnitsArray.every(GeoFeatures.isValidOrgUnit)) {\n            throw new Error(`Invalid organisation unit: ${orgUnits}`);\n        }\n\n        return new GeoFeatures(orgUnitsArray, this.displayName);\n    }\n\n    /**\n     * @method byOrgUnit\n     *\n     * @param {String} displayName The name property to display (NAME|SHORTNAME).\n     *\n     * @returns {GeoFeatures}\n     */\n    displayProperty(displayName) {\n        if (!displayName) {\n            return this;\n        }\n\n        if (!GeoFeatures.isValidDisplayName(displayName)) {\n            throw new Error(`Invalid display property: ${displayName}`);\n        }\n\n        return new GeoFeatures(this.orgUnits, displayName);\n    }\n\n    /**\n     * @method getAll\n     *\n     * @param {Object} params Extra URL params to pass to the Web API endpoint.\n     *\n     * @returns {Promise} with an array of geofeatures.\n     */\n    getAll(params = {}) {\n        const api = Api.getApi();\n        const urlParams = params;\n\n        if (this.orgUnits.length) {\n            urlParams.ou = `ou:${this.orgUnits.join(';')}`;\n        }\n\n        if (this.displayName) {\n            urlParams.displayProperty = this.displayName;\n        }\n\n        return api.get('geoFeatures', urlParams);\n    }\n\n    /**\n     * @method isValidOrgUnit\n     * @static\n     *\n     * @returns {boolean} True if the org. unit is valid\n     *\n     * @description\n     * Checks if the org. unit is valid (UID, level, group, user org. unit)\n     */\n    static isValidOrgUnit(orgUnit) {\n        return (\n            isValidUid(orgUnit) ||\n            GeoFeatures.isValidOrgUnitLevel(orgUnit) ||\n            GeoFeatures.isValidOrgUnitGroup(orgUnit) ||\n            GeoFeatures.isValidUserOrgUnit(orgUnit)\n        );\n    }\n\n    /**\n     * @method isValidOrgUnitLevel\n     * @static\n     *\n     * @returns {boolean} True if the org. unit level is valid\n     *\n     * @description\n     * Checks if the org. unit level is valid.\n     */\n    static isValidOrgUnitLevel(level) {\n        return /^LEVEL-[0-9]+$/.test(level);\n    }\n\n    /**\n     * @method isValidOrgUnitGroup\n     * @static\n     *\n     * @returns {boolean} True if the org. unit group is valid\n     *\n     * @description\n     * Checks if the org. unit group is valid.\n     */\n    static isValidOrgUnitGroup(group) {\n        const match = group.match(/OU_GROUP-(.*)$/);\n        return Array.isArray(match) && isValidUid(match[1]);\n    }\n\n    /**\n     * @method isValidUserOrgUnit\n     * @static\n     *\n     * @returns {boolean} True if the user org. unit is valid\n     *\n     * @description\n     * Checks if the user org. unit is valid.\n     */\n    static isValidUserOrgUnit(orgUnit) {\n        return (\n            orgUnit === GeoFeatures.USER_ORGUNIT ||\n            orgUnit === GeoFeatures.USER_ORGUNIT_CHILDREN ||\n            orgUnit === GeoFeatures.USER_ORGUNIT_GRANDCHILDREN\n        );\n    }\n\n    /**\n     * @method isValidDisplayName\n     * @static\n     *\n     * @returns {boolean} True if display name is valid\n     *\n     * @description\n     * Checks if the display name is valid.\n     */\n    static isValidDisplayName(displayName) {\n        return (\n            displayName === GeoFeatures.DISPLAY_PROPERTY_NAME ||\n            displayName === GeoFeatures.DISPLAY_PROPERTY_SHORTNAME\n        );\n    }\n\n    /**\n     * @method getGeoFeatures\n     * @static\n     *\n     * @returns {GeoFeatures} Object with interaction properties\n     *\n     * @description\n     * Get a new instance of the GeoFeatures object.\n     */\n    static getGeoFeatures(...args) {\n        return new GeoFeatures(...args);\n    }\n\n    static DISPLAY_PROPERTY_NAME = 'NAME';\n    static DISPLAY_PROPERTY_SHORTNAME = 'SHORTNAME';\n    static USER_ORGUNIT = 'USER_ORGUNIT';\n    static USER_ORGUNIT_CHILDREN = 'USER_ORGUNIT_CHILDREN';\n    static USER_ORGUNIT_GRANDCHILDREN = 'USER_ORGUNIT_GRANDCHILDREN';\n}\n\nexport default GeoFeatures;\n"]}