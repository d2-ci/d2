{"version":3,"sources":["../../../src/i18n/__tests__/I18n.spec.js"],"names":["jest","mock","describe","mockApi","i18n","mockTranslations","general_settings","yes","no","system_settings_in_french","string_with_variable","mockUnicode","mockEscape","mockPropsFile","beforeEach","MockApi","getApi","I18n","afterEach","mockReset","it","expect","toThrowErrorMatchingSnapshot","api","toBe","addSource","toBeInstanceOf","Function","addStrings","load","sources","fn","assertions","getTranslation","err","message","toMatchSnapshot","getI18n","strings","Array","from","toContain","length","spyOn","add","toHaveBeenCalledTimes","apiGet","apiPost","apiReq","get","mockReturnValueOnce","Promise","resolve","post","request","then","toEqual","reject","setTimeout","string_that_has_no_translation","translations","toBeUndefined","mockReturnValue","Object","keys","forEach","key","not","sub1","variable","sub2","isTranslated","getUntranslatedStrings","undefined","str"],"mappings":"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","sourcesContent":["import MockApi from '../../api/Api';\nimport I18n from '../../i18n/I18n';\n\njest.mock('../../api/Api');\n\ndescribe('Internationalisation (I18n)', () => {\n    let mockApi;\n    let i18n;\n\n    const mockTranslations = {\n        general_settings: 'General settings',\n        yes: 'Yup',\n        no: 'Nope',\n        system_settings_in_french: 'Paramètres du système',\n        // 'escapes': 'Characters may be escaped! Even\\nnewlines?!?',\n        string_with_variable: 'Some times $$variable$$ are useful',\n    };\n\n    const mockUnicode = 'Param\\\\u00e8tres du syst\\\\u00e8me';\n    const mockEscape = 'Characters\\\\ may \\\\b\\\\e \\\\e\\\\s\\\\c\\\\a\\\\p\\\\e\\\\d\\\\!\\\\\\\\ Even\\\\\\nnewline\\\\s\\\\?\\\\!\\\\?';\n    const mockPropsFile = `${'general_settings=General settings\\n' +\n        'yes=Yup\\n' +\n        'no=Nope\\n\\n# Blank lines and commends - ignored?\\n#\\n\\n' +\n        'system_settings_in_french='}${mockUnicode}\\n` +\n        `escapes=${mockEscape}\\n`;\n\n    beforeEach(() => {\n        mockApi = MockApi.getApi();\n        i18n = new I18n();\n    });\n\n    afterEach(() => {\n        MockApi.mockReset();\n    });\n\n    it('should not be allowed to be called without new', () => {\n        expect(() => I18n()).toThrowErrorMatchingSnapshot();\n    });\n\n    it('should set an instance of Api onto the SystemConfiguration instance', () => {\n        expect(i18n.api).toBe(mockApi);\n    });\n\n    it('addSource() should be a function', () => {\n        expect(i18n.addSource).toBeInstanceOf(Function);\n    });\n\n    it('addStrings() should be a function', () => {\n        expect(i18n.addStrings).toBeInstanceOf(Function);\n    });\n\n    it('load() should be a function', () => {\n        expect(i18n.load).toBeInstanceOf(Function);\n    });\n\n    it('should set the passed sources onto the object', () => {\n        const sources = ['translation_18n'];\n\n        i18n = new I18n(sources);\n\n        expect(i18n.sources).toBe(sources);\n    });\n\n    it('should use the passed Api object', () => {\n        mockApi = jest.fn();\n\n        i18n = new I18n([], mockApi);\n\n        expect(i18n.api).toBe(mockApi);\n    });\n\n    it('getTranslations() should throw an error is translations haven\\'t been loaded yet', () => {\n        expect.assertions(1);\n\n        try {\n            i18n.getTranslation('some_string');\n        } catch (err) {\n            expect(err.message).toMatchSnapshot();\n        }\n    });\n\n    describe('getI18n', () => {\n        it('should be a function on the I18n class', () => {\n            expect(typeof I18n.getI18n).toBe('function');\n        });\n\n        it('should return a new instanceof I18n', () => {\n            expect(I18n.getI18n()).toBeInstanceOf(I18n);\n        });\n    });\n\n    describe('addStrings()', () => {\n        it('accepts a single string', () => {\n            i18n.addStrings('yes');\n            const strings = Array.from(i18n.strings);\n            expect(strings).toContain('yes');\n            expect(strings.length).toBe(1);\n        });\n\n        it('accepts an array of strings', () => {\n            i18n.addStrings(['yes', 'no', 'maybe']);\n            const strings = Array.from(i18n.strings);\n            expect(strings).toContain('yes');\n            expect(strings).toContain('no');\n            expect(strings).toContain('maybe');\n            expect(strings.length).toBe(3);\n        });\n\n        it('handles consequtive calls', () => {\n            i18n.addStrings(['yes', 'no']);\n            i18n.addStrings('maybe');\n            i18n.addStrings('probably');\n            const strings = Array.from(i18n.strings);\n            expect(strings).toContain('yes');\n            expect(strings).toContain('no');\n            expect(strings).toContain('maybe');\n            expect(strings).toContain('probably');\n            expect(strings.length).toBe(4);\n        });\n\n        it('doesn\\'t add duplicates', () => {\n            i18n.addStrings(['yes', 'no']);\n            i18n.addStrings(['no', 'maybe']);\n            i18n.addStrings(['maybe', 'probably', 'yes']);\n            const strings = Array.from(i18n.strings);\n            expect(strings).toContain('yes');\n            expect(strings).toContain('no');\n            expect(strings).toContain('maybe');\n            expect(strings).toContain('probably');\n            expect(strings.length).toBe(4);\n        });\n\n        it('should not add empty strings', () => {\n            jest.spyOn(i18n.strings, 'add');\n\n            i18n.addStrings(['yes', '', '  ']);\n\n            expect(i18n.strings.add).toHaveBeenCalledTimes(1);\n        });\n    });\n\n    describe('load()', () => {\n        let apiGet;\n        let apiPost;\n        let apiReq;\n\n        beforeEach(() => {\n            apiGet = mockApi.get.mockReturnValueOnce(Promise.resolve(mockTranslations));\n\n            apiPost = mockApi.post.mockReturnValueOnce(Promise.resolve(mockTranslations));\n\n            apiReq = mockApi.request.mockReturnValueOnce(Promise.resolve(mockPropsFile));\n\n            i18n.addStrings(['yes', 'no']);\n        });\n\n        it('should return a promise', () => {\n            expect(i18n.load()).toBeInstanceOf(Promise);\n        });\n\n        it('should POST to get untranslated strings', () => {\n            expect.assertions(4);\n\n            return i18n.load().then(() => {\n                expect(apiGet).toHaveBeenCalledTimes(0);\n                expect(apiPost).toHaveBeenCalledTimes(1);\n                expect(apiReq).toHaveBeenCalledTimes(0);\n                expect(i18n.getTranslation('yes')).toEqual(mockTranslations.yes);\n            });\n        });\n\n        it('should load props files first', () => {\n            i18n.addSource('props_file_name');\n\n            expect.assertions(3);\n\n            return i18n.load().then(() => {\n                expect(apiGet).toHaveBeenCalledTimes(0);\n                expect(apiPost).toHaveBeenCalledTimes(0);\n                expect(apiReq).toHaveBeenCalledTimes(1);\n            });\n        });\n\n        it('keeps going if one props file fails', () => {\n            i18n.addSource('props_file_one');\n            i18n.addSource('props_file_two');\n            i18n.addSource('props_file_three');\n\n            apiReq.mockReset();\n            apiReq\n                .mockReturnValueOnce(Promise.resolve(mockPropsFile))\n                .mockReturnValueOnce(Promise.reject('404 Fail or something'))\n                .mockReturnValueOnce(Promise.resolve(''));\n\n            expect.assertions(3);\n\n            return i18n.load().then(() => {\n                expect(apiGet).toHaveBeenCalledTimes(0);\n                expect(apiPost).toHaveBeenCalledTimes(0);\n                expect(apiReq).toHaveBeenCalledTimes(3);\n            });\n        });\n\n        it('chooses strings based on source order', () => {\n            i18n.addSource('slow_props_file');\n            i18n.addSource('fast_props_file');\n\n            apiReq.mockReset();\n            apiReq\n                .mockReturnValueOnce(new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve('result=first priority file\\n');\n                    });\n                }))\n                .mockReturnValueOnce(Promise.resolve('result=first file to load\\n'));\n\n            expect.assertions(1);\n\n            return i18n.load().then(() => {\n                expect(i18n.getTranslation('result')).toEqual('first priority file');\n            });\n        });\n\n        it('should not add the strings if no responses were returned', () => {\n            i18n.addStrings(['string_that_has_no_translation']);\n            mockApi.post.mockReturnValueOnce(Promise.resolve({\n                string_that_has_no_translation: 'string_that_has_no_translation',\n            }));\n\n            return i18n.load()\n                .then(() => expect(i18n.translations.string_that_has_no_translation).toBeUndefined());\n        });\n    });\n\n    describe('async API', () => {\n        beforeEach(() => {\n            i18n.api.get\n                .mockReturnValue(Promise.resolve(mockTranslations));\n\n            i18n.api.request\n                .mockReturnValue(Promise.resolve(mockPropsFile));\n\n            i18n.api.post\n                .mockReturnValue(Promise.resolve(mockTranslations));\n\n            i18n.addSource('mockPropsFile');\n            i18n.addStrings(Object.keys(mockTranslations));\n        });\n\n        describe('getTranslation()', () => {\n            it('returns the correct translations', () => {\n                expect.assertions(5);\n\n                return i18n.load().then(() => {\n                    Object.keys(mockTranslations).forEach((key) => {\n                        expect(i18n.getTranslation(key)).toEqual(mockTranslations[key]);\n                    });\n                });\n            });\n\n            it('decodes unicode entities from properties files', () => i18n.load().then(() => {\n                expect(mockApi.get).toHaveBeenCalledTimes(0);\n                expect(mockApi.post).toHaveBeenCalledTimes(1);\n                expect(mockApi.request).toHaveBeenCalledTimes(1);\n                expect(i18n.getTranslation('system_settings_in_french'))\n                    .toEqual(mockTranslations.system_settings_in_french);\n                expect(i18n.getTranslation('system_settings_in_french')).not.toEqual(mockUnicode);\n            }));\n\n            it('returns ** string ** for unknown strings', () => {\n                expect.assertions(1);\n\n                return i18n.load().then(() => {\n                    expect(i18n.getTranslation('string')).toEqual('** string **');\n                });\n            });\n\n            it('replaces $$variable$$ in translations', () => {\n                expect.assertions(2);\n\n                return i18n.load().then(() => {\n                    const sub1 = i18n.getTranslation('string_with_variable', { variable: 'tests' });\n                    const sub2 = i18n.getTranslation('string_with_variable', { variable: 'FUNNY TRANSLATIONS' });\n\n                    expect(sub1).toBe('Some times tests are useful');\n                    expect(sub2).toBe('Some times FUNNY TRANSLATIONS are useful');\n                });\n            });\n        });\n\n        describe('isTranslated()', () => {\n            it('returns true for translated strings', () => {\n                expect.assertions(5);\n\n                return i18n.load().then(() => {\n                    Object.keys(mockTranslations).forEach((key) => {\n                        expect(i18n.isTranslated(key)).toEqual(true);\n                    });\n                });\n            });\n\n            it('returns false for untranslated strings', () => {\n                expect.assertions(1);\n\n                return i18n.load().then(() => {\n                    expect(i18n.isTranslated('string')).toEqual(false);\n                });\n            });\n\n            it('totally tilts out if translations haven\\'t been loaded yet', () => {\n                expect(() => i18n.isTranslated('some random string')).toThrowErrorMatchingSnapshot();\n            });\n        });\n\n        describe('getUntranslatedStrings()', () => {\n            it('returns undefined if translations haven\\'t been loaded yet', () => {\n                expect(i18n.getUntranslatedStrings()).toEqual(undefined);\n            });\n\n            it('returns an array', () => {\n                expect.assertions(1);\n\n                return i18n.load().then(() => {\n                    expect(i18n.getUntranslatedStrings()).toBeInstanceOf(Array);\n                });\n            });\n\n            it('doesn\\'t return translated strings', () => {\n                i18n.addStrings('string');\n\n                return i18n.load().then(() => {\n                    const str = i18n.getUntranslatedStrings();\n                    expect(str).toContain('string');\n                    expect(str).not.toContain('yes');\n                    expect(str).not.toContain('some_random_string');\n                });\n            });\n        });\n    });\n});\n"],"file":"I18n.spec.js"}