{"version":3,"sources":["../../../src/period/generators/quarterly.js"],"names":["generateQuarterlyPeriodsForYear","year","locale","periods","date","Date","quarter","monthNames","getFullYear","period","endDate","setDate","startDate","name","getMonth","id","push","reverse"],"mappings":";;;;;;;AAAA;;AAOA;;;;;;;;;;;;;;;;;;;;;AAqBO,SAASA,+BAAT,GAGL;AAAA,MAFEC,IAEF,uEAFS,8BAET;AAAA,MADEC,MACF,uEADW,OACX;AACE,yCAAyBD,IAAzB;AAEA,MAAME,OAAO,GAAG,EAAhB;AACA,MAAMC,IAAI,GAAG,IAAIC,IAAJ,kBAAmBJ,IAAnB,EAAb;AACA,MAAIK,OAAO,GAAG,CAAd;AACA,MAAMC,UAAU,GAAG,qCAAuBL,MAAvB,CAAnB;;AAEA,SAAOE,IAAI,CAACI,WAAL,OAAuBP,IAA9B,EAAoC;AAChC,QAAMQ,MAAM,GAAG,EAAf;AACAA,IAAAA,MAAM,CAACC,OAAP,GAAiB,8BAAgBN,IAAhB,CAAjB;AACAA,IAAAA,IAAI,CAACO,OAAL,CAAa,CAAb;AACAP,IAAAA,IAAI,CAACO,OAAL,CAAa,CAAb;AACAP,IAAAA,IAAI,CAACO,OAAL,CAAa,CAAb;AACAF,IAAAA,MAAM,CAACG,SAAP,GAAmB,8BAAgBR,IAAhB,CAAnB;AACAK,IAAAA,MAAM,CAACI,IAAP,aAAiBN,UAAU,CAACH,IAAI,CAACU,QAAL,EAAD,CAA3B,gBACIP,UAAU,CAACH,IAAI,CAACU,QAAL,KAAkB,CAAnB,CADd,cAEIV,IAAI,CAACI,WAAL,EAFJ;AAGAC,IAAAA,MAAM,CAACM,EAAP,aAAed,IAAf,cAAuBK,OAAvB;AACAH,IAAAA,OAAO,CAACa,IAAR,CAAaP,MAAb;AACAL,IAAAA,IAAI,CAACO,OAAL,CAAa,CAAb;AACAL,IAAAA,OAAO,IAAI,CAAX;AACH,GAtBH,CAwBE;;;AACA,SAAOH,OAAO,CAACc,OAAR,EAAP;AACH","sourcesContent":["import {\n    validateIfValueIsInteger,\n    formatAsISODate,\n    getCurrentYear,\n    getMonthNamesForLocale,\n} from '../helpers'\n\n/**\n * Generate Quarterly periods for a year.\n *\n * This will generate four quarters for a given year. The generated quarterly periods looks as follows.\n *\n * {\n *   startDate: '2017-10-01',\n *   endDate: '2017-12-31',\n *   name: 'October - December 2017',\n *   id: '2017Q4',\n * }\n *\n * The id is an unofficial ISO 8601 style notation for quarters. The old period generator used to have\n * and `iso` field but as some of the notations are not official ISO 8601 notations this property has been removed.\n * In most cases the `id` property contained the same value so this can be used instead.\n *\n * @private\n *\n * @param {Integer} [year=new Date().getFullYear()] The year to generate the daily periods for.\n * @param {String} [locale='en-gb'] The locale to use when getting month names.\n */\nexport function generateQuarterlyPeriodsForYear(\n    year = getCurrentYear(),\n    locale = 'en-gb'\n) {\n    validateIfValueIsInteger(year)\n\n    const periods = []\n    const date = new Date(`31 Dec ${year}`)\n    let quarter = 4\n    const monthNames = getMonthNamesForLocale(locale)\n\n    while (date.getFullYear() === year) {\n        const period = {}\n        period.endDate = formatAsISODate(date)\n        date.setDate(0)\n        date.setDate(0)\n        date.setDate(1)\n        period.startDate = formatAsISODate(date)\n        period.name = `${monthNames[date.getMonth()]} - ${\n            monthNames[date.getMonth() + 2]\n        } ${date.getFullYear()}`\n        period.id = `${year}Q${quarter}`\n        periods.push(period)\n        date.setDate(0)\n        quarter -= 1\n    }\n\n    // Quarters are collected backwards. So we reverse to get the chronological order.\n    return periods.reverse()\n}\n"],"file":"quarterly.js"}