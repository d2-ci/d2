{"version":3,"sources":["../../../../src/datastore/__tests__/e2e/UserDataStore.e2e.js"],"names":["describe","credentials","btoa","d2","namespace","store","beforeAll","baseUrl","schemas","headers","authorization","currentUser","dataStore","create","expect","toThrow","delete","has","afterAll","it","value","key","set","get","retVal","Array","isArray","keys","toBe","toEqual","ns","toBeInstanceOf","UserDataStoreNamespace","toHaveLength","newNamespace","stringVal","getAll","namespaces","serverVal","toContain","rejects","toBeDefined"],"mappings":"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","sourcesContent":["import 'isomorphic-fetch';\nimport { init } from '../../../d2';\nimport UserDataStoreNamespace from '../../UserDataStoreNamespace';\n\ndescribe('UserDataStore', () => {\n    const credentials = `Basic ${btoa('admin:district')}`;\n    let d2;\n    let namespace;\n    let store;\n\n    beforeAll(async () => {\n        d2 = await init({ baseUrl: 'https://play.dhis2.org/demo/api', schemas: [], headers: { authorization: credentials } });\n        store = d2.currentUser.dataStore;\n\n        try {\n            namespace = await store.create('namespace');\n        } catch (e) { // delete if exists\n            expect(e).toThrow(/already exist/);\n            await store.delete('namespace');\n        }\n\n        if (await store.has('new namespace')) {\n            await store.delete('new namespace');\n        }\n    });\n\n    afterAll(async () => {\n        await store.delete('namespace');\n    });\n\n    describe('get()', () => {\n        it('should fetch asynchronously', async () => {\n            const value = { value: '123' };\n            const key = 'key';\n            await namespace.set(key, value);\n            const retVal = await namespace.get(key);\n\n            expect(Array.isArray(namespace.keys)).toBe(true);\n            expect(namespace.keys).toEqual([key]);\n            expect(retVal).toEqual(value);\n        });\n\n        it('should work when autoLoad = false', async () => {\n            const ns = await store.get('another namespace', false);\n\n            expect(ns).toBeInstanceOf(UserDataStoreNamespace);\n            expect(ns.keys).toHaveLength(0);\n        });\n    });\n\n    describe('getAll()', () => {\n        it('should get asynchronously', async () => {\n            const newNamespace = await store.create('new namespace');\n            const stringVal = 'a random string';\n            await newNamespace.set('key', stringVal);\n\n            const namespaces = await store.getAll();\n            const serverVal = await newNamespace.get('key');\n\n            expect(namespaces).toContain(newNamespace.namespace);\n            expect(serverVal).toEqual(stringVal);\n\n            await store.delete('new namespace');\n        });\n    });\n\n    describe('delete()', () => {\n        it('should delete asynchronously', async () => {\n            const newNamespace = await store.create('new namespace');\n            const stringVal = 'a random string';\n            await newNamespace.set('key', stringVal);\n\n            await store.delete('new namespace');\n            // should throw as it does not exist\n            await expect(store.get('new namespace')).rejects.toBeDefined();\n        });\n    });\n});\n"],"file":"UserDataStore.e2e.js"}