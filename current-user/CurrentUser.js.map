{"version":3,"sources":["../../src/current-user/CurrentUser.js"],"names":["models","Symbol","propertiesToIgnore","Set","authTypes","READ","CREATE","CREATE_PUBLIC","CREATE_PRIVATE","DELETE","UPDATE","EXTERNALIZE","propertySymbols","Array","from","reduce","result","property","getPropertiesForCurrentUserObject","currentUserObject","properties","userCredentials","Object","assign","keys","has","map","value","id","isInNoCreateAllowedForList","modelDefinition","Boolean","noCreateAllowedFor","name","CurrentUser","userData","userAuthorities","modelDefinitions","settings","authorities","userSettings","dataStore","UserDataStore","getUserDataStore","userGroupIds","userGroups","userGroup","list","filter","join","paging","userRoleIds","userRoles","userRole","listOptions","organisationUnitsIds","organisationUnits","organisationUnit","fields","dataViewOrganisationUnits","authorityType","isArray","authority","some","authToHave","type","schemaAuthority","authorityToCheckFor","authType","checkAuthorityForType","checkCreateAuthorityForType","UserAuthorities","create","UserSettings"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,IAAMA,MAAM,GAAGC,MAAM,CAAC,QAAD,CAArB;AACA,IAAMC,kBAAkB,GAAG,IAAIC,GAAJ,CAAQ,CAC/B,iBAD+B,EAE/B,YAF+B,EAG/B,WAH+B,EAI/B,mBAJ+B,EAK/B,2BAL+B,CAAR,CAA3B;AAQA;;;;;;;;;;AASA,IAAMC,SAAS,GAAG;AACdC,EAAAA,IAAI,EAAE,CAAC,MAAD,CADQ;AAEdC,EAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,eAAX,EAA4B,gBAA5B,CAFM;AAGdC,EAAAA,aAAa,EAAE,CAAC,eAAD,CAHD;AAIdC,EAAAA,cAAc,EAAE,CAAC,gBAAD,CAJF;AAKdC,EAAAA,MAAM,EAAE,CAAC,QAAD,CALM;AAMdC,EAAAA,MAAM,EAAE,CAAC,QAAD,CANM;AAOdC,EAAAA,WAAW,EAAE,CAAC,aAAD;AAGjB;;;;;;;;;AAVkB,CAAlB;AAkBA,IAAMC,eAAe,GAAGC,KAAK,CAACC,IAAN,CAAWZ,kBAAX,EAA+Ba,MAA/B,CACpB,UAACC,MAAD,EAASC,QAAT,EAAsB;AAClBD,EAAAA,MAAM,CAACC,QAAD,CAAN,GAAmBhB,MAAM,CAACgB,QAAD,CAAzB;AACA,SAAOD,MAAP;AACH,CAJmB,EAKpB,EALoB,CAAxB;AAQA;;;;;;;;;;;;AAWA,SAASE,iCAAT,CAA2CC,iBAA3C,EAA8D;AAC1D,MAAIC,UAAJ,CAD0D,CAE1D;AACA;;AACA,MAAID,iBAAiB,CAACE,eAAtB,EAAuC;AACnCD,IAAAA,UAAU,GAAGE,MAAM,CAACC,MAAP,CACT,EADS,EAETJ,iBAAiB,CAACE,eAFT,EAGTF,iBAHS,CAAb;AAKH,GAND,MAMO;AACHC,IAAAA,UAAU,GAAGE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,iBAAlB,CAAb;AACH;;AAED,SAAOG,MAAM,CAACE,IAAP,CAAYJ,UAAZ,EAAwBL,MAAxB,CAA+B,UAACC,MAAD,EAASC,QAAT,EAAsB;AACxD,QAAIf,kBAAkB,CAACuB,GAAnB,CAAuBR,QAAvB,CAAJ,EAAsC;AAClC,UAAIG,UAAU,CAACH,QAAD,CAAV,CAAqBS,GAAzB,EAA8B;AAC1BV,QAAAA,MAAM,CAACJ,eAAe,CAACK,QAAD,CAAhB,CAAN,GAAoCG,UAAU,CAACH,QAAD,CAAV,CAAqBS,GAArB,CAChC,UAAAC,KAAK;AAAA,iBAAIA,KAAK,CAACC,EAAV;AAAA,SAD2B,CAApC;AAGH;AACJ,KAND,MAMO;AACHZ,MAAAA,MAAM,CAACC,QAAD,CAAN,GAAmBG,UAAU,CAACH,QAAD,CAA7B;AACH;;AACD,WAAOD,MAAP;AACH,GAXM,EAWJ,EAXI,CAAP;AAYH;AAED;;;;;;;;;AAOA,SAASa,0BAAT,CAAoCC,eAApC,EAAqD;AACjD,SAAOC,OAAO,CACVD,eAAe,IAAIE,kCAAmBP,GAAnB,CAAuBK,eAAe,CAACG,IAAvC,CADT,CAAd;AAGH;AAED;;;;;;;IAKMC,W;;;AACF;;;;;;;;AAQA,uBAAYC,QAAZ,EAAsBC,eAAtB,EAAuCC,gBAAvC,EAAyDC,QAAzD,EAAmE;AAAA;;AAC/DhB,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBL,iCAAiC,CAACiB,QAAD,CAArD;AAEA;;;;;AAIA,SAAKI,WAAL,GAAmBH,eAAnB;AAEA,SAAKpC,MAAL,IAAeqC,gBAAf;AAEA;;;;;;;;;;;;;AAYA,SAAKG,YAAL,GAAoBF,QAApB;AAEA;;;;;;AAKA,SAAKG,SAAL,GAAiBC,uBAAcC,gBAAd,EAAjB;AACH;AAED;;;;;;;;;;;;;;oCAUgB;AACZ,UAAMC,YAAY,GAAG,KAAKhC,eAAe,CAACiC,UAArB,CAArB;AAEA,aAAO,KAAK7C,MAAL,EAAa8C,SAAb,CAAuBC,IAAvB,CAA4B;AAC/BC,QAAAA,MAAM,EAAE,kBAAWJ,YAAY,CAACK,IAAb,CAAkB,GAAlB,CAAX,OADuB;AAE/BC,QAAAA,MAAM,EAAE;AAFuB,OAA5B,CAAP;AAIH;AAED;;;;;;;;;;;;;mCAUe;AACX,UAAMC,WAAW,GAAG,KAAKvC,eAAe,CAACwC,SAArB,CAApB;AAEA,aAAO,KAAKpD,MAAL,EAAaqD,QAAb,CAAsBN,IAAtB,CAA2B;AAC9BC,QAAAA,MAAM,EAAE,kBAAWG,WAAW,CAACF,IAAZ,CAAiB,GAAjB,CAAX,OADsB;AAE9BC,QAAAA,MAAM,EAAE;AAFsB,OAA3B,CAAP;AAIH;AAED;;;;;;;;;;;;2CASuC;AAAA,UAAlBI,WAAkB,uEAAJ,EAAI;AACnC,UAAMC,oBAAoB,GAAG,KAAK3C,eAAe,CAAC4C,iBAArB,CAA7B;AAEA,aAAO,KAAKxD,MAAL,EAAayD,gBAAb,CAA8BV,IAA9B,CACHzB,MAAM,CAACC,MAAP,CACI;AACImC,QAAAA,MAAM,EACF,0EAFR;AAGIR,QAAAA,MAAM,EAAE;AAHZ,OADJ,EAMII,WANJ,EAOI;AAAEN,QAAAA,MAAM,EAAE,kBAAWO,oBAAoB,CAACN,IAArB,CAA0B,GAA1B,CAAX;AAAV,OAPJ,CADG,CAAP;AAWH;AAED;;;;;;;;;;;;iDAS6BK,W,EAAa;AACtC,UAAMC,oBAAoB,GAAG,KACzB3C,eAAe,CAAC+C,yBADS,CAA7B;AAIA,aAAO,KAAK3D,MAAL,EAAayD,gBAAb,CAA8BV,IAA9B,CACHzB,MAAM,CAACC,MAAP,CACI;AACImC,QAAAA,MAAM,EACF,0EAFR;AAGIR,QAAAA,MAAM,EAAE;AAHZ,OADJ,EAMII,WANJ,EAOI;AAAEN,QAAAA,MAAM,EAAE,kBAAWO,oBAAoB,CAACN,IAArB,CAA0B,GAA1B,CAAX;AAAV,OAPJ,CADG,CAAP;AAWH;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CAqCsBW,a,EAAe9B,e,EAAiB;AAAA;;AAClD,UAAI,CAACA,eAAD,IAAoB,CAACjB,KAAK,CAACgD,OAAN,CAAc/B,eAAe,CAACS,WAA9B,CAAzB,EAAqE;AACjE,eAAO,KAAP;AACH;;AAED,aACIT,eAAe,CAACS,WAAhB,CACI;AADJ,OAEKS,MAFL,CAEY,UAAAc,SAAS;AAAA,eACbF,aAAa,CAACG,IAAd,CACI,UAAAC,UAAU;AAAA,iBAAIA,UAAU,KAAKF,SAAS,CAACG,IAA7B;AAAA,SADd,CADa;AAAA,OAFrB,EAOI;AAPJ,OAQKF,IARL,CASQ,UAAAG,eAAe;AAAA,eACXA,eAAe,CAAC3B,WAAhB,CAA4BwB,IAA5B,CAAiC,UAAAI,mBAAmB;AAAA,iBAChD,KAAI,CAAC5B,WAAL,CAAiBd,GAAjB,CAAqB0C,mBAArB,CADgD;AAAA,SAApD,CADW;AAAA,OATvB,CAYc;AAZd,OADJ;AAgBH;AAED;;;;;;;;;;;;gDAS4BC,Q,EAAUtC,e,EAAiB;AACnD;AACA;AACA,UAAID,0BAA0B,CAACC,eAAD,CAA9B,EAAiD;AAC7C,eAAO,KAAP;AACH,OALkD,CAOnD;;;AACA,aAAO,KAAKuC,qBAAL,CAA2BD,QAA3B,EAAqCtC,eAArC,CAAP;AACH;AAED;;;;;;;;;;;8BAQUA,e,EAAiB;AACvB,aAAO,KAAKwC,2BAAL,CACHlE,SAAS,CAACE,MADP,EAEHwB,eAFG,CAAP;AAIH;AAED;;;;;;;;;oCAMgBA,e,EAAiB;AAC7B,aAAO,KAAKwC,2BAAL,CACHlE,SAAS,CAACG,aADP,EAEHuB,eAFG,CAAP;AAIH;AAED;;;;;;;;;qCAMiBA,e,EAAiB;AAC9B,aAAO,KAAKwC,2BAAL,CACHlE,SAAS,CAACI,cADP,EAEHsB,eAFG,CAAP;AAIH;AAED;;;;;;;;;;;;;8BAUUA,e,EAAiB;AACvB,aAAO,KAAKuC,qBAAL,CAA2BjE,SAAS,CAACK,MAArC,EAA6CqB,eAA7C,CAAP;AACH;AAED;;;;;;;;;;;;;8BAUUA,e,EAAiB;AACvB,UAAI,KAAKuC,qBAAL,CAA2BjE,SAAS,CAACM,MAArC,EAA6CoB,eAA7C,CAAJ,EAAmE;AAC/D,eAAO,IAAP;AACH;;AACD,aAAO,KAAKuC,qBAAL,CAA2BjE,SAAS,CAACE,MAArC,EAA6CwB,eAA7C,CAAP;AACH;AAED;;;;;;;;;;;;2BAScK,Q,EAAUI,W,EAAaF,gB,EAAkBG,Y,EAAc;AACjE,aAAO,IAAIN,WAAJ,CACHC,QADG,EAEHoC,yBAAgBC,MAAhB,CAAuBjC,WAAvB,CAFG,EAGHF,gBAHG,EAIH,IAAIoC,qBAAJ,CAAiBjC,YAAjB,CAJG,CAAP;AAMH;;;;;;eAGUN,W","sourcesContent":["/**\n * @module current-user\n */\nimport UserAuthorities from './UserAuthorities'\nimport UserSettings from './UserSettings'\nimport { noCreateAllowedFor } from '../defaultConfig'\nimport UserDataStore from '../datastore/UserDataStore'\n\nconst models = Symbol('models')\nconst propertiesToIgnore = new Set([\n    'userCredentials',\n    'userGroups',\n    'userRoles',\n    'organisationUnits',\n    'dataViewOrganisationUnits',\n])\n\n/**\n * Authorities lookup map to be used for determining the list of authorities to check.\n *\n * @private\n * @type {Object.<string, string[]>}\n * @readonly\n * @typedef {Object} AuthorityType\n * @memberof module:current-user\n */\nconst authTypes = {\n    READ: ['READ'],\n    CREATE: ['CREATE', 'CREATE_PUBLIC', 'CREATE_PRIVATE'],\n    CREATE_PUBLIC: ['CREATE_PUBLIC'],\n    CREATE_PRIVATE: ['CREATE_PRIVATE'],\n    DELETE: ['DELETE'],\n    UPDATE: ['UPDATE'],\n    EXTERNALIZE: ['EXTERNALIZE'],\n}\n\n/**\n * Create a map of `propertyName` -> `Symbol`. This map is used to hide values for these properties. We will instead add\n * add convenience methods for these properties. (e.g. the `userGroups` property on the currentUser object becomes\n * `getUserGroups()`\n *\n * @private\n * @type {Object.<string, Symbol>}\n */\nconst propertySymbols = Array.from(propertiesToIgnore).reduce(\n    (result, property) => {\n        result[property] = Symbol(property)\n        return result\n    },\n    {}\n)\n\n/**\n * Creates a map of propertyName and propertyValue pairs of properties to be attached to the currentUser object.\n * These are all the regular properties that are returned when calling `api/27/me` but with the `userCredentials`\n * merged onto the same object.\n *\n * What would originally be `currentUser.userCredentials.username` would just be `currentUser.username`\n *\n * @private\n * @param {Object} currentUserObject The user payload as it is received from the api. https://play.dhis2.org/demo/api/27/me\n * @returns {Object} A map with propertyName/propertyValue pairs.\n */\nfunction getPropertiesForCurrentUserObject(currentUserObject) {\n    let properties\n    // The userCredentials object on the userObject is confusing so we set the properties straight onto the currentUser\n    // object itself\n    if (currentUserObject.userCredentials) {\n        properties = Object.assign(\n            {},\n            currentUserObject.userCredentials,\n            currentUserObject\n        )\n    } else {\n        properties = Object.assign({}, currentUserObject)\n    }\n\n    return Object.keys(properties).reduce((result, property) => {\n        if (propertiesToIgnore.has(property)) {\n            if (properties[property].map) {\n                result[propertySymbols[property]] = properties[property].map(\n                    value => value.id\n                )\n            }\n        } else {\n            result[property] = properties[property]\n        }\n        return result\n    }, {})\n}\n\n/**\n * Checks the noCreateAllowedFor list if the object can be created.\n *\n * @private\n * @param {ModelDefinition} modelDefinition The modelDefinition to check for.\n * @returns {boolean} True when it exists in the list, false otherwise.\n */\nfunction isInNoCreateAllowedForList(modelDefinition) {\n    return Boolean(\n        modelDefinition && noCreateAllowedFor.has(modelDefinition.name)\n    )\n}\n\n/**\n * Represents the current logged in user\n *\n * @memberof module:current-user\n */\nclass CurrentUser {\n    /**\n     * Creates the CurrentUser.\n     *\n     * @param {Object} userData Payload as returned from the api when requesting the currentUser object.\n     * @param {UserAuthorities} userAuthorities The UserAuthorities object for the currentUsers authorities.\n     * @param {ModelDefinition[]} modelDefinitions The modelDefinitions that need to be used for checking access.\n     * @param {UserSettings} settings The userSettings object to be set onto the current user object.\n     */\n    constructor(userData, userAuthorities, modelDefinitions, settings) {\n        Object.assign(this, getPropertiesForCurrentUserObject(userData))\n\n        /**\n         *\n         * @type {UserAuthorities}\n         */\n        this.authorities = userAuthorities\n\n        this[models] = modelDefinitions\n\n        /**\n         * Contains a reference to a `UserSettings` instance that can be used\n         * to retrieve and save system settings.\n         * @type {UserSettings}\n         * @description\n         * ```js\n         * d2.currentUser.userSettings.get('keyUiLocale')\n         *  .then(userSettingsValue => {\n         *    console.log('UI Locale: ' + userSettingsValue);\n         *  });\n         * ```\n         */\n        this.userSettings = settings\n\n        /**\n         * Contains a reference to {@link module:current-user.UserDataStore UserDataStore}\n         * @type UserDataStore\n         *\n         */\n        this.dataStore = UserDataStore.getUserDataStore()\n    }\n\n    /**\n     * Get a ModelCollection of userGroup models that are assigned to the currentUser\n     *\n     * The user groups are lazy loaded on init of the library. This method can be used to load the full representation\n     * of the userGroups.\n     *\n     * The request done is equivalent do doing https://play.dhis2.org/demo/api/27/me.json?fields=userGroups[:all]\n     *\n     * @returns {Promise<ModelCollection>} The model collection that contains the user's groups.\n     */\n    getUserGroups() {\n        const userGroupIds = this[propertySymbols.userGroups]\n\n        return this[models].userGroup.list({\n            filter: [`id:in:[${userGroupIds.join(',')}]`],\n            paging: false,\n        })\n    }\n\n    /**\n     * Get a ModelCollection of userRole models that are assigned to the currentUser\n     *\n     * The user roles are lazy loaded on init of the library. This method can be used to load the full representation\n     * of the userGroups.\n     *\n     * The request done is equivalent do doing https://play.dhis2.org/demo/api/27/me.json?fields=userCredentials[userRoles[:all]]\n     *\n     * @returns {Promise<ModelCollection>} A ModelCollection that contains the user's groups.\n     */\n    getUserRoles() {\n        const userRoleIds = this[propertySymbols.userRoles]\n\n        return this[models].userRole.list({\n            filter: [`id:in:[${userRoleIds.join(',')}]`],\n            paging: false,\n        })\n    }\n\n    /**\n     * Requests a users primary organisation units from the api.\n     *\n     * The users organisation units are lazy loaded on init of the library (just the ids). This method can be used to\n     * load the full representation of the organisationUnits.\n     *\n     * @param {Object} [listOptions={}] Additional query parameters that should be send with the request.\n     * @returns {Promise<ModelCollection>} A ModelCollection that contains the user's organisationUnits.\n     */\n    getOrganisationUnits(listOptions = {}) {\n        const organisationUnitsIds = this[propertySymbols.organisationUnits]\n\n        return this[models].organisationUnit.list(\n            Object.assign(\n                {\n                    fields:\n                        ':all,displayName,path,children[id,displayName,path,children::isNotEmpty]',\n                    paging: false,\n                },\n                listOptions,\n                { filter: [`id:in:[${organisationUnitsIds.join(',')}]`] }\n            )\n        )\n    }\n\n    /**\n     * Requests a users data view organisation units from the api.\n     *\n     * The users data view organisation units are lazy loaded on init of the library (just the ids). This method can\n     * be used to load the full representation of the dataViewOrganisationUnits.\n     *\n     * @param {Object} [listOptions={}] Additional query parameters that should be send with the request.\n     * @returns {Promise<ModelCollection>} A ModelCollection that contains the user's dataViewOrganisationUnits.\n     */\n    getDataViewOrganisationUnits(listOptions) {\n        const organisationUnitsIds = this[\n            propertySymbols.dataViewOrganisationUnits\n        ]\n\n        return this[models].organisationUnit.list(\n            Object.assign(\n                {\n                    fields:\n                        ':all,displayName,path,children[id,displayName,path,children::isNotEmpty]',\n                    paging: false,\n                },\n                listOptions,\n                { filter: [`id:in:[${organisationUnitsIds.join(',')}]`] }\n            )\n        )\n    }\n\n    /**\n     * Helper function to check if the currentUser can perform an action.\n     *\n     * A schema from the api defines the authorities as follows:\n     * \"authorities\": [\n     *   {\n     *     \"type\": \"CREATE_PUBLIC\",\n     *     \"authorities\": [\n     *       \"F_DATAELEMENT_PUBLIC_ADD\"\n     *     ]\n     *   }, {\n     *      \"type\": \"CREATE_PRIVATE\",\n     *      \"authorities\": [\n     *        \"F_DATAELEMENT_PRIVATE_ADD\"\n     *      ]\n     *    }, {\n     *      \"type\": \"DELETE\",\n     *      \"authorities\": [\n     *        \"F_DATAELEMENT_DELETE\"\n     *      ]\n     *    }\n     *\n     * ],\n     *\n     * So for example, when asking for `currentUser.canCreate(modelDefinition)` we look at the authorities map for CREATE, we\n     * collect the authorities from the schema based on the values of `CREATE`. So in the case of above schema authorities\n     * we take the authorities for 'CREATE_PUBLIC' and 'CREATE_PRIVATE' and check if the user has at least one of the\n     * authorities in the combined list. If we had asked for `currentUser.canCreatePrivate(modelDefinition)` we would only\n     * need to check if the user has `F_DATAELEMENT_PRIVATE_ADD` However for just create the user could still create when he\n     * has either private or public.\n     *\n     * @private\n     * @param {AuthorityType} authorityType The type of authority to check for.\n     * @param {ModelDefinition} modelDefinition The ModelDefinition for the type of object that the authority should\n     * be checked for.\n     * @returns {boolean} True when the user has the authority to perform the action, otherwise false.\n     */\n    checkAuthorityForType(authorityType, modelDefinition) {\n        if (!modelDefinition || !Array.isArray(modelDefinition.authorities)) {\n            return false\n        }\n\n        return (\n            modelDefinition.authorities\n                // Filter the correct authority to check for from the model\n                .filter(authority =>\n                    authorityType.some(\n                        authToHave => authToHave === authority.type\n                    )\n                )\n                // Check the left over schema authority types\n                .some(\n                    schemaAuthority =>\n                        schemaAuthority.authorities.some(authorityToCheckFor =>\n                            this.authorities.has(authorityToCheckFor)\n                        ) // Check if one of the schema authorities are available in the users authorities\n                )\n        )\n    }\n\n    /**\n     * Helper method to first check the special \"not allowed to create list\" before checking the users authorities.\n     *\n     * @private\n     * @param {AuthorityType} authType The type of authority that should be checked. (CREATE, CREATE_PRIVATE\n     * or CREATE_PUBLIC)\n     * @param {ModelDefinition} modelDefinition The modelDefinition that the authorities should be checked for.\n     * @returns {boolean} True when the user has the permission to create the object\n     */\n    checkCreateAuthorityForType(authType, modelDefinition) {\n        // When the modelDefinition is mentioned in the the list of modelTypes that are not\n        // allowed to be created we return false\n        if (isInNoCreateAllowedForList(modelDefinition)) {\n            return false\n        }\n\n        // Otherwise we check using the normal procedure for checking authorities\n        return this.checkAuthorityForType(authType, modelDefinition)\n    }\n\n    /**\n     * Check if the user has the authority to create objects of a type of Model (based on it's modelDefinition)\n     * If the object supports public and private objects then both are checked, and the method will return true if one\n     * of them is true. (e.g. will also return true if the user can only create private objects)\n     *\n     * @param {ModelDefinition} modelDefinition The modelDefinition that the authorities should be checked for.\n     * @returns {boolean} True when the user has the permission to create the object\n     */\n    canCreate(modelDefinition) {\n        return this.checkCreateAuthorityForType(\n            authTypes.CREATE,\n            modelDefinition\n        )\n    }\n\n    /**\n     * Check if the user has the authority to create public objects of a type of Model (based on it's modelDefinition)\n     *\n     * @param {ModelDefinition} modelDefinition The modelDefinition that the authorities should be checked for.\n     * @returns {boolean} True when the user has the permission to create the object\n     */\n    canCreatePublic(modelDefinition) {\n        return this.checkCreateAuthorityForType(\n            authTypes.CREATE_PUBLIC,\n            modelDefinition\n        )\n    }\n\n    /**\n     * Check if the user has the authority to create private objects of a type of Model (based on it's modelDefinition)\n     *\n     * @param {ModelDefinition} modelDefinition The modelDefinition that the authorities should be checked for.\n     * @returns {boolean} True when the user has the permission to create the object\n     */\n    canCreatePrivate(modelDefinition) {\n        return this.checkCreateAuthorityForType(\n            authTypes.CREATE_PRIVATE,\n            modelDefinition\n        )\n    }\n\n    /**\n     * Check if the user has the authority to delete objects of a type of Model (based on it's modelDefinition)\n     *\n     * @param {ModelDefinition} modelDefinition The modelDefinition that the authorities should be checked for.\n     * @returns {boolean} True when the user has the permission to delete the object\n     *\n     * @deprecated Delete should be checked through the `Model.access.delete` property instead, as that also takes into\n     * account sharing. Just checking if the user has the authority to delete a specific object does not take into account\n     * the full ACL.\n     */\n    canDelete(modelDefinition) {\n        return this.checkAuthorityForType(authTypes.DELETE, modelDefinition)\n    }\n\n    /**\n     * Check if the user has the authority to update objects of a type of Model (based on it's modelDefinition)\n     *\n     * @param {ModelDefinition} modelDefinition The modelDefinition that the authorities should be checked for.\n     * @returns {boolean} True when the user has the permission to update the object\n     *\n     * @deprecated Update should be checked through the `Model.access.update` property instead, as that also takes into\n     * account sharing. Just checking if the user has the authority to update a specific object does not take into account\n     * the full ACL.\n     */\n    canUpdate(modelDefinition) {\n        if (this.checkAuthorityForType(authTypes.UPDATE, modelDefinition)) {\n            return true\n        }\n        return this.checkAuthorityForType(authTypes.CREATE, modelDefinition)\n    }\n\n    /**\n     * Factory method for creating a CurrentUser instance\n     *\n     * @param {Object} userData Payload as returned from the api when requesting the currentUser object.\n     * @param {string[]} authorities A list of authorities that the currentUser has.\n     * @param {ModelDefinition[]} modelDefinitions The modelDefinitions that need to be used for checking access.\n     * @param {Object} userSettings Payload as returned from the api when request the userSettings\n     * @returns {CurrentUser} The created CurrentUser object based on the data given.\n     */\n    static create(userData, authorities, modelDefinitions, userSettings) {\n        return new CurrentUser(\n            userData,\n            UserAuthorities.create(authorities),\n            modelDefinitions,\n            new UserSettings(userSettings)\n        )\n    }\n}\n\nexport default CurrentUser\n"],"file":"CurrentUser.js"}