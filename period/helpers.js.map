{"version":3,"sources":["../../src/period/helpers.js"],"names":["formatAsISODate","date","Date","Error","y","getFullYear","m","getMonth","substr","d","getDate","filterFuturePeriods","periods","array","now","i","length","startDate","push","getYYYYMM","getBiMonthlyId","Math","floor","validateIfValueIsInteger","year","getCurrentYear","is53WeekISOYear","p","addDays","days","result","setDate","addMonths","months","setMonth","subtractDays","getFirstDayInFirstISOWeekForYear","getDay","daysAfterMonday","getLastDayOfTheWeekForFirstDayOfTheWeek","endDate","getMonthNamesForLocale","locale","monthNames","monthName","toLocaleDateString","month","getLastDateOfMonth","getFirstDateOfQuarter","quarter","startMonth","getLastDateOfQuarter","ordTable","ordTableLeap","getFirstDateOfWeek","week","isLeapYear","ordDiff","correction","ordDate","computeWeekBasedPeriod","weekTypeDiff","periodLength","startYear","startMonthName","startDayNum","endMonth","endDayNum","endMonthName"],"mappings":"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","sourcesContent":["import { isInteger } from '../lib/check'\n\nexport function formatAsISODate(date) {\n    if (!(date instanceof Date)) {\n        throw new Error('formatAsISODate(date) only accepts Date objects')\n    }\n\n    const y = date.getFullYear()\n    const m = `0${date.getMonth() + 1}`.substr(-2)\n    const d = `0${date.getDate()}`.substr(-2)\n    return `${y}-${m}-${d}`\n}\n\nexport function filterFuturePeriods(periods) {\n    const array = []\n    const now = new Date()\n\n    for (let i = 0; i < periods.length; i++) {\n        if (new Date(periods[i].startDate) <= now) {\n            array.push(periods[i])\n        }\n    }\n\n    return array\n}\n\nexport function getYYYYMM(date) {\n    const y = date.getFullYear()\n    let m = `${date.getMonth() + 1}`\n    m = `0${m}`.substr(-2)\n    return y + m\n}\n\nexport function getBiMonthlyId(date) {\n    const y = date.getFullYear()\n    const m = `0${Math.floor(date.getMonth() / 2) + 1}`.substr(-2)\n    return `${y + m}B`\n}\n\nexport function validateIfValueIsInteger(year) {\n    if (!isInteger(year)) {\n        throw new Error(\n            'Generator should be called with an integer to identify the year.' +\n                ' Perhaps you passed a Date object?'\n        )\n    }\n\n    if (year < 0) {\n        throw new Error(\n            'Generator does not support generating year before the year 0.'\n        )\n    }\n}\n\nexport function getCurrentYear() {\n    return new Date().getFullYear()\n}\n\nexport function is53WeekISOYear(year) {\n    const p = y =>\n        y + Math.floor(y / 4) - Math.floor(y / 100) + Math.floor(y / 400)\n\n    return p(year) % 7 === 4 || p(year - 1) % 7 === 3\n}\n\nexport function addDays(days, date) {\n    const result = new Date(date)\n\n    result.setDate(result.getDate() + days)\n\n    return result\n}\n\nexport function addMonths(months, date) {\n    const result = new Date(date)\n\n    result.setMonth(date.getMonth() + months)\n\n    return result\n}\n\nexport function subtractDays(days, date) {\n    return addDays(-days, date)\n}\n\nexport function getFirstDayInFirstISOWeekForYear(year) {\n    // The first ISO week of the year always contains 4th January. We can use this as a pointer to start the first week.\n    let startDate = new Date(year, 0, 4)\n\n    // January 4th might not be at the start of the week. Therefore we rewind to the start of the week.\n    if (startDate.getDay() === 0) {\n        startDate = subtractDays(6, startDate)\n        // If January 4th is on a Sunday we'll revert back 6 days\n    } else {\n        // We'll revert back the current day number of days - 1 (Due to the days being 0 indexed with 0 being Sunday)\n        const daysAfterMonday = startDate.getDay() - 1\n        startDate = subtractDays(daysAfterMonday, startDate)\n    }\n\n    return startDate\n}\n\nexport function getLastDayOfTheWeekForFirstDayOfTheWeek(startDate) {\n    const endDate = new Date(startDate)\n\n    endDate.setDate(endDate.getDate() + 6)\n\n    return endDate\n}\n\nexport function getMonthNamesForLocale(locale) {\n    const monthNames = []\n\n    for (let i = 0; i < 12; i += 1) {\n        const monthName = new Date(2000, i, 1).toLocaleDateString(locale, {\n            month: 'long',\n        })\n        monthNames.push(monthName)\n    }\n\n    return monthNames\n}\n\nexport function getLastDateOfMonth(year, month) {\n    return new Date(new Date(year, month + 1).setDate(0))\n}\n\nexport function getFirstDateOfQuarter(year, quarter) {\n    const startMonth = (quarter - 1) * 3\n    return new Date(year, startMonth)\n}\n\nexport function getLastDateOfQuarter(year, quarter) {\n    return new Date(getFirstDateOfQuarter(year, quarter + 1).setDate(0))\n}\n\nconst ordTable = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]\nconst ordTableLeap = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335]\n\nexport function getFirstDateOfWeek(year, week) {\n    const isLeapYear =\n        new Date(new Date(year, 2, 1).setDate(0)).getDate() === 29\n    const ordDiff = isLeapYear ? ordTableLeap : ordTable\n\n    const correction = (new Date(year, 0, 4).getDay() || 7) + 3\n    const ordDate = week * 7 + (1 - correction)\n    if (ordDate < 0) {\n        return new Date(year, 0, ordDate)\n    }\n\n    let month = 11\n    while (ordDate < ordDiff[month]) {\n        month-- // eslint-disable-line no-plusplus\n    }\n\n    return new Date(year, month, ordDate - ordDiff[month])\n}\n\n/**\n * This function takes some general instructions for a period and returns a precise period containing\n * a start date and end date. It corrects for week 1 starting in a previous year and for week 53 in a\n * 52 week year\n * It is used by the BiWeekly periodType and all flavors of Weekly PeriodTypes,\n * such as Weekly, weeklyWednessday, etc.\n * @param {Object} obj - An object\n * @param {Number} obj.year - Year\n * @param {Number} obj.week - Week number between 1-53\n * @param {String} [obj.locale=en] - The current locale\n * @param {Number} [obj.weekTypeDiff=0] - The difference between the starting day of the week\n * in a given periodType and the first day of the week. This option is being used for different\n * flavors of weekly period types, such as WeeklyWednesday, WeeklyThursday, etc.\n * @param {Number} [obj.periodLength=6] - The amount of days until the end date: 6 for weekly\n * and 13 for Bikweekly\n * @returns {Object} - An object containing various properties that can be used to contruct\n * the final parsed period\n * @example for default scenario\n * computeWeekBasedPeriod({ year: 2019, week: 12})\n * // returns:\n * // {\n * //     week: 12,\n * //     year: 2019,\n * //     startMonthName: 'June',\n * //     startDayNumber: 3,\n * //     endDayNumber: 9,\n * //     startDate: '2019-06-03',\n * //     endDate: '2019-06-09',\n * // }\n * @example for week 53 in 52 week year edge case\n * computeWeekBasedPeriod({ year: 2016, week: 53})\n * // returns:\n * // {\n * //     week: 1,\n * //     year: 2017,\n * //     startMonthName: 'January',\n * //     startDayNumber: 2,\n * //     endDayNumber: 8,\n * //     startDate: '2017-01-02',\n * //     endDate: '2017-01-08',\n * // }\n */\nexport const computeWeekBasedPeriod = ({\n    year,\n    week,\n    locale = 'en',\n    weekTypeDiff = 0,\n    periodLength = 6,\n}) => {\n    const startDate = addDays(weekTypeDiff, getFirstDateOfWeek(year, week))\n    const monthNames = getMonthNamesForLocale(locale)\n    const startMonth = startDate.getMonth()\n    const startYear = startDate.getFullYear()\n    const startMonthName = monthNames[startMonth]\n    const startDayNum = startDate.getDate()\n\n    if (week === 53 && startYear !== year) {\n        week = 1\n        year = startYear\n    }\n\n    const endDate = addDays(periodLength, startDate)\n    const endMonth = endDate.getMonth()\n    const endDayNum = endDate.getDate()\n    const endMonthName = monthNames[endMonth]\n\n    return {\n        week,\n        year,\n        startMonthName,\n        startDayNum,\n        endMonthName,\n        endDayNum,\n        startDate: formatAsISODate(startDate),\n        endDate: formatAsISODate(endDate),\n    }\n}\n"],"file":"helpers.js"}