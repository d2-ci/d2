{"version":3,"sources":["../../src/model/Filters.js"],"names":["Filters","modelDefinition","filters","rootJunction","propertyName","addFilter","add","bind","Filter","getFilter","on","filter","TypeError","push","list","map","getQueryParamFormat","getQueryFilterValues","identity","junction","priorFilters"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;IACMA,O;AACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI,mBAAYC,eAAZ,EAA2C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACvC;AACR;AACA;AACA;AACQ,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKD,eAAL,GAAuBA,eAAvB;AACA,SAAKE,YAAL,GAAoB,IAApB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;;uBACOC,Y,EAAc;AACb,UAAMC,SAAS,GAAG,KAAKC,GAAL,CAASC,IAAT,CAAc,IAAd,CAAlB;AAEA,aAAOC,gBAAOC,SAAP,CAAiBJ,SAAjB,EAA4BK,EAA5B,CAA+BN,YAA/B,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;wBACQO,M,EAAQ;AACR,UAAI,CAAC,mBAAOA,MAAP,EAAeH,eAAf,CAAL,EAA6B;AACzB,cAAM,IAAII,SAAJ,CAAc,wCAAd,CAAN;AACH;;AACD,WAAKV,OAAL,CAAaW,IAAb,CAAkBF,MAAlB;AAEA,aAAO,KAAKV,eAAZ;AACH;AAED;AACJ;AACA;AACA;;;;2BACW;AACH,aAAO,KAAKA,eAAL,CAAqBa,IAArB,EAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;2CAC2B;AACnB,aAAO,KAAKZ,OAAL,CAAaa,GAAb,CAAiB,UAAAJ,MAAM;AAAA,eAAIA,MAAM,CAACK,mBAAP,EAAJ;AAAA,OAAvB,CAAP;AACH;AAED;AACJ;AACA;AACA;;;;iCACiB;AACT,aAAO,KAAKC,oBAAL,EAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;;oCACoB;AACZ,aAAO,KAAKf,OAAL,CAAaa,GAAb,CAAiBG,eAAjB,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;8BACcC,Q,EAAU;AAChB,yCAAuBA,QAAvB;AACA,WAAKhB,YAAL,GAAoBgB,QAApB;AACA,aAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;+BACsBlB,e,EAAoC;AAAA,UAAnBmB,YAAmB,uEAAJ,EAAI;AAClD,aAAO,IAAIpB,OAAJ,CAAYC,eAAZ,EAA6BmB,YAA7B,CAAP;AACH;;;;;;eAGUpB,O","sourcesContent":["import { isType, checkValidRootJunction } from '../lib/check'\nimport { identity } from '../lib/utils'\nimport Filter from './Filter'\n\n/**\n * @description\n * Collection class that contains filters that are to be applied when loading Model objects from the api.\n *\n * @memberof module:model\n */\nclass Filters {\n    /**\n     * Creates a new Filters instance.\n     *\n     * The Filters instance keeps a list of all the applied filters for a modelDefinition.\n     *\n     * @param {ModelDefinition} modelDefinition The ModelDefinition for which this Filters object should create filters.\n     * @param {Filter[]} filters A list of Filter objects\n     */\n    constructor(modelDefinition, filters = []) {\n        /**\n         * @type {Array<Filter>}\n         * @private\n         */\n        this.filters = filters\n        this.modelDefinition = modelDefinition\n        this.rootJunction = null\n    }\n\n    /**\n     * Shortcut for triggering the creation of a Filter. This is the function that is triggered when creating new\n     * filters on a ModelDefinition. The Filter will receive a callback that can be used to add the finalized filter\n     * to the list of filters.\n     *\n     * @param {string} propertyName The property that the filter should apply to. (e.g. `name`)\n     * @returns {Filter} The created filter object for `propertyName`.\n     */\n    on(propertyName) {\n        const addFilter = this.add.bind(this)\n\n        return Filter.getFilter(addFilter).on(propertyName)\n    }\n\n    /**\n     * Utility method to add a filter to the list of filters.\n     *\n     * @private\n     * @param {Filter} filter The Filter to be added to the list of current filters.\n     * @returns {ModelDefinition} The modelDefiniton that the filter applies to. This is used to support calling `.list()`\n     * on the modelDefinition after the filter was created.\n     * @throws {TypeError} Thrown when the given filter is not a Filter object.\n     */\n    add(filter) {\n        if (!isType(filter, Filter)) {\n            throw new TypeError('filter should be an instance of Filter')\n        }\n        this.filters.push(filter)\n\n        return this.modelDefinition\n    }\n\n    /**\n     * @deprecated\n     * @returns {Promise} Proxy the list() call on the filters object.\n     */\n    list() {\n        return this.modelDefinition.list()\n    }\n\n    /**\n     * Get an array of DHIS2 metadata filter values to send to the API.\n     *\n     * This will return ['id:eq:UYXOT4A7JMI', 'name:like:ANC'] for filters created as follows\n     * dataElement\n     *  .filter().on('id').equals(UYXOT4A7JMI)\n     *  .filter().on('name').like('ANC')\n     *\n     * @returns {Array<string>} A list of query param values to be used with the filter key.\n     */\n    getQueryFilterValues() {\n        return this.filters.map(filter => filter.getQueryParamFormat())\n    }\n\n    /**\n     * @deprecated Deprecated since 2.28, use getQueryFilterValues instead.\n     * @returns {Array.<string>}\n     */\n    getFilters() {\n        return this.getQueryFilterValues()\n    }\n\n    /**\n     * Get a list of Filter objects that are in applied in this Filters instance\n     *\n     * @returns {Array<Filter>} The list of Filter objects.\n     */\n    getFilterList() {\n        return this.filters.map(identity)\n    }\n\n    /**\n     * The logic mode to use on the filters.\n     *\n     * Default behavior is AND.\n     * Note that the logic will be used across all the filters, which\n     * means with OR, results will be returned when any of the filter match.\n     * It MUST be called last on the chain of filters when called\n     * through modelDefinition.filter().\n     * @see {@link https://docs.dhis2.org/master/en/developer/html/webapi_metadata_object_filter.html|Object filter Docs }\n     * @example\n     * d2.programs.filter().on('name').like('Child')\n     * .filter().logicMode('OR').on('code').equals('Child')\n     * @param {string} junction The logic operator to use. One of ['OR', 'AND'];\n     */\n    logicMode(junction) {\n        checkValidRootJunction(junction)\n        this.rootJunction = junction\n        return this\n    }\n\n    /**\n     * Factory method to create a Filters object.\n     *\n     * @param {ModelDefinition} modelDefinition The modelDefinition that the filters should apply to.\n     * @param {Filter[]} priorFilters List of previously applied filters that the new filter list should start with.\n     * @returns {Filters} A Filters object for the given modelDefinition.\n     */\n    static getFilters(modelDefinition, priorFilters = []) {\n        return new Filters(modelDefinition, priorFilters)\n    }\n}\n\nexport default Filters\n"],"file":"Filters.js"}