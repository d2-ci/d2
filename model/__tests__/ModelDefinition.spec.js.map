{"version":3,"sources":["../../../src/model/__tests__/ModelDefinition.spec.js"],"names":["jest","mock","describe","modelDefinition","mockModelCollectionCreate","mockModelCollectionPropertyCreate","beforeEach","ModelDefinition","displayName","singular","plural","fn","ModelCollection","mockReturnValue","ModelCollectionProperty","undefined","it","expect","toThrowErrorMatchingSnapshot","toBeInstanceOf","apiEndpoint","toBeUndefined","shouldThrow","toThrowError","isWritable","Object","getOwnPropertyDescriptor","writable","isConfigurable","configurable","toBe","name","Error","isMetaData","dataElementModelDefinition","createFromSchema","fixtures","get","attributes","toBeDefined","nonMetaDataModel","metadata","keys","modelProperties","length","anotherKey","aggregationType","constants","toEqual","schema","properties","push","propertyType","expectedProperties","definition","sort","dataElementGroups","dataElementGroup","Function","set","dimensionItem","not","model","dataValues","call","DIRTY_PROPERTY_LIST","Set","dirty","last","modelValidations","created","type","owner","externalAccess","id","max","persisted","required","commentOptionSet","referenceType","optionSet","categoryCombo","user","ordered","dataElementSchemaFixture","aggregationLevels","indicatorGroupModelDefinition","indicatorGroupSchema","indicators","userGroupAccesses","legendSetSchema","embeddedObject","attributeValues","UserModelDefinition","userModelDefinition","DataSetModelDefinition","dataSetModelDefinition","specialClasses","dataSet","attributeProperties","create","Model","orgUnitGroupSchema","organisationUnitGroupSetModelDefinition","dataDimension","orgunitModelDefinition","orgUnitSchema","ModelDefinitions","getModelDefinitions","add","organisationUnit","afterEach","mockClear","organisationUnits","toHaveBeenCalledTimes","calls","toMatchSnapshot","passedModelInstance","modelDefinitionForCollection","modelCollectionPropName","modelCollectionData","prototype","api","Promise","resolve","modelPromise","then","toBeCalledWith","fields","dataElementModel","reject","httpStatus","httpStatusCode","status","message","catch","dataElementError","responsePayload","dataElementsResult","dataElementCollection","filter","list","toBeCalled","firstCallArguments","on","like","equals","operator","logicMode","token","rootJunction","filters","clone","clonedDefinition","apiUpdateStub","apiPostStub","singleUserAllFields","update","post","getCollectionChildrenPropertyNames","getEmbeddedObjectCollectionPropertyNames","getReferenceProperties","forEach","key","defineProperty","value","save","expectedPayload","surname","href","saveNew","apiDeleteStub","delete","expectedDataElementProperties","ownProperties","getOwnedPropertyNames","isTranslatable","getTranslatableProperties","dataElementSchema","map","translationKey","props","getTranslatablePropertiesWithKeys","getOnApiStub","UserModelDefinitionClass","DataSetModelDefinitionClass","compulsoryDataElementOperands","OrganisationUnitModelDefinitionClass","organisationUnitModelDefinition","done","root"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEAA,IAAI,CAACC,IAAL,CAAU,oBAAV;AACAD,IAAI,CAACC,IAAL,CAAU,4BAAV;AACAD,IAAI,CAACC,IAAL,CAAU,UAAV;AAEAC,QAAQ,CAAC,iBAAD,EAAoB,YAAM;AAC9B,MAAIC,eAAJ;AACA,MAAIC,yBAAJ;AACA,MAAIC,iCAAJ;AAEAC,EAAAA,UAAU,CAAC,YAAM;AACbH,IAAAA,eAAe,GAAG,IAAII,wBAAJ,CAAoB;AAClCC,MAAAA,WAAW,EAAE,eADqB;AAElCC,MAAAA,QAAQ,EAAE,aAFwB;AAGlCC,MAAAA,MAAM,EAAE;AAH0B,KAApB,CAAlB;AAKAN,IAAAA,yBAAyB,GAAGJ,IAAI,CAACW,EAAL,CAAQC,wBAAR,EAAyB,QAAzB,CAA5B;AACAR,IAAAA,yBAAyB,CAACS,eAA1B,CAA0C,IAAID,wBAAJ,CAAoBT,eAApB,EAAqC,EAArC,EAAyC,EAAzC,CAA1C;AACAE,IAAAA,iCAAiC,GAAGL,IAAI,CAACW,EAAL,CAAQG,gCAAR,EAAiC,QAAjC,CAApC;AACAT,IAAAA,iCAAiC,CAACQ,eAAlC,CACI,IAAIC,gCAAJ,CAA4B,EAA5B,EAAgCX,eAAhC,EAAiD,UAAjD,EAA6D,EAA7D,EAAiEY,SAAjE,CADJ;AAGH,GAZS,CAAV;AAcAC,EAAAA,EAAE,CAAC,gDAAD,EAAmD,YAAM;AACvDC,IAAAA,MAAM,CAAC;AAAA,aAAM,+BAAN;AAAA,KAAD,CAAN,CAAgCC,4BAAhC;AACH,GAFC,CAAF;AAIAF,EAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAM;AAC/CC,IAAAA,MAAM,CAACd,eAAD,CAAN,CAAwBgB,cAAxB,CAAuCZ,wBAAvC;AACH,GAFC,CAAF;AAIAS,EAAAA,EAAE,CAAC,mDAAD,EAAsD,YAAM;AAC1DC,IAAAA,MAAM,CAACd,eAAe,CAACiB,WAAjB,CAAN,CAAoCC,aAApC;AACH,GAFC,CAAF;AAIAL,EAAAA,EAAE,CAAC,oDAAD,EAAuD,YAAM;AAC3D,aAASM,WAAT,GAAuB;AACnB,aAAO,IAAIf,wBAAJ,EAAP;AACH;;AACDU,IAAAA,MAAM,CAACK,WAAD,CAAN,CAAoBC,YAApB,CAAiC,0BAAjC;AACH,GALC,CAAF;AAOAP,EAAAA,EAAE,CAAC,oDAAD,EAAuD,YAAM;AAC3D,aAASM,WAAT,GAAuB;AACnB,aAAO,IAAIf,wBAAJ,CAAoB;AAAEC,QAAAA,WAAW,EAAE,eAAf;AAAgCC,QAAAA,QAAQ,EAAE;AAA1C,OAApB,CAAP;AACH;;AACDQ,IAAAA,MAAM,CAACK,WAAD,CAAN,CAAoBC,YAApB,CAAiC,2BAAjC;AACH,GALC,CAAF;AAOArB,EAAAA,QAAQ,CAAC,UAAD,EAAa,YAAM;AACvBc,IAAAA,EAAE,CAAC,uCAAD,EAA0C,YAAM;AAC9C,UAAMQ,UAAU,GAAGC,MAAM,CAACC,wBAAP,CAAgCvB,eAAhC,EAAiD,MAAjD,EAAyDwB,QAA5E;AACA,UAAMC,cAAc,GAAGH,MAAM,CAACC,wBAAP,CAAgCvB,eAAhC,EAAiD,MAAjD,EAAyD0B,YAAhF;AAEAZ,MAAAA,MAAM,CAACO,UAAD,CAAN,CAAmBM,IAAnB,CAAwB,KAAxB;AACAb,MAAAA,MAAM,CAACW,cAAD,CAAN,CAAuBE,IAAvB,CAA4B,KAA5B;AACH,KANC,CAAF;AAQAd,IAAAA,EAAE,CAAC,4BAAD,EAA+B,YAAM;AACnC,eAASM,WAAT,GAAuB;AACnBnB,QAAAA,eAAe,CAAC4B,IAAhB,GAAuB,aAAvB;;AAEA,YAAI5B,eAAe,CAAC4B,IAAhB,KAAyB,aAA7B,EAA4C;AACxC,gBAAM,IAAIC,KAAJ,CAAU,EAAV,CAAN;AACH;AACJ;;AAEDf,MAAAA,MAAM,CAACK,WAAD,CAAN,CAAoBC,YAApB;AACAN,MAAAA,MAAM,CAACd,eAAe,CAAC4B,IAAjB,CAAN,CAA6BD,IAA7B,CAAkC,aAAlC;AACH,KAXC,CAAF;AAaAd,IAAAA,EAAE,CAAC,qCAAD,EAAwC,YAAM;AAC5CC,MAAAA,MAAM,CAACd,eAAe,CAACK,WAAjB,CAAN,CAAoCsB,IAApC,CAAyC,eAAzC;AACH,KAFC,CAAF;AAIAd,IAAAA,EAAE,CAAC,mCAAD,EAAsC,YAAM;AAC1C,eAASM,WAAT,GAAuB;AACnBnB,QAAAA,eAAe,CAACK,WAAhB,GAA8B,cAA9B;AACH;;AAEDS,MAAAA,MAAM,CAACK,WAAD,CAAN,CAAoBC,YAApB;AACAN,MAAAA,MAAM,CAACd,eAAe,CAACK,WAAjB,CAAN,CAAoCsB,IAApC,CAAyC,eAAzC;AACH,KAPC,CAAF;AASAd,IAAAA,EAAE,CAAC,6CAAD,EAAgD,YAAM;AACpD,UAAMQ,UAAU,GAAGC,MAAM,CAACC,wBAAP,CAAgCvB,eAAhC,EAAiD,YAAjD,EAA+DwB,QAAlF;AACA,UAAMC,cAAc,GAAGH,MAAM,CAACC,wBAAP,CAAgCvB,eAAhC,EAAiD,YAAjD,EAA+D0B,YAAtF;AAEAZ,MAAAA,MAAM,CAACO,UAAD,CAAN,CAAmBM,IAAnB,CAAwB,KAAxB;AACAb,MAAAA,MAAM,CAACW,cAAD,CAAN,CAAuBE,IAAvB,CAA4B,KAA5B;AACH,KANC,CAAF;AAQAd,IAAAA,EAAE,CAAC,kCAAD,EAAqC,YAAM;AACzC,eAASM,WAAT,GAAuB;AACnBnB,QAAAA,eAAe,CAAC8B,UAAhB,GAA6B,IAA7B;;AAEA,YAAI9B,eAAe,CAAC8B,UAAhB,KAA+B,IAAnC,EAAyC;AACrC,gBAAM,IAAID,KAAJ,CAAU,EAAV,CAAN;AACH;AACJ;;AAEDf,MAAAA,MAAM,CAACd,eAAe,CAAC8B,UAAjB,CAAN,CAAmCH,IAAnC,CAAwC,KAAxC;AACAb,MAAAA,MAAM,CAACK,WAAD,CAAN,CAAoBC,YAApB;AACH,KAXC,CAAF;AAYH,GAvDO,CAAR;AAyDArB,EAAAA,QAAQ,CAAC,kBAAD,EAAqB,YAAM;AAC/B,QAAIgC,0BAAJ;AAEA5B,IAAAA,UAAU,CAAC,YAAM;AACb4B,MAAAA,0BAA0B,GAAG3B,yBAAgB4B,gBAAhB,CACzBC,kBAASC,GAAT,CAAa,0BAAb,CADyB,EAEzBD,kBAASC,GAAT,CAAa,iBAAb,EAAgCC,UAFP,CAA7B;AAIH,KALS,CAAV;AAOAtB,IAAAA,EAAE,CAAC,uCAAD,EAA0C,YAAM;AAC9CC,MAAAA,MAAM,CAACV,yBAAgB4B,gBAAjB,CAAN,CAAyCI,WAAzC;AACH,KAFC,CAAF;AAIAvB,IAAAA,EAAE,CAAC,4CAAD,EAA+C,YAAM;AACnDC,MAAAA,MAAM,CAACV,yBAAgB4B,gBAAjB,CAAN,CAAyCZ,YAAzC,CAAsD,2BAAtD;AACH,KAFC,CAAF;AAIArB,IAAAA,QAAQ,CAAC,mBAAD,EAAsB,YAAM;AAChCc,MAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAM;AAC/CC,QAAAA,MAAM,CAACiB,0BAAD,CAAN,CAAmCf,cAAnC,CAAkDZ,wBAAlD;AACH,OAFC,CAAF;AAIAS,MAAAA,EAAE,CAAC,uCAAD,EAA0C,YAAM;AAC9CC,QAAAA,MAAM,CAACiB,0BAA0B,CAACH,IAA5B,CAAN,CAAwCD,IAAxC,CAA6C,aAA7C;AACH,OAFC,CAAF;AAIAd,MAAAA,EAAE,CAAC,sCAAD,EAAyC,YAAM;AAC7CC,QAAAA,MAAM,CAACiB,0BAA0B,CAACD,UAA5B,CAAN,CAA8CH,IAA9C,CAAmD,IAAnD;AACH,OAFC,CAAF;AAIAd,MAAAA,EAAE,CAAC,4BAAD,EAA+B,YAAM;AACnCC,QAAAA,MAAM,CAACiB,0BAA0B,CAACd,WAA5B,CAAN,CAA+CU,IAA/C,CAAoD,8CAApD;AACH,OAFC,CAAF;AAIAd,MAAAA,EAAE,CAAC,4DAAD,EAA+D,YAAM;AACnE,YAAMwB,gBAAgB,GAAGJ,kBAASC,GAAT,CAAa,0BAAb,CAAzB;;AACAG,QAAAA,gBAAgB,CAACC,QAAjB,GAA4B,KAA5B;AAEAP,QAAAA,0BAA0B,GAAG3B,yBAAgB4B,gBAAhB,CAAiCK,gBAAjC,CAA7B;AAEAvB,QAAAA,MAAM,CAACiB,0BAA0B,CAACD,UAA5B,CAAN,CAA8CH,IAA9C,CAAmD,KAAnD;AACH,OAPC,CAAF;AASAd,MAAAA,EAAE,CAAC,gEAAD,EAAmE,YAAM;AACvEC,QAAAA,MAAM,CAACQ,MAAM,CAACiB,IAAP,CAAYR,0BAA0B,CAACS,eAAvC,EAAwDC,MAAzD,CAAN,CAAuEd,IAAvE,CAA4E,EAA5E;AACH,OAFC,CAAF;AAIAd,MAAAA,EAAE,CAAC,wDAAD,EAA2D,YAAM;AAC/D,iBAASM,WAAT,GAAuB;AACnBY,UAAAA,0BAA0B,CAACS,eAA3B,CAA2CE,UAA3C,GAAwD,EAAxD,CADmB,CAGnB;;AACA,cAAIpB,MAAM,CAACiB,IAAP,CAAYR,0BAA0B,CAACS,eAAvC,EAAwDC,MAAxD,KAAmE,EAAvE,EAA2E;AACvE,kBAAM,IAAIZ,KAAJ,EAAN;AACH;AACJ;;AAEDf,QAAAA,MAAM,CAACK,WAAD,CAAN,CAAoBC,YAApB;AACAN,QAAAA,MAAM,CAACQ,MAAM,CAACiB,IAAP,CAAYR,0BAA0B,CAACS,eAAvC,EAAwDC,MAAzD,CAAN,CAAuEd,IAAvE,CAA4E,EAA5E;AACH,OAZC,CAAF;AAcAd,MAAAA,EAAE,CAAC,iCAAD,EAAoC,YAAM;AACxCkB,QAAAA,0BAA0B,GAAG3B,yBAAgB4B,gBAAhB,CAAiCC,kBAASC,GAAT,CAAa,0BAAb,CAAjC,CAA7B;AAEApB,QAAAA,MAAM,CAACiB,0BAA0B,CAACS,eAA3B,CAA2CG,eAA3C,CAA2DC,SAA5D,CAAN,CAA6EC,OAA7E,CAAqF,CACjF,KADiF,EAEjF,SAFiF,EAGjF,sBAHiF,EAIjF,OAJiF,EAKjF,QALiF,EAMjF,UANiF,EAOjF,KAPiF,EAQjF,KARiF,EASjF,MATiF,EAUjF,QAViF,EAWjF,SAXiF,EAYjF,iBAZiF,EAajF,gCAbiF,EAcjF,aAdiF,EAejF,4BAfiF,EAgBjF,cAhBiF,CAArF;AAkBH,OArBC,CAAF;AAsBH,KAlEO,CAAR;AAoEA9C,IAAAA,QAAQ,CAAC,iBAAD,EAAoB,YAAM;AAC9B,UAAIyC,eAAJ;AAEArC,MAAAA,UAAU,CAAC,YAAM;AACbqC,QAAAA,eAAe,GAAGT,0BAA0B,CAACS,eAA7C;AACH,OAFS,CAAV;AAIA3B,MAAAA,EAAE,CAAC,qBAAD,EAAwB,YAAM;AAC5BC,QAAAA,MAAM,CAAC0B,eAAe,CAACZ,IAAjB,CAAN,CAA6BZ,cAA7B,CAA4CM,MAA5C;AACH,OAFC,CAAF;AAIAT,MAAAA,EAAE,CAAC,gDAAD,EAAmD,YAAM;AACvD,YAAMiC,MAAM,GAAGb,kBAASC,GAAT,CAAa,0BAAb,CAAf;;AACA,iBAASf,WAAT,GAAuB;AACnBf,mCAAgB4B,gBAAhB,CAAiCc,MAAjC;AACH;;AAEDA,QAAAA,MAAM,CAACC,UAAP,CAAkBC,IAAlB,CAAuB;AACnBpB,UAAAA,IAAI,EAAE,iBADa;AAEnBqB,UAAAA,YAAY,EAAE;AAFK,SAAvB;AAKAnC,QAAAA,MAAM,CAACK,WAAD,CAAN,CACKC,YADL,CACkB,yEADlB;AAEH,OAbC,CAAF;AAeAP,MAAAA,EAAE,CAAC,mDAAD,EAAsD,YAAM;AAC1D,YAAMiC,MAAM,GAAGb,kBAASC,GAAT,CAAa,0BAAb,CAAf;;AACA,YAAMgB,kBAAkB,GAAG,CACvB,mBADuB,EAEvB,mBAFuB,EAGvB,oBAHuB,EAIvB,WAJuB,EAKvB,IALuB,EAMvB,SANuB,EAOvB,aAPuB,EAQvB,iBARuB,EASvB,kBATuB,EAUvB,MAVuB,EAWvB,gBAXuB,EAYvB,WAZuB,EAavB,MAbuB,EAcvB,mBAduB,EAevB,cAfuB,EAgBvB,iBAhBuB,EAiBvB,UAjBuB,EAkBvB,aAlBuB,EAmBvB,iBAnBuB,EAoBvB,MApBuB,EAqBvB,QArBuB,EAsBvB,KAtBuB,EAuBvB,YAvBuB,EAwBvB,WAxBuB,EAyBvB,YAzBuB,EA0BvB,eA1BuB,EA2BvB,iBA3BuB,EA4BvB,gBA5BuB,EA6BvB,mBA7BuB,EA8BvB,cA9BuB,EA+BvB,WA/BuB,EAgCvB,aAhCuB,EAiCvB,kBAjCuB,EAkCvB,MAlCuB,EAmCvB,cAnCuB,EAoCvB,eApCuB,EAqCvB,mBArCuB,CAA3B;AAwCAJ,QAAAA,MAAM,CAACC,UAAP,CAAkBC,IAAlB,CAAuB;AAAEC,UAAAA,YAAY,EAAE;AAAhB,SAAvB;;AAEA,YAAME,UAAU,GAAG/C,yBAAgB4B,gBAAhB,CAAiCc,MAAjC,CAAnB;;AAEAhC,QAAAA,MAAM,CAACQ,MAAM,CAACiB,IAAP,CAAYY,UAAU,CAACX,eAAvB,EAAwCY,IAAxC,EAAD,CAAN,CAAuDP,OAAvD,CAA+DK,kBAAkB,CAACE,IAAnB,EAA/D;AACH,OA/CC,CAAF;AAiDAvC,MAAAA,EAAE,CAAC,gDAAD,EAAmD,YAAM;AACvDC,QAAAA,MAAM,CAAC0B,eAAe,CAACa,iBAAjB,CAAN,CAA0CjB,WAA1C;AACAtB,QAAAA,MAAM,CAAC0B,eAAe,CAACc,gBAAjB,CAAN,CAAyCpC,aAAzC;AACH,OAHC,CAAF;AAKAL,MAAAA,EAAE,CAAC,mDAAD,EAAsD,YAAM;AAC1DC,QAAAA,MAAM,CAAC0B,eAAe,CAACZ,IAAhB,CAAqBM,GAAtB,CAAN,CAAiClB,cAAjC,CAAgDuC,QAAhD;AACH,OAFC,CAAF;AAIA1C,MAAAA,EAAE,CAAC,4DAAD,EAA+D,YAAM;AACnEC,QAAAA,MAAM,CAAC0B,eAAe,CAACZ,IAAhB,CAAqB4B,GAAtB,CAAN,CAAiCxC,cAAjC,CAAgDuC,QAAhD;AACH,OAFC,CAAF;AAIA1C,MAAAA,EAAE,CAAC,gDAAD,EAAmD,YAAM;AACvDC,QAAAA,MAAM,CAAC0B,eAAe,CAACiB,aAAhB,CAA8BD,GAA/B,CAAN,CAA0CE,GAA1C,CAA8C1C,cAA9C,CAA6DuC,QAA7D;AACH,OAFC,CAAF;AAIA1C,MAAAA,EAAE,CAAC,yDAAD,EAA4D,YAAM;AAChE,YAAM8C,KAAK,GAAG;AACVC,UAAAA,UAAU,EAAE;AACRhC,YAAAA,IAAI,EAAE;AADE;AADF,SAAd;AAMAd,QAAAA,MAAM,CAAC0B,eAAe,CAACZ,IAAhB,CAAqBM,GAArB,CAAyB2B,IAAzB,CAA8BF,KAA9B,CAAD,CAAN,CAA6ChC,IAA7C,CAAkD,MAAlD;AACH,OARC,CAAF;AAUAd,MAAAA,EAAE,CAAC,yDAAD,EAA4D,YAAM;AAChE,YAAM8C,KAAK,GAAG;AACVC,UAAAA,UAAU,EAAE;AADF,SAAd;AAGAD,QAAAA,KAAK,CAACG,8BAAD,CAAL,GAA6B,IAAIC,GAAJ,CAAQ,EAAR,CAA7B;AAEAvB,QAAAA,eAAe,CAACZ,IAAhB,CAAqB4B,GAArB,CAAyBK,IAAzB,CAA8BF,KAA9B,EAAqC,OAArC;AAEA7C,QAAAA,MAAM,CAAC6C,KAAK,CAACC,UAAN,CAAiBhC,IAAlB,CAAN,CAA8BD,IAA9B,CAAmC,OAAnC;AACH,OATC,CAAF;AAWA5B,MAAAA,QAAQ,CAAC,QAAD,EAAW,YAAM;AACrB,YAAI4D,KAAJ;AAEAxD,QAAAA,UAAU,CAAC,YAAM;AACbwD,UAAAA,KAAK,GAAG;AACJK,YAAAA,KAAK,EAAE,KADH;AAEJJ,YAAAA,UAAU,EAAE;AAFR,WAAR;AAKAD,UAAAA,KAAK,CAACG,8BAAD,CAAL,GAA6B,IAAIC,GAAJ,CAAQ,EAAR,CAA7B;AACH,SAPS,CAAV;AASAlD,QAAAA,EAAE,CAAC,2DAAD,EAA8D,YAAM;AAClE2B,UAAAA,eAAe,CAACZ,IAAhB,CAAqB4B,GAArB,CAAyBK,IAAzB,CAA8BF,KAA9B,EAAqC,OAArC;AAEA7C,UAAAA,MAAM,CAAC6C,KAAK,CAACK,KAAP,CAAN,CAAoBrC,IAApB,CAAyB,IAAzB;AACH,SAJC,CAAF;AAMAd,QAAAA,EAAE,CAAC,sEAAD,EAAyE,YAAM;AAC7E8C,UAAAA,KAAK,CAACC,UAAN,CAAiBhC,IAAjB,GAAwB,OAAxB;AACAY,UAAAA,eAAe,CAACZ,IAAhB,CAAqB4B,GAArB,CAAyBK,IAAzB,CAA8BF,KAA9B,EAAqC,OAArC;AAEA7C,UAAAA,MAAM,CAAC6C,KAAK,CAACK,KAAP,CAAN,CAAoBrC,IAApB,CAAyB,KAAzB;AACH,SALC,CAAF;AAOAd,QAAAA,EAAE,CAAC,gEAAD,EAAmE,YAAM;AACvE8C,UAAAA,KAAK,CAACC,UAAN,CAAiBhC,IAAjB,GAAwB;AAAEA,YAAAA,IAAI,EAAE;AAAR,WAAxB;AACAY,UAAAA,eAAe,CAACZ,IAAhB,CAAqB4B,GAArB,CAAyBK,IAAzB,CAA8BF,KAA9B,EAAqC;AAAE/B,YAAAA,IAAI,EAAE,OAAR;AAAiBqC,YAAAA,IAAI,EAAE;AAAvB,WAArC;AAEAnD,UAAAA,MAAM,CAAC6C,KAAK,CAACK,KAAP,CAAN,CAAoBrC,IAApB,CAAyB,IAAzB;AACH,SALC,CAAF;AAMH,OA/BO,CAAR;AAgCH,KAjJO,CAAR;AAmJA5B,IAAAA,QAAQ,CAAC,kBAAD,EAAqB,YAAM;AAC/B,UAAImE,gBAAJ;AAEA/D,MAAAA,UAAU,CAAC,YAAM;AACb+D,QAAAA,gBAAgB,GAAGnC,0BAA0B,CAACmC,gBAA9C;AACH,OAFS,CAAV;AAIAnE,MAAAA,QAAQ,CAAC,SAAD,EAAY,YAAM;AACtBc,QAAAA,EAAE,CAAC,sDAAD,EAAyD,YAAM;AAC7DC,UAAAA,MAAM,CAACoD,gBAAgB,CAACC,OAAjB,CAAyBC,IAA1B,CAAN,CAAsCzC,IAAtC,CAA2C,MAA3C;AACH,SAFC,CAAF;AAIAd,QAAAA,EAAE,CAAC,gCAAD,EAAmC,YAAM;AACvCC,UAAAA,MAAM,CAACoD,gBAAgB,CAACC,OAAjB,CAAyBE,KAA1B,CAAN,CAAuC1C,IAAvC,CAA4C,IAA5C;AACH,SAFC,CAAF;AAGH,OARO,CAAR;AAUA5B,MAAAA,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAC7Bc,QAAAA,EAAE,CAAC,oDAAD,EAAuD,YAAM;AAC3DC,UAAAA,MAAM,CAACoD,gBAAgB,CAACI,cAAjB,CAAgCF,IAAjC,CAAN,CAA6CzC,IAA7C,CAAkD,SAAlD;AACH,SAFC,CAAF;AAIAd,QAAAA,EAAE,CAAC,oCAAD,EAAuC,YAAM;AAC3CC,UAAAA,MAAM,CAACoD,gBAAgB,CAACI,cAAjB,CAAgCD,KAAjC,CAAN,CAA8C1C,IAA9C,CAAmD,KAAnD;AACH,SAFC,CAAF,CAL6B,CAS7B;AACA;AACA;AACA;AACH,OAbO,CAAR;AAeA5B,MAAAA,QAAQ,CAAC,IAAD,EAAO,YAAM;AACjBc,QAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAM;AAChCC,UAAAA,MAAM,CAACoD,gBAAgB,CAACK,EAAjB,CAAoBC,GAArB,CAAN,CAAgC7C,IAAhC,CAAqC,EAArC;AACH,SAFC,CAAF;AAGH,OAJO,CAAR;AAMA5B,MAAAA,QAAQ,CAAC,MAAD,EAAS,YAAM;AACnBc,QAAAA,EAAE,CAAC,kCAAD,EAAqC,YAAM;AACzCC,UAAAA,MAAM,CAACoD,gBAAgB,CAACtC,IAAjB,CAAsBwC,IAAvB,CAAN,CAAmCzC,IAAnC,CAAwC,MAAxC;AACH,SAFC,CAAF;AAIAd,QAAAA,EAAE,CAAC,kCAAD,EAAqC,YAAM;AACzCC,UAAAA,MAAM,CAACoD,gBAAgB,CAACtC,IAAjB,CAAsB6C,SAAvB,CAAN,CAAwC9C,IAAxC,CAA6C,IAA7C;AACH,SAFC,CAAF;AAIAd,QAAAA,EAAE,CAAC,iCAAD,EAAoC,YAAM;AACxCC,UAAAA,MAAM,CAACoD,gBAAgB,CAACtC,IAAjB,CAAsB8C,QAAvB,CAAN,CAAuC/C,IAAvC,CAA4C,IAA5C;AACH,SAFC,CAAF;AAIAd,QAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAM;AACtCC,UAAAA,MAAM,CAACoD,gBAAgB,CAACtC,IAAjB,CAAsByC,KAAvB,CAAN,CAAoC1C,IAApC,CAAyC,IAAzC;AACH,SAFC,CAAF;AAGH,OAhBO,CAAR;AAkBAd,MAAAA,EAAE,CAAC,oEAAD,EAAuE,YAAM;AAC3EC,QAAAA,MAAM,CAACoD,gBAAgB,CAACS,gBAAjB,CAAkCC,aAAnC,CAAN,CAAwDjD,IAAxD,CAA6D,WAA7D;AACAb,QAAAA,MAAM,CAACoD,gBAAgB,CAACW,SAAjB,CAA2BD,aAA5B,CAAN,CAAiDjD,IAAjD,CAAsD,WAAtD;AACH,OAHC,CAAF;AAKAd,MAAAA,EAAE,CAAC,4DAAD,EAA+D,YAAM;AACnEC,QAAAA,MAAM,CAACoD,gBAAgB,CAACY,aAAjB,CAA+BF,aAAhC,CAAN,CAAqDjD,IAArD,CAA0D,eAA1D;AACH,OAFC,CAAF;AAIAd,MAAAA,EAAE,CAAC,mDAAD,EAAsD,YAAM;AAC1DC,QAAAA,MAAM,CAACoD,gBAAgB,CAACa,IAAjB,CAAsBH,aAAvB,CAAN,CAA4CjD,IAA5C,CAAiD,MAAjD;AACH,OAFC,CAAF;AAIAd,MAAAA,EAAE,CAAC,wEAAD,EAA2E,YAAM;AAC/EC,QAAAA,MAAM,CAACoD,gBAAgB,CAACtC,IAAjB,CAAsBgD,aAAvB,CAAN,CAA4C1D,aAA5C;AACH,OAFC,CAAF;AAIAnB,MAAAA,QAAQ,CAAC,SAAD,EAAY,YAAM;AACtBc,QAAAA,EAAE,CAAC,gEAAD,EAAmE,YAAM;AACvEC,UAAAA,MAAM,CAACoD,gBAAgB,CAACtC,IAAjB,CAAsBoD,OAAvB,CAAN,CAAsCrD,IAAtC,CAA2C,KAA3C;AACH,SAFC,CAAF;AAIAd,QAAAA,EAAE,CAAC,iFAAD,EAAoF,YAAM;AACxF,cAAMoE,wBAAwB,GAAGhD,kBAASC,GAAT,CAAa,0BAAb,CAAjC;;AACA+C,UAAAA,wBAAwB,CAAClC,UAAzB,CAAoC,CAApC,EAAuCiC,OAAvC,GAAiD,KAAjD;AAEAjD,UAAAA,0BAA0B,GAAG3B,yBAAgB4B,gBAAhB,CACzBiD,wBADyB,EAEzBhD,kBAASC,GAAT,CAAa,iBAAb,EAAgCC,UAFP,CAA7B;AAKA+B,UAAAA,gBAAgB,GAAGnC,0BAA0B,CAACmC,gBAA9C;AAEApD,UAAAA,MAAM,CAACoD,gBAAgB,CAACvB,eAAjB,CAAiCqC,OAAlC,CAAN,CAAiDrD,IAAjD,CAAsD,KAAtD;AACH,SAZC,CAAF;AAcAd,QAAAA,EAAE,CAAC,+EAAD,EAAkF,YAAM;AACtF,cAAMoE,wBAAwB,GAAGhD,kBAASC,GAAT,CAAa,0BAAb,CAAjC;;AACA+C,UAAAA,wBAAwB,CAAClC,UAAzB,CAAoC,CAApC,EAAuCiC,OAAvC,GAAiD,IAAjD;AAEAjD,UAAAA,0BAA0B,GAAG3B,yBAAgB4B,gBAAhB,CACzBiD,wBADyB,EAEzBhD,kBAASC,GAAT,CAAa,iBAAb,EAAgCC,UAFP,CAA7B;AAKA+B,UAAAA,gBAAgB,GAAGnC,0BAA0B,CAACmC,gBAA9C;AAEApD,UAAAA,MAAM,CAACoD,gBAAgB,CAACgB,iBAAjB,CAAmCF,OAApC,CAAN,CAAmDrD,IAAnD,CAAwD,IAAxD;AACH,SAZC,CAAF;AAaH,OAhCO,CAAR;AAkCA5B,MAAAA,QAAQ,CAAC,sBAAD,EAAyB,YAAM;AACnC,YAAIoF,6BAAJ;AAEAhF,QAAAA,UAAU,CAAC,YAAM;AACb,cAAMiF,oBAAoB,GAAGnD,kBAASC,GAAT,CAAa,6BAAb,CAA7B;;AACAiD,UAAAA,6BAA6B,GAAG/E,yBAAgB4B,gBAAhB,CAAiCoD,oBAAjC,CAAhC;AACAlB,UAAAA,gBAAgB,GAAGiB,6BAA6B,CAACjB,gBAAjD;AACH,SAJS,CAAV;AAMArD,QAAAA,EAAE,CAAC,4DAAD,EAA+D,YAAM;AACnEC,UAAAA,MAAM,CAACoD,gBAAgB,CAACmB,UAAjB,CAA4BT,aAA7B,CAAN,CAAkDjD,IAAlD,CAAuD,WAAvD;AACH,SAFC,CAAF;AAIAd,QAAAA,EAAE,CAAC,qEAAD,EAAwE,YAAM;AAC5EC,UAAAA,MAAM,CAACoD,gBAAgB,CAACoB,iBAAjB,CAAmCV,aAApC,CAAN,CAAyD1D,aAAzD;AACH,SAFC,CAAF;AAGH,OAhBO,CAAR;AAkBAnB,MAAAA,QAAQ,CAAC,0BAAD,EAA6B,YAAM;AACvC,YAAIoF,6BAAJ;AAEAhF,QAAAA,UAAU,CAAC,YAAM;AACb,cAAMoF,eAAe,GAAGtD,kBAASC,GAAT,CAAa,wBAAb,CAAxB;;AACAiD,UAAAA,6BAA6B,GAAG/E,yBAAgB4B,gBAAhB,CAAiCuD,eAAjC,CAAhC;AACArB,UAAAA,gBAAgB,GAAGiB,6BAA6B,CAACjB,gBAAjD;AACH,SAJS,CAAV;AAMArD,QAAAA,EAAE,CAAC,+EAAD,EAAkF,YAAM;AACtFC,UAAAA,MAAM,CAACoD,gBAAgB,CAACoB,iBAAjB,CAAmCE,cAApC,CAAN,CAA0D7D,IAA1D,CAA+D,IAA/D;AACH,SAFC,CAAF;AAIAd,QAAAA,EAAE,CAAC,+EAAD,EAAkF,YAAM;AACtFC,UAAAA,MAAM,CAACoD,gBAAgB,CAACuB,eAAjB,CAAiCD,cAAlC,CAAN,CAAwD7D,IAAxD,CAA6D,KAA7D;AACH,SAFC,CAAF;AAIAd,QAAAA,EAAE,CAAC,0DAAD,EAA6D,YAAM;AACjEC,UAAAA,MAAM,CAACoD,gBAAgB,CAACtC,IAAjB,CAAsB4D,cAAvB,CAAN,CAA6C7D,IAA7C,CAAkD,KAAlD;AACH,SAFC,CAAF;AAGH,OApBO,CAAR;AAqBH,KAlJO,CAAR;AAoJA5B,IAAAA,QAAQ,CAAC,yBAAD,EAA4B,YAAM;AACtC,UAAI2F,mBAAJ;AACA,UAAIC,mBAAJ;AAEA,UAAIC,sBAAJ;AACA,UAAIC,sBAAJ;AAEA1F,MAAAA,UAAU,CAAC,YAAM;AACbuF,QAAAA,mBAAmB,GAAGtF,yBAAgB0F,cAAhB,CAA+Bf,IAArD;AACAY,QAAAA,mBAAmB,GAAGvF,yBAAgB4B,gBAAhB,CAAiCC,kBAASC,GAAT,CAAa,mBAAb,CAAjC,CAAtB;AAEA0D,QAAAA,sBAAsB,GAAGxF,yBAAgB0F,cAAhB,CAA+BC,OAAxD;AACAF,QAAAA,sBAAsB,GAAGzF,yBAAgB4B,gBAAhB,CAAiCC,kBAASC,GAAT,CAAa,sBAAb,CAAjC,CAAzB;AACH,OANS,CAAV;AAQArB,MAAAA,EAAE,CAAC,yDAAD,EAA4D,YAAM;AAChEC,QAAAA,MAAM,CAAC6E,mBAAD,CAAN,CAA4B3E,cAA5B,CAA2C0E,mBAA3C;AACH,OAFC,CAAF;AAIA7E,MAAAA,EAAE,CAAC,gEAAD,EAAmE,YAAM;AACvEC,QAAAA,MAAM,CAAC+E,sBAAD,CAAN,CAA+B7E,cAA/B,CAA8C4E,sBAA9C;AACH,OAFC,CAAF;AAGH,KAtBO,CAAR;AAwBA7F,IAAAA,QAAQ,CAAC,sBAAD,EAAyB,YAAM;AACnC,UAAIiG,mBAAJ;AAEA7F,MAAAA,UAAU,CAAC,YAAM;AACb6F,QAAAA,mBAAmB,GAAGjE,0BAA0B,CAACiE,mBAAjD;AACH,OAFS,CAAV;AAIAnF,MAAAA,EAAE,CAAC,2DAAD,EAA8D,YAAM;AAClEC,QAAAA,MAAM,CAACkF,mBAAD,CAAN,CAA4B5D,WAA5B;AACH,OAFC,CAAF;AAIAvB,MAAAA,EAAE,CAAC,8BAAD,EAAiC,YAAM;AACrCC,QAAAA,MAAM,CAACkF,mBAAmB,CAACpE,IAArB,CAAN,CAAiCZ,cAAjC,CAAgDM,MAAhD;AACH,OAFC,CAAF;AAGH,KAdO,CAAR;AAeH,GApaO,CAAR;AAsaAvB,EAAAA,QAAQ,CAAC,UAAD,EAAa,YAAM;AACvB,QAAIgC,0BAAJ;AAEA5B,IAAAA,UAAU,CAAC,YAAM;AACb4B,MAAAA,0BAA0B,GAAG3B,yBAAgB4B,gBAAhB,CAAiCC,kBAASC,GAAT,CAAa,0BAAb,CAAjC,CAA7B;AACH,KAFS,CAAV,CAHuB,CAOvB;;AACArB,IAAAA,EAAE,CAAC,oCAAD,EAAuC,YAAM;AAC3CC,MAAAA,MAAM,CAACiB,0BAA0B,CAACkE,MAA3B,EAAD,CAAN,CAA4CjF,cAA5C,CAA2DkF,cAA3D;AACH,KAFC,CAAF;AAIAnG,IAAAA,QAAQ,CAAC,qBAAD,EAAwB,YAAM;AAClC,UAAMoG,kBAAkB,GAAGlE,kBAASC,GAAT,CAAa,uCAAb,CAA3B;;AACA,UAAMkE,uCAAuC,GAAGhG,yBAAgB4B,gBAAhB,CAAiCmE,kBAAjC,CAAhD;;AACA,UAAIxC,KAAJ;AAEAxD,MAAAA,UAAU,CAAC,YAAM;AACbwD,QAAAA,KAAK,GAAGyC,uCAAuC,CAACH,MAAxC,EAAR;AACH,OAFS,CAAV;AAIApF,MAAAA,EAAE,CAAC,uCAAD,EAA0C,YAAM;AAC9CC,QAAAA,MAAM,CAAC6C,KAAK,CAAC0C,aAAP,CAAN,CAA4B1E,IAA5B,CAAiC,IAAjC;AACH,OAFC,CAAF;AAGH,KAZO,CAAR;AAcA5B,IAAAA,QAAQ,CAAC,uBAAD,EAA0B,YAAM;AACpC,UAAIuG,sBAAJ;AACA,UAAIX,mBAAJ;AAEAxF,MAAAA,UAAU,CAAC,YAAM;AACb,YAAMoG,aAAa,GAAGtE,kBAASC,GAAT,CAAa,+BAAb,CAAtB;;AACAyD,QAAAA,mBAAmB,GAAGvF,yBAAgB4B,gBAAhB,CAAiCC,kBAASC,GAAT,CAAa,mBAAb,CAAjC,CAAtB;AACAoE,QAAAA,sBAAsB,GAAGlG,yBAAgB4B,gBAAhB,CAAiCuE,aAAjC,CAAzB,CAHa,CAKb;;AACA,YAAI,CAACC,0BAAiBC,mBAAjB,GAAuC1B,IAA5C,EAAkD;AAC9CyB,oCAAiBC,mBAAjB,GAAuCC,GAAvC,CAA2Cf,mBAA3C;AACH;;AACD,YAAI,CAACa,0BAAiBC,mBAAjB,GAAuCE,gBAA5C,EAA8D;AAC1DH,oCAAiBC,mBAAjB,GAAuCC,GAAvC,CAA2CJ,sBAA3C;AACH;AACJ,OAZS,CAAV;AAcAM,MAAAA,SAAS,CAAC,YAAM;AACZjG,yCAAwBsF,MAAxB,CAA+BY,SAA/B;AACH,OAFQ,CAAT;AAIA9G,MAAAA,QAAQ,CAAC,WAAD,EAAc,YAAM;AACxBI,QAAAA,UAAU,CAAC,YAAM;AACbwF,UAAAA,mBAAmB,CAACM,MAApB,CAA2B;AACvBa,YAAAA,iBAAiB,EAAE,CACf;AAAElF,cAAAA,IAAI,EAAE,OAAR;AAAiB2C,cAAAA,EAAE,EAAE;AAArB,aADe,EAEf;AAAE3C,cAAAA,IAAI,EAAE,MAAR;AAAgB2C,cAAAA,EAAE,EAAE;AAApB,aAFe;AADI,WAA3B;AAMH,SAPS,CAAV;AASA1D,QAAAA,EAAE,CAAC,4EAAD,EAA+E,YAAM;AACnFC,UAAAA,MAAM,CAACH,iCAAwBsF,MAAzB,CAAN,CAAuCc,qBAAvC,CAA6D,CAA7D;AACH,SAFC,CAAF;AAIAlG,QAAAA,EAAE,CAAC,iEAAD,EAAoE,YAAM;AACxEC,UAAAA,MAAM,CAACH,iCAAwBsF,MAAxB,CAA+BnG,IAA/B,CAAoCkH,KAApC,CAA0C,CAA1C,CAAD,CAAN,CAAqDC,eAArD;AACH,SAFC,CAAF;AAGH,OAjBO,CAAR;AAmBAlH,MAAAA,QAAQ,CAAC,cAAD,EAAiB,YAAM;AAC3BI,QAAAA,UAAU,CAAC,YAAM;AACbwF,UAAAA,mBAAmB,CAACM,MAApB;AACH,SAFS,CAAV;AAIApF,QAAAA,EAAE,CAAC,4EAAD,EAA+E,YAAM;AACnFC,UAAAA,MAAM,CAACH,iCAAwBsF,MAAzB,CAAN,CAAuCc,qBAAvC,CAA6D,CAA7D;AACH,SAFC,CAAF;AAIAlG,QAAAA,EAAE,CAAC,sDAAD,EAAyD,YAAM;AAC7D,cAAMqG,mBAAmB,GAAGvG,iCAAwBsF,MAAxB,CAA+BnG,IAA/B,CAAoCkH,KAApC,CAA0C,CAA1C,EAA6C,CAA7C,CAA5B;AACA,cAAMG,4BAA4B,GAAGxG,iCAAwBsF,MAAxB,CAA+BnG,IAA/B,CAAoCkH,KAApC,CAA0C,CAA1C,EAA6C,CAA7C,CAArC;AACA,cAAMI,uBAAuB,GAAGzG,iCAAwBsF,MAAxB,CAA+BnG,IAA/B,CAAoCkH,KAApC,CAA0C,CAA1C,EAA6C,CAA7C,CAAhC;AACA,cAAMK,mBAAmB,GAAG1G,iCAAwBsF,MAAxB,CAA+BnG,IAA/B,CAAoCkH,KAApC,CAA0C,CAA1C,EAA6C,CAA7C,CAA5B,CAJ6D,CAM7D;;AACAlG,UAAAA,MAAM,CAACoG,mBAAD,CAAN,CAA4BD,eAA5B,GAP6D,CAS7D;;AACAnG,UAAAA,MAAM,CAACqG,4BAA4B,CAACvF,IAA9B,CAAN,CAA0CD,IAA1C,CAA+C2E,sBAAsB,CAAC1E,IAAtE;AACAd,UAAAA,MAAM,CAACqG,4BAA4B,CAAC5G,MAA9B,CAAN,CAA4CoB,IAA5C,CAAiD2E,sBAAsB,CAAC/F,MAAxE,EAX6D,CAa7D;AACA;;AACAO,UAAAA,MAAM,CAACsG,uBAAD,CAAN,CAAgCvE,OAAhC,CAAwC,4BAAxC,EAf6D,CAiB7D;;AACA/B,UAAAA,MAAM,CAACuG,mBAAD,CAAN,CAA4BxE,OAA5B,CAAoCjC,SAApC;AACH,SAnBC,CAAF;AAoBH,OA7BO,CAAR;AA8BH,KAvEO,CAAR;AAwEH,GAlGO,CAAR;AAoGAb,EAAAA,QAAQ,CAAC,KAAD,EAAQ,YAAM;AAClB,QAAIgC,0BAAJ;AAEA5B,IAAAA,UAAU,CAAC,YAAM;AACbC,+BAAgBkH,SAAhB,CAA0BC,GAA1B,GAAgC;AAC5BrF,QAAAA,GAAG,EAAErC,IAAI,CAACW,EAAL,GAAUE,eAAV,CAA0B,IAAI8G,OAAJ,CAAY,UAACC,OAAD,EAAa;AACpDA,UAAAA,OAAO,CAAC;AAAE7F,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAP;AACH,SAF8B,CAA1B;AADuB,OAAhC;AAMAG,MAAAA,0BAA0B,GAAG3B,yBAAgB4B,gBAAhB,CAAiCC,kBAASC,GAAT,CAAa,0BAAb,CAAjC,CAA7B;AACH,KARS,CAAV;AAUArB,IAAAA,EAAE,CAAC,yDAAD,EAA4D,YAAM;AAChE,eAASM,WAAT,GAAuB;AACnBY,QAAAA,0BAA0B,CAACG,GAA3B;AACH;;AAEDpB,MAAAA,MAAM,CAACK,WAAD,CAAN,CAAoBC,YAApB,CAAiC,+BAAjC;AACH,KANC,CAAF;AAQAP,IAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAM;AAChC,UAAM6G,YAAY,GAAG3F,0BAA0B,CAC1CG,GADgB,CACZ,WADY,CAArB;AAGApB,MAAAA,MAAM,CAAC4G,YAAY,CAACC,IAAd,CAAN,CAA0B3G,cAA1B,CAAyCuC,QAAzC;AACH,KALC,CAAF;AAOA1C,IAAAA,EAAE,CAAC,0CAAD,EAA6C,YAAM;AACjDkB,MAAAA,0BAA0B,CAACG,GAA3B,CAA+B,WAA/B;AAEApB,MAAAA,MAAM,CAACV,yBAAgBkH,SAAhB,CAA0BC,GAA1B,CAA8BrF,GAA/B,CAAN,CAA0C0F,cAA1C,CAAyD,wDAAzD,EAAmH;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAnH;AACH,KAJC,CAAF;AAMAhH,IAAAA,EAAE,CAAC,yDAAD,EAA4D;AAAA,aAAMkB,0BAA0B,CAACG,GAA3B,CAA+B,WAA/B,EAC/DyF,IAD+D,CAC1D,UAACG,gBAAD,EAAsB;AACxBhH,QAAAA,MAAM,CAACgH,gBAAgB,CAAClG,IAAlB,CAAN,CAA8BD,IAA9B,CAAmC,8CAAnC;AACH,OAH+D,CAAN;AAAA,KAA5D,CAAF;AAKAd,IAAAA,EAAE,CAAC,mEAAD,EAAsE,YAAM;AAC1ET,+BAAgBkH,SAAhB,CAA0BC,GAA1B,CAA8BrF,GAA9B,GAAoCrC,IAAI,CAACW,EAAL,GAC/BE,eAD+B,CACf8G,OAAO,CAACO,MAAR,CAAe;AAC5BC,QAAAA,UAAU,EAAE,WADgB;AAE5BC,QAAAA,cAAc,EAAE,GAFY;AAG5BC,QAAAA,MAAM,EAAE,OAHoB;AAI5BC,QAAAA,OAAO,EAAE;AAJmB,OAAf,CADe,CAApC;AAQA,aAAOpG,0BAA0B,CAACG,GAA3B,CAA+B,WAA/B,EACFkG,KADE,CACI,UAACC,gBAAD,EAAsB;AACzBvH,QAAAA,MAAM,CAACuH,gBAAD,CAAN,CAAyB1G,IAAzB,CAA8B,uDAA9B;AACH,OAHE,CAAP;AAIH,KAbC,CAAF;AAeAd,IAAAA,EAAE,CAAC,qEAAD,EAAwE,YAAM;AAC5E,UAAMyH,eAAe,GAAG,kBAAxB;AAEAlI,+BAAgBkH,SAAhB,CAA0BC,GAA1B,CAA8BrF,GAA9B,GAAoCrC,IAAI,CAACW,EAAL,GAAUE,eAAV,CAA0B8G,OAAO,CAACO,MAAR,CAAeO,eAAf,CAA1B,CAApC;AAEA,aAAOvG,0BAA0B,CAACG,GAA3B,CAA+B,WAA/B,EACFkG,KADE,CACI,UAACC,gBAAD,EAAsB;AACzBvH,QAAAA,MAAM,CAACuH,gBAAD,CAAN,CAAyB1G,IAAzB,CAA8B2G,eAA9B;AACH,OAHE,CAAP;AAIH,KATC,CAAF;AAWAvI,IAAAA,QAAQ,CAAC,UAAD,EAAa,YAAM;AACvBc,MAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAM;AAC/C,YAAM0H,kBAAkB,GAAGtG,kBAASC,GAAT,CAAa,mBAAb,CAA3B;;AACA9B,iCAAgBkH,SAAhB,CAA0BC,GAA1B,CAA8BrF,GAA9B,GAAoCrC,IAAI,CAACW,EAAL,GAAUE,eAAV,CAA0B8G,OAAO,CAACC,OAAR,CAAgBc,kBAAhB,CAA1B,CAApC;AAEA,eAAOxG,0BAA0B,CAACG,GAA3B,CAA+B,CAAC,KAAD,EAAQ,KAAR,CAA/B,EACFyF,IADE,CACG,UAACa,qBAAD,EAA2B;AAC7B1H,UAAAA,MAAM,CAAC0H,qBAAD,CAAN,CAA8BxH,cAA9B,CAA6CP,wBAA7C;AACH,SAHE,CAAP;AAIH,OARC,CAAF;AAUAI,MAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAM;AAC/C,YAAM0H,kBAAkB,GAAGtG,kBAASC,GAAT,CAAa,mBAAb,CAA3B;;AACA9B,iCAAgBkH,SAAhB,CAA0BC,GAA1B,CAA8BrF,GAA9B,GAAoCrC,IAAI,CAACW,EAAL,GAAUE,eAAV,CAA0B8G,OAAO,CAACC,OAAR,CAAgBc,kBAAhB,CAA1B,CAApC;AAEA,eAAOxG,0BAA0B,CAACG,GAA3B,CAA+B,CAAC,KAAD,EAAQ,KAAR,CAA/B,EACFyF,IADE,CACG,YAAM;AACR7G,UAAAA,MAAM,CAACV,yBAAgBkH,SAAhB,CAA0BC,GAA1B,CAA8BrF,GAA/B,CAAN,CAA0C0F,cAA1C,CAAyD,8CAAzD,EAAyG;AAAEa,YAAAA,MAAM,EAAE,CAAC,iBAAD,CAAV;AAA+BZ,YAAAA,MAAM,EAAE;AAAvC,WAAzG;AACH,SAHE,CAAP;AAIH,OARC,CAAF;AASH,KApBO,CAAR;AAqBH,GAtFO,CAAR;AAwFA9H,EAAAA,QAAQ,CAAC,MAAD,EAAS,YAAM;AACnB,QAAMwI,kBAAkB,GAAGtG,kBAASC,GAAT,CAAa,mBAAb,CAA3B;;AACA,QAAIH,0BAAJ;AAEA5B,IAAAA,UAAU,CAAC,YAAM;AACbC,+BAAgBkH,SAAhB,CAA0BC,GAA1B,GAAgC;AAC5BrF,QAAAA,GAAG,EAAErC,IAAI,CAACW,EAAL,GAAUE,eAAV,CAA0B,IAAI8G,OAAJ,CAAY,UAACC,OAAD,EAAa;AACpDA,UAAAA,OAAO,CAACc,kBAAD,CAAP;AACH,SAF8B,CAA1B;AADuB,OAAhC;AAMAxG,MAAAA,0BAA0B,GAAG3B,yBAAgB4B,gBAAhB,CAAiCC,kBAASC,GAAT,CAAa,0BAAb,CAAjC,CAA7B;AACH,KARS,CAAV;AAUArB,IAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAM;AAC7BC,MAAAA,MAAM,CAACiB,0BAA0B,CAAC2G,IAA5B,CAAN,CAAwC1H,cAAxC,CAAuDuC,QAAvD;AACH,KAFC,CAAF;AAIA1C,IAAAA,EAAE,CAAC,uCAAD,EAA0C,YAAM;AAC9CkB,MAAAA,0BAA0B,CAAC2G,IAA3B;AAEA5H,MAAAA,MAAM,CAACV,yBAAgBkH,SAAhB,CAA0BC,GAA1B,CAA8BrF,GAA/B,CAAN,CAA0CyG,UAA1C;AACH,KAJC,CAAF;AAMA9H,IAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAM;AAChCC,MAAAA,MAAM,CAACiB,0BAA0B,CAAC2G,IAA3B,EAAD,CAAN,CAA0C1H,cAA1C,CAAyDwG,OAAzD;AACH,KAFC,CAAF;AAIA3G,IAAAA,EAAE,CAAC,sEAAD,EAAyE,YAAM;AAC7EkB,MAAAA,0BAA0B,CAAC2G,IAA3B;AAEA5H,MAAAA,MAAM,CAACV,yBAAgBkH,SAAhB,CAA0BC,GAA1B,CAA8BrF,GAA/B,CAAN,CAA0C0F,cAA1C,CAAyD,8CAAzD,EAAyG;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAzG;AACH,KAJC,CAAF;AAMAhH,IAAAA,EAAE,CAAC,yCAAD,EAA4C;AAAA,aAAMkB,0BAA0B,CAAC2G,IAA3B,GAC/Cf,IAD+C,CAC1C,UAACa,qBAAD,EAA2B;AAC7B1H,QAAAA,MAAM,CAAC0H,qBAAD,CAAN,CAA8BxH,cAA9B,CAA6CP,wBAA7C;AACH,OAH+C,CAAN;AAAA,KAA5C,CAAF;AAKAI,IAAAA,EAAE,CAAC,oEAAD,EAAuE;AAAA,aAAMkB,0BAA0B,CAAC2G,IAA3B,GAC1Ef,IAD0E,CACrE,YAAM;AACR,YAAMiB,kBAAkB,GAAGnI,yBAAgBwF,MAAhB,CAAuBnG,IAAvB,CAA4BkH,KAA5B,CAAkC,CAAlC,CAA3B;AAEAlG,QAAAA,MAAM,CAAC8H,kBAAD,CAAN,CAA2B3B,eAA3B;AACH,OAL0E,CAAN;AAAA,KAAvE,CAAF;AAOApG,IAAAA,EAAE,CAAC,kFAAD,EAAqF,YAAM;AACzFkB,MAAAA,0BAA0B,CACrB0G,MADL,GAEKI,EAFL,CAEQ,MAFR,EAEgBC,IAFhB,CAEqB,MAFrB,EAGKJ,IAHL;AAKA5H,MAAAA,MAAM,CAACV,yBAAgBkH,SAAhB,CAA0BC,GAA1B,CAA8BrF,GAA/B,CAAN,CAA0C0F,cAA1C,CAAyD,8CAAzD,EAAyG;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkBY,QAAAA,MAAM,EAAE,CAAC,gBAAD;AAA1B,OAAzG;AACH,KAPC,CAAF;AASA5H,IAAAA,EAAE,CAAC,gEAAD,EAAmE,YAAM;AACvEC,MAAAA,MAAM,CAACiB,0BAA0B,CAAC0G,MAA5B,CAAN,CAA0C/E,GAA1C,CAA8C/B,IAA9C,CAAmDI,0BAAnD;AACH,KAFC,CAAF;AAIAlB,IAAAA,EAAE,CAAC,qEAAD,EAAwE,YAAM;AAC5EkB,MAAAA,0BAA0B,CACrB0G,MADL,GACcI,EADd,CACiB,MADjB,EACyBC,IADzB,CAC8B,MAD9B,EAEKJ,IAFL;AAIA3G,MAAAA,0BAA0B,CAAC2G,IAA3B;AAEA5H,MAAAA,MAAM,CAACV,yBAAgBkH,SAAhB,CAA0BC,GAA1B,CAA8BrF,GAA/B,CAAN,CAA0C0F,cAA1C,CAAyD,8CAAzD,EAAyG;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAzG;AACA/G,MAAAA,MAAM,CAACV,yBAAgBkH,SAAhB,CAA0BC,GAA1B,CAA8BrF,GAA/B,CAAN,CAA0C0F,cAA1C,CAAyD,8CAAzD,EAAyG;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkBY,QAAAA,MAAM,EAAE,CAAC,gBAAD;AAA1B,OAAzG;AACH,KATC,CAAF;AAWA5H,IAAAA,EAAE,CAAC,iCAAD,EAAoC,YAAM;AACxCkB,MAAAA,0BAA0B,CACrB0G,MADL,GAEKI,EAFL,CAEQ,MAFR,EAGKC,IAHL,CAGU,MAHV,EAIKL,MAJL,GAKKI,EALL,CAKQ,UALR,EAMKE,MANL,CAMY,OANZ,EAOKL,IAPL;AASA5H,MAAAA,MAAM,CAACV,yBAAgBkH,SAAhB,CAA0BC,GAA1B,CAA8BrF,GAA/B,CAAN,CAA0C0F,cAA1C,CAAyD,8CAAzD,EAAyG;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkBY,QAAAA,MAAM,EAAE,CAAC,gBAAD,EAAmB,mBAAnB;AAA1B,OAAzG;AACH,KAXC,CAAF;AAaA5H,IAAAA,EAAE,CAAC,kCAAD,EAAqC,YAAM;AACzCkB,MAAAA,0BAA0B,CACrB0G,MADL,GAEKI,EAFL,CAEQ,MAFR,EAGKG,QAHL,CAGc,MAHd,EAGsB,MAHtB,EAIKN,IAJL;AAMA5H,MAAAA,MAAM,CAACV,yBAAgBkH,SAAhB,CAA0BC,GAA1B,CAA8BrF,GAA/B,CAAN,CAA0C0F,cAA1C,CAAyD,8CAAzD,EAAyG;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkBY,QAAAA,MAAM,EAAE,CAAC,gBAAD;AAA1B,OAAzG;AACH,KARC,CAAF;AAUA5H,IAAAA,EAAE,CAAC,0CAAD,EAA6C,YAAM;AACjDkB,MAAAA,0BAA0B,CACrB0G,MADL,GAEKI,EAFL,CAEQ,MAFR,EAGKG,QAHL,CAGc,MAHd,EAGsB,MAHtB,EAIKP,MAJL,GAKKI,EALL,CAKQ,UALR,EAMKG,QANL,CAMc,OANd,EAMuB,OANvB,EAOKN,IAPL;AASA5H,MAAAA,MAAM,CAACV,yBAAgBkH,SAAhB,CAA0BC,GAA1B,CAA8BrF,GAA/B,CAAN,CAA0C0F,cAA1C,CAAyD,8CAAzD,EAAyG;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkBY,QAAAA,MAAM,EAAE,CAAC,gBAAD,EAAmB,sBAAnB;AAA1B,OAAzG;AACH,KAXC,CAAF;AAaA5H,IAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAM;AACtCkB,MAAAA,0BAA0B,CACrB0G,MADL,GAEKQ,SAFL,CAEe,IAFf,EAGKJ,EAHL,CAGQ,MAHR,EAIKC,IAJL,CAIU,MAJV,EAKKL,MALL,GAMKQ,SANL,CAMe,IANf,EAOKJ,EAPL,CAOQ,UAPR,EAQKK,KARL,CAQW,OARX,EASKR,IATL;AAWA5H,MAAAA,MAAM,CAACV,yBAAgBkH,SAAhB,CAA0BC,GAA1B,CAA8BrF,GAA/B,CAAN,CAA0C0F,cAA1C,CAAyD,8CAAzD,EAAyG;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkBY,QAAAA,MAAM,EAAE,CAAC,gBAAD,EAAmB,sBAAnB,CAA1B;AAAsEU,QAAAA,YAAY,EAAE;AAApF,OAAzG;AACH,KAbC,CAAF;AAeAtI,IAAAA,EAAE,CAAC,yCAAD,EAA4C,YAAM;AAChDkB,MAAAA,0BAA0B,CACrB2G,IADL,CACU;AAAED,QAAAA,MAAM,EAAE7H;AAAV,OADV;AAGAE,MAAAA,MAAM,CAACV,yBAAgBkH,SAAhB,CAA0BC,GAA1B,CAA8BrF,GAA/B,CAAN,CAA0C0F,cAA1C,CAAyD,8CAAzD,EAAyG;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAzG;AACH,KALC,CAAF;AAOAhH,IAAAA,EAAE,CAAC,yDAAD,EAA4D,YAAM;AAChE,UAAMuI,OAAO,GAAGrH,0BAA0B,CAAC0G,MAA3B,EAAhB;AACAW,MAAAA,OAAO,CAACH,SAAR,CAAkB,IAAlB;AACAG,MAAAA,OAAO,CAACP,EAAR,CAAW,MAAX,EAAmBC,IAAnB,CAAwB,MAAxB;AACAM,MAAAA,OAAO,CAACP,EAAR,CAAW,UAAX,EAAuBK,KAAvB,CAA6B,OAA7B;AACAE,MAAAA,OAAO,CAACV,IAAR;AAEA5H,MAAAA,MAAM,CAACV,yBAAgBkH,SAAhB,CAA0BC,GAA1B,CAA8BrF,GAA/B,CAAN,CAA0C0F,cAA1C,CAAyD,8CAAzD,EAAyG;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkBY,QAAAA,MAAM,EAAE,CAAC,gBAAD,EAAmB,sBAAnB,CAA1B;AAAsEU,QAAAA,YAAY,EAAE;AAApF,OAAzG;AACH,KARC,CAAF;AASH,GAzIO,CAAR;AA2IApJ,EAAAA,QAAQ,CAAC,OAAD,EAAU,YAAM;AACpB,QAAMwI,kBAAkB,GAAGtG,kBAASC,GAAT,CAAa,mBAAb,CAA3B;;AACA,QAAIH,0BAAJ;AAEA5B,IAAAA,UAAU,CAAC,YAAM;AACbC,+BAAgBkH,SAAhB,CAA0BC,GAA1B,GAAgC;AAC5BrF,QAAAA,GAAG,EAAErC,IAAI,CAACW,EAAL,GAAUE,eAAV,CAA0B,IAAI8G,OAAJ,CAAY,UAACC,OAAD,EAAa;AACpDA,UAAAA,OAAO,CAACc,kBAAD,CAAP;AACH,SAF8B,CAA1B;AADuB,OAAhC;AAMAxG,MAAAA,0BAA0B,GAAG3B,yBAAgB4B,gBAAhB,CAAiCC,kBAASC,GAAT,CAAa,0BAAb,CAAjC,CAA7B;AACH,KARS,CAAV;AAUArB,IAAAA,EAAE,CAAC,oBAAD,EAAuB,YAAM;AAC3BC,MAAAA,MAAM,CAACiB,0BAA0B,CAACsH,KAA5B,CAAN,CAAyCrI,cAAzC,CAAwDuC,QAAxD;AACH,KAFC,CAAF;AAIA1C,IAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAM;AAC/CC,MAAAA,MAAM,CAACiB,0BAA0B,CAACsH,KAA3B,EAAD,CAAN,CAA2C3F,GAA3C,CAA+C/B,IAA/C,CAAoDI,0BAApD;AACH,KAFC,CAAF;AAIAlB,IAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAM;AACtC,UAAMyI,gBAAgB,GAAGvH,0BAA0B,CAACsH,KAA3B,EAAzB;AAEAvI,MAAAA,MAAM,CAACwI,gBAAgB,CAAC1H,IAAlB,CAAN,CAA8BD,IAA9B,CAAmCI,0BAA0B,CAACH,IAA9D;AACAd,MAAAA,MAAM,CAACwI,gBAAgB,CAAC/I,MAAlB,CAAN,CAAgCoB,IAAhC,CAAqCI,0BAA0B,CAACxB,MAAhE;AACAO,MAAAA,MAAM,CAACwI,gBAAgB,CAACxH,UAAlB,CAAN,CAAoCH,IAApC,CAAyCI,0BAA0B,CAACD,UAApE;AACAhB,MAAAA,MAAM,CAACwI,gBAAgB,CAACrI,WAAlB,CAAN,CAAqCU,IAArC,CAA0CI,0BAA0B,CAACd,WAArE;AACAH,MAAAA,MAAM,CAACwI,gBAAgB,CAAC9G,eAAlB,CAAN,CAAyCb,IAAzC,CAA8CI,0BAA0B,CAACS,eAAzE;AACH,KARC,CAAF;AAUA3B,IAAAA,EAAE,CAAC,kCAAD,EAAqC,YAAM;AACzC,UAAMyI,gBAAgB,GAAGvH,0BAA0B,CAACsH,KAA3B,EAAzB;AAEAvI,MAAAA,MAAM,CAACwI,gBAAgB,CAACF,OAAlB,CAAN,CAAiC1F,GAAjC,CAAqC/B,IAArC,CAA0CI,0BAA0B,CAACqH,OAArE;AACH,KAJC,CAAF;AAMAvI,IAAAA,EAAE,CAAC,+CAAD,EAAkD,YAAM;AACtD,UAAMyI,gBAAgB,GAAGvH,0BAA0B,CAACsH,KAA3B,EAAzB;AAEAC,MAAAA,gBAAgB,CAACZ,IAAjB;AAEA5H,MAAAA,MAAM,CAACV,yBAAgBkH,SAAhB,CAA0BC,GAA1B,CAA8BrF,GAA/B,CAAN,CAA0C0F,cAA1C,CAAyD,8CAAzD,EAAyG;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAzG;AACH,KANC,CAAF;AAOH,GA7CO,CAAR;AA+CA9H,EAAAA,QAAQ,CAAC,QAAD,EAAW,YAAM;AACrB,QAAIwJ,aAAJ;AACA,QAAIC,WAAJ;AACA,QAAI7F,KAAJ;AACA,QAAIgC,mBAAJ;AAEAxF,IAAAA,UAAU,CAAC,YAAM;AACb,UAAMsJ,mBAAmB,GAAGxH,kBAASC,GAAT,CAAa,sBAAb,CAA5B;;AAEAqH,MAAAA,aAAa,GAAG1J,IAAI,CAACW,EAAL,GAAUE,eAAV,CAA0B,IAAI8G,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC/DA,QAAAA,OAAO,CAAC;AAAE7F,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAP;AACH,OAFyC,CAA1B,CAAhB;AAGA4H,MAAAA,WAAW,GAAG3J,IAAI,CAACW,EAAL,GAAUE,eAAV,CAA0B,IAAI8G,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC7DA,QAAAA,OAAO,CAAC;AAAE7F,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAP;AACH,OAFuC,CAA1B,CAAd;AAIAxB,+BAAgBkH,SAAhB,CAA0BC,GAA1B,GAAgC;AAC5BmC,QAAAA,MAAM,EAAEH,aADoB;AAE5BI,QAAAA,IAAI,EAAEH;AAFsB,OAAhC;AAKA7D,MAAAA,mBAAmB,GAAGvF,yBAAgB4B,gBAAhB,CAAiCC,kBAASC,GAAT,CAAa,mBAAb,CAAjC,CAAtB;;AAfa,UAiBPgE,KAjBO,GAiBC;AACV,uBAAc;AAAA;;AACV,aAAKtC,UAAL,GAAkB,EAAlB;AACA,aAAKE,8BAAL,IAA4B,IAAIC,GAAJ,CAAQ,EAAR,CAA5B;AACA,aAAK6F,kCAAL,GAA0C/J,IAAI,CAACW,EAAL,GAAUE,eAAV,CAA0B,EAA1B,CAA1C;AACA,aAAKmJ,wCAAL,GAAgDhK,IAAI,CAACW,EAAL,GAAUE,eAAV,CAA0B,EAA1B,CAAhD;AACA,aAAKoJ,sBAAL,GAA8BjK,IAAI,CAACW,EAAL,GAAUE,eAAV,CAA0B,EAA1B,CAA9B;AACH,OAxBQ;;AA0BbiD,MAAAA,KAAK,GAAG,IAAIuC,KAAJ,EAAR;AAEA5E,MAAAA,MAAM,CAACiB,IAAP,CAAYkH,mBAAZ,EAAiCM,OAAjC,CAAyC,UAACC,GAAD,EAAS;AAC9CrG,QAAAA,KAAK,CAACC,UAAN,CAAiBoG,GAAjB,IAAwBP,mBAAmB,CAACO,GAAD,CAA3C;AACArG,QAAAA,KAAK,CAACqG,GAAD,CAAL,GAAaP,mBAAmB,CAACO,GAAD,CAAhC;AACH,OAHD;AAKA1I,MAAAA,MAAM,CAAC2I,cAAP,CAAsBtG,KAAtB,EAA6B,iBAA7B,EAAgD;AAAEuG,QAAAA,KAAK,EAAEvE;AAAT,OAAhD;AACH,KAlCS,CAAV;AAoCA5F,IAAAA,QAAQ,CAAC,QAAD,EAAW,YAAM;AACrBc,MAAAA,EAAE,CAAC,2CAAD,EAA8C,YAAM;AAClDC,QAAAA,MAAM,CAAC6E,mBAAmB,CAACwE,IAApB,CAAyBxG,KAAzB,CAAD,CAAN,CAAwC3C,cAAxC,CAAuDwG,OAAvD;AACH,OAFC,CAAF;AAIA3G,MAAAA,EAAE,CAAC,0CAAD,EAA6C,YAAM;AACjD8E,QAAAA,mBAAmB,CAACwE,IAApB,CAAyBxG,KAAzB;AAEA7C,QAAAA,MAAM,CAACyI,aAAD,CAAN,CAAsBZ,UAAtB;AACH,OAJC,CAAF;AAMA9H,MAAAA,EAAE,CAAC,2DAAD,EAA8D,YAAM;AAClE,YAAMuJ,eAAe,GAAGnI,kBAASC,GAAT,CAAa,wBAAb,CAAxB;;AAEAyD,QAAAA,mBAAmB,CAACwE,IAApB,CAAyBxG,KAAzB;AAEA7C,QAAAA,MAAM,CAACyI,aAAa,CAACzJ,IAAd,CAAmBkH,KAAnB,CAAyB,CAAzB,EAA4B,CAA5B,CAAD,CAAN,CAAuCnE,OAAvC,CAA+CuH,eAA/C;AACH,OANC,CAAF;AAQAvJ,MAAAA,EAAE,CAAC,oDAAD,EAAuD,YAAM;AAC3D,YAAMuJ,eAAe,GAAGnI,kBAASC,GAAT,CAAa,wBAAb,CAAxB;;AACAkI,QAAAA,eAAe,CAACC,OAAhB,GAA0B,EAA1B;AAEA1G,QAAAA,KAAK,CAACC,UAAN,CAAiByG,OAAjB,GAA2B,EAA3B;AACA1E,QAAAA,mBAAmB,CAACwE,IAApB,CAAyBxG,KAAzB;AAEA7C,QAAAA,MAAM,CAACyI,aAAa,CAACzJ,IAAd,CAAmBkH,KAAnB,CAAyB,CAAzB,EAA4B,CAA5B,EAA+BqD,OAAhC,CAAN,CAA+CxH,OAA/C,CAAuDuH,eAAe,CAACC,OAAvE;AACH,OARC,CAAF;AAUAxJ,MAAAA,EAAE,CAAC,0CAAD,EAA6C,YAAM;AACjD,YAAMuJ,eAAe,GAAGnI,kBAASC,GAAT,CAAa,wBAAb,CAAxB;;AACA,eAAOkI,eAAe,CAACC,OAAvB;AAEA1G,QAAAA,KAAK,CAACC,UAAN,CAAiByG,OAAjB,GAA2BzJ,SAA3B;AACA+E,QAAAA,mBAAmB,CAACwE,IAApB,CAAyBxG,KAAzB;AAEA7C,QAAAA,MAAM,CAACyI,aAAa,CAACzJ,IAAd,CAAmBkH,KAAnB,CAAyB,CAAzB,EAA4B,CAA5B,EAA+BqD,OAAhC,CAAN,CAA+CxH,OAA/C,CAAuDuH,eAAe,CAACC,OAAvE;AACH,OARC,CAAF;AAUAxJ,MAAAA,EAAE,CAAC,qCAAD,EAAwC,YAAM;AAC5C,YAAMuJ,eAAe,GAAGnI,kBAASC,GAAT,CAAa,wBAAb,CAAxB;;AACA,eAAOkI,eAAe,CAACC,OAAvB;AAEA1G,QAAAA,KAAK,CAACC,UAAN,CAAiByG,OAAjB,GAA2B,IAA3B;AACA1E,QAAAA,mBAAmB,CAACwE,IAApB,CAAyBxG,KAAzB;AAEA7C,QAAAA,MAAM,CAACyI,aAAa,CAACzJ,IAAd,CAAmBkH,KAAnB,CAAyB,CAAzB,EAA4B,CAA5B,EAA+BqD,OAAhC,CAAN,CAA+CxH,OAA/C,CAAuDuH,eAAe,CAACC,OAAvE;AACH,OARC,CAAF;AAUAxJ,MAAAA,EAAE,CAAC,yCAAD,EAA4C,YAAM;AAChD8E,QAAAA,mBAAmB,CAACwE,IAApB,CAAyBxG,KAAzB;AAEA7C,QAAAA,MAAM,CAACyI,aAAa,CAACzJ,IAAd,CAAmBkH,KAAnB,CAAyB,CAAzB,EAA4B,CAA5B,CAAD,CAAN,CAAuCrF,IAAvC,CAA4CM,kBAASC,GAAT,CAAa,sBAAb,EAAqCoI,IAAjF;AACH,OAJC,CAAF;AAMAzJ,MAAAA,EAAE,CAAC,+EAAD,EAAkF,YAAM;AACtF,eAAO8C,KAAK,CAACC,UAAN,CAAiB0G,IAAxB;AACA3E,QAAAA,mBAAmB,CAACwE,IAApB,CAAyBxG,KAAzB;AACA7C,QAAAA,MAAM,CAACyI,aAAa,CAACzJ,IAAd,CAAmBkH,KAAnB,CAAyB,CAAzB,EAA4B,CAA5B,CAAD,CAAN,CAAuCrF,IAAvC,CAA4CM,kBAASC,GAAT,CAAa,sBAAb,EAAqCoI,IAAjF;AACH,OAJC,CAAF;AAMAzJ,MAAAA,EAAE,CAAC,uFAAD,EAA0F,YAAM;AAC9F8E,QAAAA,mBAAmB,CAACwE,IAApB,CAAyBxG,KAAzB;AAEA7C,QAAAA,MAAM,CAACyI,aAAa,CAACzJ,IAAd,CAAmBkH,KAAnB,CAAyB,CAAzB,EAA4B,CAA5B,CAAD,CAAN,CAAuCrF,IAAvC,CAA4C,IAA5C;AACH,OAJC,CAAF;AAMAd,MAAAA,EAAE,CAAC,uCAAD,EAA0C,YAAM;AAC9C;AACA,eAAO8C,KAAK,CAACY,EAAb;AAEAoB,QAAAA,mBAAmB,CAACwE,IAApB,CAAyBxG,KAAzB;AAEA7C,QAAAA,MAAM,CAAC0I,WAAD,CAAN,CAAoBb,UAApB;AACH,OAPC,CAAF;AASA9H,MAAAA,EAAE,CAAC,2DAAD,EAA8D,YAAM;AAClE8C,QAAAA,KAAK,CAACiG,kCAAN,CAAyClJ,eAAzC,CAAyD,CAAC,mBAAD,CAAzD;AACAiD,QAAAA,KAAK,CAACC,UAAN,CAAiBkD,iBAAjB,GAAqC,IAAI/C,GAAJ,CAAQ,CACzC;AAAEnC,UAAAA,IAAI,EAAE,OAAR;AAAiB2C,UAAAA,EAAE,EAAE;AAArB,SADyC,EAEzC;AAAE3C,UAAAA,IAAI,EAAE,MAAR;AAAgB2C,UAAAA,EAAE,EAAE;AAApB,SAFyC,CAAR,CAArC;AAKAoB,QAAAA,mBAAmB,CAACwE,IAApB,CAAyBxG,KAAzB;AAEA7C,QAAAA,MAAM,CAACyI,aAAa,CAACzJ,IAAd,CAAmBkH,KAAnB,CAAyB,CAAzB,EAA4B,CAA5B,EAA+BF,iBAAhC,CAAN,CACKjE,OADL,CACa,CAAC;AAAE0B,UAAAA,EAAE,EAAE;AAAN,SAAD,EAAwB;AAAEA,UAAAA,EAAE,EAAE;AAAN,SAAxB,CADb;AAEH,OAXC,CAAF;AAaA1D,MAAAA,EAAE,CAAC,uDAAD,EAA0D,YAAM;AAC9D8C,QAAAA,KAAK,CAACiG,kCAAN,CAAyClJ,eAAzC,CAAyD,CAAC,mBAAD,CAAzD;AACAiD,QAAAA,KAAK,CAACC,UAAN,CAAiBkD,iBAAjB,GAAqC,IAAI/C,GAAJ,CAAQ,CACzC;AAAEnC,UAAAA,IAAI,EAAE;AAAR,SADyC,EAEzC;AAAEA,UAAAA,IAAI,EAAE,MAAR;AAAgB2C,UAAAA,EAAE,EAAE;AAApB,SAFyC,CAAR,CAArC;AAKAoB,QAAAA,mBAAmB,CAACwE,IAApB,CAAyBxG,KAAzB;AAEA7C,QAAAA,MAAM,CAACyI,aAAa,CAACzJ,IAAd,CAAmBkH,KAAnB,CAAyB,CAAzB,EAA4B,CAA5B,EAA+BF,iBAAhC,CAAN,CAAyDjE,OAAzD,CAAiE,CAAC;AAAE0B,UAAAA,EAAE,EAAE;AAAN,SAAD,CAAjE;AACH,OAVC,CAAF;AAWH,KApGO,CAAR;AAsGAxE,IAAAA,QAAQ,CAAC,WAAD,EAAc,YAAM;AACxBc,MAAAA,EAAE,CAAC,2CAAD,EAA8C,YAAM;AAClDC,QAAAA,MAAM,CAAC6E,mBAAmB,CAAC4E,OAApB,CAA4B5G,KAA5B,CAAD,CAAN,CAA2C3C,cAA3C,CAA0DwG,OAA1D;AACH,OAFC,CAAF;AAIA3G,MAAAA,EAAE,CAAC,0CAAD,EAA6C,YAAM;AACjD8E,QAAAA,mBAAmB,CAAC4E,OAApB,CAA4B5G,KAA5B;AAEA7C,QAAAA,MAAM,CAAC0I,WAAD,CAAN,CAAoBb,UAApB;AACH,OAJC,CAAF;AAMA9H,MAAAA,EAAE,CAAC,2DAAD,EAA8D,YAAM;AAClE,YAAMuJ,eAAe,GAAGnI,kBAASC,GAAT,CAAa,wBAAb,CAAxB;;AAEAyD,QAAAA,mBAAmB,CAAC4E,OAApB,CAA4B5G,KAA5B;AAEA7C,QAAAA,MAAM,CAAC0I,WAAW,CAAC1J,IAAZ,CAAiBkH,KAAjB,CAAuB,CAAvB,EAA0B,CAA1B,CAAD,CAAN,CAAqCnE,OAArC,CAA6CuH,eAA7C;AACH,OANC,CAAF;AAOH,KAlBO,CAAR;AAmBH,GAnKO,CAAR;AAqKArK,EAAAA,QAAQ,CAAC,QAAD,EAAW,YAAM;AACrB,QAAIyK,aAAJ;AACA,QAAI7G,KAAJ;AACA,QAAIgC,mBAAJ;AAEAxF,IAAAA,UAAU,CAAC,YAAM;AACb,UAAMsJ,mBAAmB,GAAGxH,kBAASC,GAAT,CAAa,sBAAb,CAA5B;;AAEAsI,MAAAA,aAAa,GAAG3K,IAAI,CAACW,EAAL,GAAUE,eAAV,CAA0B,IAAI8G,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC/DA,QAAAA,OAAO;AACV,OAFyC,CAA1B,CAAhB;AAIArH,+BAAgBkH,SAAhB,CAA0BC,GAA1B,GAAgC;AAC5BkD,QAAAA,MAAM,EAAED;AADoB,OAAhC;AAIA7E,MAAAA,mBAAmB,GAAGvF,yBAAgB4B,gBAAhB,CAAiCC,kBAASC,GAAT,CAAa,mBAAb,CAAjC,CAAtB;;AAXa,UAaPgE,KAbO,GAaC;AACV,uBAAc;AAAA;;AACV,aAAKtC,UAAL,GAAkB,EAAlB;AACA,aAAK5D,eAAL,GAAuB2F,mBAAvB;AACA,aAAK7B,8BAAL,IAA4B,IAAIC,GAAJ,CAAQ,EAAR,CAA5B;AACH,OAlBQ;;AAoBbJ,MAAAA,KAAK,GAAG,IAAIuC,KAAJ,EAAR;AAEA5E,MAAAA,MAAM,CACDiB,IADL,CACUkH,mBADV,EAEKM,OAFL,CAEa,UAACC,GAAD,EAAS;AACdrG,QAAAA,KAAK,CAACC,UAAN,CAAiBoG,GAAjB,IAAwBP,mBAAmB,CAACO,GAAD,CAA3C;AACArG,QAAAA,KAAK,CAACqG,GAAD,CAAL,GAAaP,mBAAmB,CAACO,GAAD,CAAhC;AACH,OALL;AAMH,KA5BS,CAAV;AA8BAnJ,IAAAA,EAAE,CAAC,0CAAD,EAA6C,YAAM;AACjD8E,MAAAA,mBAAmB,CAAC8E,MAApB,CAA2B9G,KAA3B;AAEA7C,MAAAA,MAAM,CAAC0J,aAAD,CAAN,CAAsB7B,UAAtB;AACH,KAJC,CAAF;AAMA9H,IAAAA,EAAE,CAAC,iCAAD,EAAoC,YAAM;AACxC8E,MAAAA,mBAAmB,CAAC8E,MAApB,CAA2B9G,KAA3B;AAEA7C,MAAAA,MAAM,CAAC0J,aAAD,CAAN,CAAsB5C,cAAtB,CAAqCjE,KAAK,CAAC2G,IAA3C;AACH,KAJC,CAAF;AAMAzJ,IAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAM;AAChCC,MAAAA,MAAM,CAAC6E,mBAAmB,CAAC8E,MAApB,CAA2B9G,KAA3B,CAAD,CAAN,CAA0C3C,cAA1C,CAAyDwG,OAAzD;AACH,KAFC,CAAF;AAIA3G,IAAAA,EAAE,CAAC,qFAAD,EAAwF,YAAM;AAC5F8C,MAAAA,KAAK,CAACC,UAAN,CAAiB0G,IAAjB,GAAwB1J,SAAxB;AAEA+E,MAAAA,mBAAmB,CAAC8E,MAApB,CAA2B9G,KAA3B;AAEA7C,MAAAA,MAAM,CAAC0J,aAAD,CAAN,CAAsB5C,cAAtB,CAAqC,kDAArC;AACH,KANC,CAAF;AAOH,GA1DO,CAAR;AA4DA7H,EAAAA,QAAQ,CAAC,uBAAD,EAA0B,YAAM;AACpC,QAAIgC,0BAAJ;AAEA5B,IAAAA,UAAU,CAAC,YAAM;AACb4B,MAAAA,0BAA0B,GAAG3B,yBAAgB4B,gBAAhB,CAAiCC,kBAASC,GAAT,CAAa,0BAAb,CAAjC,CAA7B;AACH,KAFS,CAAV;AAIArB,IAAAA,EAAE,CAAC,yCAAD,EAA4C,YAAM;AAChD,UAAM6J,6BAA6B,GAAG,CAClC,aADkC,EACnB,MADmB,EACX,IADW,EACL,SADK,EACM,MADN,EACc,UADd,EAC0B,YAD1B,EAElC,WAFkC,EAErB,mBAFqB,EAEA,cAFA,EAEgB,kBAFhB,EAGlC,iBAHkC,EAGf,WAHe,EAGF,KAHE,EAGK,WAHL,EAIlC,YAJkC,EAIpB,aAJoB,EAIL,eAJK,EAIY,MAJZ,EAKlC,mBALkC,EAKb,iBALa,EAKM,cALN,EAKsB,mBALtB,EAK2C,cAL3C,EAMpCtH,IANoC,EAAtC;AAOA,UAAMuH,aAAa,GAAG5I,0BAA0B,CAAC6I,qBAA3B,EAAtB;AAEA9J,MAAAA,MAAM,CAAC6J,aAAa,CAACvH,IAAd,EAAD,CAAN,CAA6BP,OAA7B,CAAqC6H,6BAArC;AACH,KAXC,CAAF;AAYH,GAnBO,CAAR;AAqBA3K,EAAAA,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAC7B,QAAIgC,0BAAJ;AACA,QAAI4D,mBAAJ;AAEAxF,IAAAA,UAAU,CAAC,YAAM;AACb4B,MAAAA,0BAA0B,GAAG3B,yBAAgB4B,gBAAhB,CAAiCC,kBAASC,GAAT,CAAa,0BAAb,CAAjC,CAA7B;AACAyD,MAAAA,mBAAmB,GAAGvF,yBAAgB4B,gBAAhB,CAAiCC,kBAASC,GAAT,CAAa,mBAAb,CAAjC,CAAtB;AACH,KAHS,CAAV;AAKArB,IAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAM;AAC7BC,MAAAA,MAAM,SAAQiB,0BAA0B,CAAC8I,cAAnC,EAAN,CAAyDlJ,IAAzD,CAA8D,UAA9D;AACH,KAFC,CAAF;AAIAd,IAAAA,EAAE,CAAC,wDAAD,EAA2D,YAAM;AAC/DC,MAAAA,MAAM,CAACiB,0BAA0B,CAAC8I,cAA3B,EAAD,CAAN,CAAoDlJ,IAApD,CAAyD,IAAzD;AACH,KAFC,CAAF;AAIAd,IAAAA,EAAE,CAAC,yDAAD,EAA4D,YAAM;AAChEC,MAAAA,MAAM,CAAC6E,mBAAmB,CAACkF,cAApB,EAAD,CAAN,CAA6ClJ,IAA7C,CAAkD,KAAlD;AACH,KAFC,CAAF;AAGH,GApBO,CAAR;AAsBA5B,EAAAA,QAAQ,CAAC,6BAAD,EAAgC,YAAM;AAC1C,QAAIgC,0BAAJ;AAEA5B,IAAAA,UAAU,CAAC,YAAM;AACb4B,MAAAA,0BAA0B,GAAG3B,yBAAgB4B,gBAAhB,CAAiCC,kBAASC,GAAT,CAAa,0BAAb,CAAjC,CAA7B;AACH,KAFS,CAAV;AAIArB,IAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAM;AAC7BC,MAAAA,MAAM,SAAQiB,0BAA0B,CAAC+I,yBAAnC,EAAN,CAAoEnJ,IAApE,CAAyE,UAAzE;AACH,KAFC,CAAF;AAIAd,IAAAA,EAAE,CAAC,2CAAD,EAA8C,YAAM;AAClDC,MAAAA,MAAM,CAACiB,0BAA0B,CAAC+I,yBAA3B,EAAD,CAAN,CACKjI,OADL,CACa,CAAC,aAAD,EAAgB,UAAhB,EAA4B,MAA5B,EAAoC,WAApC,CADb;AAEH,KAHC,CAAF;AAKAhC,IAAAA,EAAE,CAAC,+DAAD,EAAkE,YAAM;AACtE,UAAMkK,iBAAiB,GAAG9I,kBAASC,GAAT,CAAa,0BAAb,CAA1B;;AACA6I,MAAAA,iBAAiB,CAAChI,UAAlB,GAA+BgI,iBAAiB,CAAChI,UAAlB,CAC1BiI,GAD0B,CACtB;AAAA,YAAGC,cAAH,QAAGA,cAAH;AAAA,YAAsBC,KAAtB;;AAAA,iCAAwCA,KAAxC;AAAA,OADsB,CAA/B;AAGAnJ,MAAAA,0BAA0B,GAAG3B,yBAAgB4B,gBAAhB,CAAiC+I,iBAAjC,CAA7B;AAEAjK,MAAAA,MAAM,CAACiB,0BAA0B,CAAC+I,yBAA3B,EAAD,CAAN,CAA+DjI,OAA/D,CAAuE,EAAvE;AACH,KARC,CAAF;AASH,GAzBO,CAAR;AA2BA9C,EAAAA,QAAQ,CAAC,qCAAD,EAAwC,YAAM;AAClD,QAAIgC,0BAAJ;AAEA5B,IAAAA,UAAU,CAAC,YAAM;AACb4B,MAAAA,0BAA0B,GAAG3B,yBAAgB4B,gBAAhB,CAAiCC,kBAASC,GAAT,CAAa,0BAAb,CAAjC,CAA7B;AACH,KAFS,CAAV;AAIArB,IAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAM;AAC7BC,MAAAA,MAAM,SAAQiB,0BAA0B,CAACoJ,iCAAnC,EAAN,CAA4ExJ,IAA5E,CAAiF,UAAjF;AACH,KAFC,CAAF;AAIAd,IAAAA,EAAE,CAAC,2DAAD,EAA8D,YAAM;AAClEC,MAAAA,MAAM,CAACiB,0BAA0B,CAACoJ,iCAA3B,EAAD,CAAN,CAAuEtI,OAAvE,CAA+E,CAC3E;AAAEjB,QAAAA,IAAI,EAAE,aAAR;AAAuBqJ,QAAAA,cAAc,EAAE;AAAvC,OAD2E,EAE3E;AAAErJ,QAAAA,IAAI,EAAE,UAAR;AAAoBqJ,QAAAA,cAAc,EAAE;AAApC,OAF2E,EAG3E;AAAErJ,QAAAA,IAAI,EAAE,MAAR;AAAgBqJ,QAAAA,cAAc,EAAE;AAAhC,OAH2E,EAI3E;AAAErJ,QAAAA,IAAI,EAAE,WAAR;AAAqBqJ,QAAAA,cAAc,EAAE;AAArC,OAJ2E,CAA/E;AAMH,KAPC,CAAF;AASApK,IAAAA,EAAE,CAAC,+DAAD,EAAkE,YAAM;AACtE,UAAMkK,iBAAiB,GAAG9I,kBAASC,GAAT,CAAa,0BAAb,CAA1B;;AACA6I,MAAAA,iBAAiB,CAAChI,UAAlB,GAA+BgI,iBAAiB,CAAChI,UAAlB,CAC1BiI,GAD0B,CACtB;AAAA,YAAGC,cAAH,SAAGA,cAAH;AAAA,YAAsBC,KAAtB;;AAAA,iCAAwCA,KAAxC;AAAA,OADsB,CAA/B;AAGAnJ,MAAAA,0BAA0B,GAAG3B,yBAAgB4B,gBAAhB,CAAiC+I,iBAAjC,CAA7B;AAEAjK,MAAAA,MAAM,CAACiB,0BAA0B,CAACoJ,iCAA3B,EAAD,CAAN,CAAuEtI,OAAvE,CAA+E,EAA/E;AACH,KARC,CAAF;AASH,GA7BO,CAAR;AA8BH,CAvsCO,CAAR;AAysCA9C,QAAQ,CAAC,6BAAD,EAAgC,YAAM;AAC1C,MAAIqL,YAAJ;AAEAjL,EAAAA,UAAU,CAAC,YAAM;AACbiL,IAAAA,YAAY,GAAGvL,IAAI,CAACW,EAAL,GACVE,eADU,CACM8G,OAAO,CAACC,OAAR,EADN,CAAf;AAGArH,6BAAgBkH,SAAhB,CAA0BC,GAA1B,GAAgC;AAC5BrF,MAAAA,GAAG,EAAEkJ;AADuB,KAAhC;AAGH,GAPS,CAAV;AASArL,EAAAA,QAAQ,CAAC,qBAAD,EAAwB,YAAM;AAClC,QAAIsL,wBAAJ;AACA,QAAI1F,mBAAJ;AAEAxF,IAAAA,UAAU,CAAC,YAAM;AACbkL,MAAAA,wBAAwB,GAAGjL,yBAAgB0F,cAAhB,CAA+Bf,IAA1D;AAEAY,MAAAA,mBAAmB,GAAG,IAAI0F,wBAAJ,CAA6B;AAC/C/K,QAAAA,QAAQ,EAAE,MADqC;AAE/CC,QAAAA,MAAM,EAAE,OAFuC;AAG/CF,QAAAA,WAAW,EAAE;AAHkC,OAA7B,EAKtB,EALsB,EAMtB,EANsB,CAAtB;AAQH,KAXS,CAAV;AAaAQ,IAAAA,EAAE,CAAC,6BAAD,EAAgC,YAAM;AACpCC,MAAAA,MAAM,CAAC6E,mBAAD,CAAN,CAA4B3E,cAA5B,CAA2CZ,wBAA3C;AACH,KAFC,CAAF;AAIAS,IAAAA,EAAE,CAAC,wDAAD,EAA2D,YAAM;AAC/D8E,MAAAA,mBAAmB,CAACzD,GAApB,CAAwB,UAAxB;AAEApB,MAAAA,MAAM,CAACsK,YAAD,CAAN,CAAqBxD,cAArB,CAAoC,WAApC,EAAiD;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjD;AACH,KAJC,CAAF;AAKH,GA1BO,CAAR;AA4BA9H,EAAAA,QAAQ,CAAC,wBAAD,EAA2B,YAAM;AACrC,QAAIuL,2BAAJ;AACA,QAAIzF,sBAAJ;AAEA1F,IAAAA,UAAU,CAAC,YAAM;AACbmL,MAAAA,2BAA2B,GAAGlL,yBAAgB0F,cAAhB,CAA+BC,OAA7D;AAEAF,MAAAA,sBAAsB,GAAG,IAAIyF,2BAAJ,CACrBrJ,kBAASC,GAAT,CAAa,sBAAb,CADqB,EAErB,EAFqB,EAGrB,EAHqB,EAIrB,EAJqB,EAKrB,EALqB,CAAzB;AAOH,KAVS,CAAV;AAYArB,IAAAA,EAAE,CAAC,oDAAD,EAAuD,YAAM;AAC3D,UAAMkF,OAAO,GAAGF,sBAAsB,CAACI,MAAvB,CAA8B;AAC1CsF,QAAAA,6BAA6B,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf;AADW,OAA9B,CAAhB;AAGAzK,MAAAA,MAAM,CAACiF,OAAD,CAAN,CAAgB/E,cAAhB,CAA+BkF,cAA/B;AACApF,MAAAA,MAAM,CAACiF,OAAO,CAACnC,UAAR,CAAmB2H,6BAApB,CAAN,CAAyD1I,OAAzD,CAAiE,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,CAAjE;AACH,KANC,CAAF;AAOH,GAvBO,CAAR;AAyBA9C,EAAAA,QAAQ,CAAC,4BAAD,EAA+B,YAAM;AACzC,QAAIyL,oCAAJ;AACA,QAAIC,+BAAJ;AAEAtL,IAAAA,UAAU,CAAC,YAAM;AACbqL,MAAAA,oCAAoC,GAAGpL,yBAAgB0F,cAAhB,CAA+Ba,gBAAtE;AAEA8E,MAAAA,+BAA+B,GAAG,IAAID,oCAAJ,CAAyC;AACvElL,QAAAA,QAAQ,EAAE,kBAD6D;AAEvEC,QAAAA,MAAM,EAAE,mBAF+D;AAGvEU,QAAAA,WAAW,EAAE;AAH0D,OAAzC,EAKlC,EALkC,EAMlC,EANkC,EAOlC,EAPkC,EAQlC,EARkC,CAAlC;AAUH,KAbS,CAAV;AAeAJ,IAAAA,EAAE,CAAC,4DAAD,EAA+D,UAAC6K,IAAD,EAAU;AACvED,MAAAA,+BAA+B,CAAC/C,IAAhC,CAAqC;AAAEiD,QAAAA,IAAI,EAAE;AAAR,OAArC,EAA2DvD,KAA3D,CAAiE,YAAM;AACnEtH,QAAAA,MAAM,CAACsK,YAAD,CAAN,CAAqBxD,cAArB,CAAoC,4BAApC,EAAkE;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAlE;AACA6D,QAAAA,IAAI;AACP,OAHD;AAIH,KALC,CAAF;AAOA7K,IAAAA,EAAE,CAAC,8DAAD,EAAiE,UAAC6K,IAAD,EAAU;AACzED,MAAAA,+BAA+B,CAAC/C,IAAhC,GAAuCN,KAAvC,CAA6C,YAAM;AAC/CtH,QAAAA,MAAM,CAACsK,YAAD,CAAN,CAAqBxD,cAArB,CAAoC,mBAApC,EAAyD;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAzD;AACA6D,QAAAA,IAAI;AACP,OAHD;AAIH,KALC,CAAF;AAMH,GAhCO,CAAR;AAiCH,CAlGO,CAAR","sourcesContent":["import fixtures from '../../__fixtures__/fixtures';\nimport { DIRTY_PROPERTY_LIST } from '../ModelBase';\nimport Model from '../Model';\nimport ModelDefinitions from '../ModelDefinitions';\nimport ModelCollectionProperty from '../ModelCollectionProperty';\nimport ModelCollection from '../ModelCollection';\nimport ModelDefinition from '../ModelDefinition';\n\njest.mock('../ModelCollection');\njest.mock('../ModelCollectionProperty');\njest.mock('../Model');\n\ndescribe('ModelDefinition', () => {\n    let modelDefinition;\n    let mockModelCollectionCreate;\n    let mockModelCollectionPropertyCreate;\n\n    beforeEach(() => {\n        modelDefinition = new ModelDefinition({\n            displayName: 'Data Elements',\n            singular: 'dataElement',\n            plural: 'dataElements',\n        });\n        mockModelCollectionCreate = jest.fn(ModelCollection, 'create');\n        mockModelCollectionCreate.mockReturnValue(new ModelCollection(modelDefinition, [], {}));\n        mockModelCollectionPropertyCreate = jest.fn(ModelCollectionProperty, 'create');\n        mockModelCollectionPropertyCreate.mockReturnValue(\n            new ModelCollectionProperty({}, modelDefinition, 'propName', [], undefined),\n        );\n    });\n\n    it('should not be allowed to be called without new', () => {\n        expect(() => ModelDefinition()).toThrowErrorMatchingSnapshot();\n    });\n\n    it('should create a ModelDefinition object', () => {\n        expect(modelDefinition).toBeInstanceOf(ModelDefinition);\n    });\n\n    it('should not add epiEndpoint when it does not exist', () => {\n        expect(modelDefinition.apiEndpoint).toBeUndefined();\n    });\n\n    it('should throw an error when a name is not specified', () => {\n        function shouldThrow() {\n            return new ModelDefinition();\n        }\n        expect(shouldThrow).toThrowError('Value should be provided');\n    });\n\n    it('should throw an error when plural is not specified', () => {\n        function shouldThrow() {\n            return new ModelDefinition({ displayName: 'Data Elements', singular: 'dataElement' });\n        }\n        expect(shouldThrow).toThrowError('Plural should be provided');\n    });\n\n    describe('instance', () => {\n        it('should not be able to change the name', () => {\n            const isWritable = Object.getOwnPropertyDescriptor(modelDefinition, 'name').writable;\n            const isConfigurable = Object.getOwnPropertyDescriptor(modelDefinition, 'name').configurable;\n\n            expect(isWritable).toBe(false);\n            expect(isConfigurable).toBe(false);\n        });\n\n        it('should not change the name', () => {\n            function shouldThrow() {\n                modelDefinition.name = 'anotherName';\n\n                if (modelDefinition.name !== 'anotherName') {\n                    throw new Error('');\n                }\n            }\n\n            expect(shouldThrow).toThrowError();\n            expect(modelDefinition.name).toBe('dataElement');\n        });\n\n        it('should have the correct displayName', () => {\n            expect(modelDefinition.displayName).toBe('Data Elements');\n        });\n\n        it('should not change the displayName', () => {\n            function shouldThrow() {\n                modelDefinition.displayName = 'Another Name';\n            }\n\n            expect(shouldThrow).toThrowError();\n            expect(modelDefinition.displayName).toBe('Data Elements');\n        });\n\n        it('should not be able to change the isMetaData', () => {\n            const isWritable = Object.getOwnPropertyDescriptor(modelDefinition, 'isMetaData').writable;\n            const isConfigurable = Object.getOwnPropertyDescriptor(modelDefinition, 'isMetaData').configurable;\n\n            expect(isWritable).toBe(false);\n            expect(isConfigurable).toBe(false);\n        });\n\n        it('should not change the isMetaData', () => {\n            function shouldThrow() {\n                modelDefinition.isMetaData = true;\n\n                if (modelDefinition.isMetaData !== true) {\n                    throw new Error('');\n                }\n            }\n\n            expect(modelDefinition.isMetaData).toBe(false);\n            expect(shouldThrow).toThrowError();\n        });\n    });\n\n    describe('createFromSchema', () => {\n        let dataElementModelDefinition;\n\n        beforeEach(() => {\n            dataElementModelDefinition = ModelDefinition.createFromSchema(\n                fixtures.get('/api/schemas/dataElement'),\n                fixtures.get('/api/attributes').attributes,\n            );\n        });\n\n        it('should be a method on ModelDefinition', () => {\n            expect(ModelDefinition.createFromSchema).toBeDefined();\n        });\n\n        it('should throw if the schema is not provided', () => {\n            expect(ModelDefinition.createFromSchema).toThrowError('Schema should be provided');\n        });\n\n        describe('dataElementSchema', () => {\n            it('should return a ModelDefinition object', () => {\n                expect(dataElementModelDefinition).toBeInstanceOf(ModelDefinition);\n            });\n\n            it('should set the name on the definition', () => {\n                expect(dataElementModelDefinition.name).toBe('dataElement');\n            });\n\n            it('should set if it is a metadata model', () => {\n                expect(dataElementModelDefinition.isMetaData).toBe(true);\n            });\n\n            it('should set the epiEndpoint', () => {\n                expect(dataElementModelDefinition.apiEndpoint).toBe('https://play.dhis2.org/demo/api/dataElements');\n            });\n\n            it('should set metadata to false if it is not a metadata model', () => {\n                const nonMetaDataModel = fixtures.get('/api/schemas/dataElement');\n                nonMetaDataModel.metadata = false;\n\n                dataElementModelDefinition = ModelDefinition.createFromSchema(nonMetaDataModel);\n\n                expect(dataElementModelDefinition.isMetaData).toBe(false);\n            });\n\n            it('should a properties property for each of the schema properties', () => {\n                expect(Object.keys(dataElementModelDefinition.modelProperties).length).toBe(37);\n            });\n\n            it('should not be able to modify the modelProperties array', () => {\n                function shouldThrow() {\n                    dataElementModelDefinition.modelProperties.anotherKey = {};\n\n                    // TODO: There is an implementation bug in PhantomJS that does not properly freeze the array\n                    if (Object.keys(dataElementModelDefinition.modelProperties).length === 37) {\n                        throw new Error();\n                    }\n                }\n\n                expect(shouldThrow).toThrowError();\n                expect(Object.keys(dataElementModelDefinition.modelProperties).length).toBe(37);\n            });\n\n            it('should store property constants', () => {\n                dataElementModelDefinition = ModelDefinition.createFromSchema(fixtures.get('/api/schemas/dataElement'));\n\n                expect(dataElementModelDefinition.modelProperties.aggregationType.constants).toEqual([\n                    'SUM',\n                    'AVERAGE',\n                    'AVERAGE_SUM_ORG_UNIT',\n                    'COUNT',\n                    'STDDEV',\n                    'VARIANCE',\n                    'MIN',\n                    'MAX',\n                    'NONE',\n                    'CUSTOM',\n                    'DEFAULT',\n                    'AVERAGE_SUM_INT',\n                    'AVERAGE_SUM_INT_DISAGGREGATION',\n                    'AVERAGE_INT',\n                    'AVERAGE_INT_DISAGGREGATION',\n                    'AVERAGE_BOOL',\n                ]);\n            });\n        });\n\n        describe('modelProperties', () => {\n            let modelProperties;\n\n            beforeEach(() => {\n                modelProperties = dataElementModelDefinition.modelProperties;\n            });\n\n            it('should be an object', () => {\n                expect(modelProperties.name).toBeInstanceOf(Object);\n            });\n\n            it('should throw an error when a type is not found', () => {\n                const schema = fixtures.get('/api/schemas/dataElement');\n                function shouldThrow() {\n                    ModelDefinition.createFromSchema(schema);\n                }\n\n                schema.properties.push({\n                    name: 'unknownProperty',\n                    propertyType: 'uio.some.unknown.type',\n                });\n\n                expect(shouldThrow)\n                    .toThrowError('Type from schema \"uio.some.unknown.type\" not found available type list.');\n            });\n\n            it('should not add properties that do not have a name', () => {\n                const schema = fixtures.get('/api/schemas/dataElement');\n                const expectedProperties = [\n                    'aggregationLevels',\n                    'zeroIsSignificant',\n                    'displayDescription',\n                    'optionSet',\n                    'id',\n                    'created',\n                    'description',\n                    'displayFormName',\n                    'commentOptionSet',\n                    'name',\n                    'externalAccess',\n                    'valueType',\n                    'href',\n                    'dataElementGroups',\n                    'publicAccess',\n                    'aggregationType',\n                    'formName',\n                    'lastUpdated',\n                    'dataSetElements',\n                    'code',\n                    'access',\n                    'url',\n                    'domainType',\n                    'legendSet',\n                    'legendSets',\n                    'categoryCombo',\n                    'attributeValues',\n                    'optionSetValue',\n                    'userGroupAccesses',\n                    'userAccesses',\n                    'shortName',\n                    'displayName',\n                    'displayShortName',\n                    'user',\n                    'translations',\n                    'dimensionItem',\n                    'dimensionItemType',\n                ];\n\n                schema.properties.push({ propertyType: 'TEXT' });\n\n                const definition = ModelDefinition.createFromSchema(schema);\n\n                expect(Object.keys(definition.modelProperties).sort()).toEqual(expectedProperties.sort());\n            });\n\n            it('should use the collection name for collections', () => {\n                expect(modelProperties.dataElementGroups).toBeDefined();\n                expect(modelProperties.dataElementGroup).toBeUndefined();\n            });\n\n            it('should add a get method to the propertyDescriptor', () => {\n                expect(modelProperties.name.get).toBeInstanceOf(Function);\n            });\n\n            it('should add a set method to the propertyDescriptor for name', () => {\n                expect(modelProperties.name.set).toBeInstanceOf(Function);\n            });\n\n            it('should not have a set method for dimensionItem', () => {\n                expect(modelProperties.dimensionItem.set).not.toBeInstanceOf(Function);\n            });\n\n            it('should create getter function on the propertyDescriptor', () => {\n                const model = {\n                    dataValues: {\n                        name: 'Mark',\n                    },\n                };\n\n                expect(modelProperties.name.get.call(model)).toBe('Mark');\n            });\n\n            it('should create setter function on the propertyDescriptor', () => {\n                const model = {\n                    dataValues: {},\n                };\n                model[DIRTY_PROPERTY_LIST] = new Set([]);\n\n                modelProperties.name.set.call(model, 'James');\n\n                expect(model.dataValues.name).toBe('James');\n            });\n\n            describe('setter', () => {\n                let model;\n\n                beforeEach(() => {\n                    model = {\n                        dirty: false,\n                        dataValues: {},\n                    };\n\n                    model[DIRTY_PROPERTY_LIST] = new Set([]);\n                });\n\n                it('should set the dirty property to true when a value is set', () => {\n                    modelProperties.name.set.call(model, 'James');\n\n                    expect(model.dirty).toBe(true);\n                });\n\n                it('should not set the dirty property to true when the value is the same', () => {\n                    model.dataValues.name = 'James';\n                    modelProperties.name.set.call(model, 'James');\n\n                    expect(model.dirty).toBe(false);\n                });\n\n                it('should set the dirty property when a different object is added', () => {\n                    model.dataValues.name = { name: 'James' };\n                    modelProperties.name.set.call(model, { name: 'James', last: 'Doe' });\n\n                    expect(model.dirty).toBe(true);\n                });\n            });\n        });\n\n        describe('modelValidations', () => {\n            let modelValidations;\n\n            beforeEach(() => {\n                modelValidations = dataElementModelDefinition.modelValidations;\n            });\n\n            describe('created', () => {\n                it('should set the data object as a type for date fields', () => {\n                    expect(modelValidations.created.type).toBe('DATE');\n                });\n\n                it('should be owned by this schema', () => {\n                    expect(modelValidations.created.owner).toBe(true);\n                });\n            });\n\n            describe('externalAccess', () => {\n                it('should set the boolean datatype for externalAccess', () => {\n                    expect(modelValidations.externalAccess.type).toBe('BOOLEAN');\n                });\n\n                it('should not be owned by this schema', () => {\n                    expect(modelValidations.externalAccess.owner).toBe(false);\n                });\n\n                // TODO: This currently has some sort of max value\n                // it('should not have a maxLength property', () => {\n                //    expect(modelValidations.externalAccess.maxLength).toBe(undefined);\n                // });\n            });\n\n            describe('id', () => {\n                it('should have a maxLength', () => {\n                    expect(modelValidations.id.max).toBe(11);\n                });\n            });\n\n            describe('name', () => {\n                it('should have have a type property', () => {\n                    expect(modelValidations.name.type).toBe('TEXT');\n                });\n\n                it('should have a persisted property', () => {\n                    expect(modelValidations.name.persisted).toBe(true);\n                });\n\n                it('should have a required property', () => {\n                    expect(modelValidations.name.required).toBe(true);\n                });\n\n                it('should have an owner property', () => {\n                    expect(modelValidations.name.owner).toBe(true);\n                });\n            });\n\n            it('should add the referenceType to the optionSet and commentOptionSet', () => {\n                expect(modelValidations.commentOptionSet.referenceType).toBe('optionSet');\n                expect(modelValidations.optionSet.referenceType).toBe('optionSet');\n            });\n\n            it('should add the referenceType to the categoryCombo property', () => {\n                expect(modelValidations.categoryCombo.referenceType).toBe('categoryCombo');\n            });\n\n            it('should add the referenceType to the user property', () => {\n                expect(modelValidations.user.referenceType).toBe('user');\n            });\n\n            it('should not add a referenceType for a property that are not a reference', () => {\n                expect(modelValidations.name.referenceType).toBeUndefined();\n            });\n\n            describe('ordered', () => {\n                it('should set ordered to false when the property is not available', () => {\n                    expect(modelValidations.name.ordered).toBe(false);\n                });\n\n                it('should set ordered to false when the ordered property is available and is false', () => {\n                    const dataElementSchemaFixture = fixtures.get('/api/schemas/dataElement');\n                    dataElementSchemaFixture.properties[0].ordered = false;\n\n                    dataElementModelDefinition = ModelDefinition.createFromSchema(\n                        dataElementSchemaFixture,\n                        fixtures.get('/api/attributes').attributes,\n                    );\n\n                    modelValidations = dataElementModelDefinition.modelValidations;\n\n                    expect(modelValidations.aggregationType.ordered).toBe(false);\n                });\n\n                it('should set ordered to true when the ordered property is available and is true', () => {\n                    const dataElementSchemaFixture = fixtures.get('/api/schemas/dataElement');\n                    dataElementSchemaFixture.properties[0].ordered = true;\n\n                    dataElementModelDefinition = ModelDefinition.createFromSchema(\n                        dataElementSchemaFixture,\n                        fixtures.get('/api/attributes').attributes,\n                    );\n\n                    modelValidations = dataElementModelDefinition.modelValidations;\n\n                    expect(modelValidations.aggregationLevels.ordered).toBe(true);\n                });\n            });\n\n            describe('collection reference', () => {\n                let indicatorGroupModelDefinition;\n\n                beforeEach(() => {\n                    const indicatorGroupSchema = fixtures.get('/api/schemas/indicatorGroup');\n                    indicatorGroupModelDefinition = ModelDefinition.createFromSchema(indicatorGroupSchema);\n                    modelValidations = indicatorGroupModelDefinition.modelValidations;\n                });\n\n                it('should add a reference type for a collection of references', () => {\n                    expect(modelValidations.indicators.referenceType).toBe('indicator');\n                });\n\n                it('should not add a reference type for a collection of complex objects', () => {\n                    expect(modelValidations.userGroupAccesses.referenceType).toBeUndefined();\n                });\n            });\n\n            describe('embedded object property', () => {\n                let indicatorGroupModelDefinition;\n\n                beforeEach(() => {\n                    const legendSetSchema = fixtures.get('/api/schemas/legendSet');\n                    indicatorGroupModelDefinition = ModelDefinition.createFromSchema(legendSetSchema);\n                    modelValidations = indicatorGroupModelDefinition.modelValidations;\n                });\n\n                it('should have set the embedded property validation for userGroupAcceses to true', () => {\n                    expect(modelValidations.userGroupAccesses.embeddedObject).toBe(true);\n                });\n\n                it('should have set the embedded property validation for attributeValues to false', () => {\n                    expect(modelValidations.attributeValues.embeddedObject).toBe(false);\n                });\n\n                it('should set the embedded object to false for simple types', () => {\n                    expect(modelValidations.name.embeddedObject).toBe(false);\n                });\n            });\n        });\n\n        describe('specialized definitions', () => {\n            let UserModelDefinition;\n            let userModelDefinition;\n\n            let DataSetModelDefinition;\n            let dataSetModelDefinition;\n\n            beforeEach(() => {\n                UserModelDefinition = ModelDefinition.specialClasses.user;\n                userModelDefinition = ModelDefinition.createFromSchema(fixtures.get('/api/schemas/user'));\n\n                DataSetModelDefinition = ModelDefinition.specialClasses.dataSet;\n                dataSetModelDefinition = ModelDefinition.createFromSchema(fixtures.get('/api/schemas/dataSet'));\n            });\n\n            it('should return a UserModelDefinition for the user schema', () => {\n                expect(userModelDefinition).toBeInstanceOf(UserModelDefinition);\n            });\n\n            it('should return a DataSetModelDefinition for the data set schema', () => {\n                expect(dataSetModelDefinition).toBeInstanceOf(DataSetModelDefinition);\n            });\n        });\n\n        describe('attribute properties', () => {\n            let attributeProperties;\n\n            beforeEach(() => {\n                attributeProperties = dataElementModelDefinition.attributeProperties;\n            });\n\n            it('should have added the attribute properties onto the model', () => {\n                expect(attributeProperties).toBeDefined();\n            });\n\n            it('should be descriptor objects', () => {\n                expect(attributeProperties.name).toBeInstanceOf(Object);\n            });\n        });\n    });\n\n    describe('create()', () => {\n        let dataElementModelDefinition;\n\n        beforeEach(() => {\n            dataElementModelDefinition = ModelDefinition.createFromSchema(fixtures.get('/api/schemas/dataElement'));\n        });\n\n        // TODO: This is currently not a pure unit test as we haven't mocked out Model\n        it('should return an instance of Model', () => {\n            expect(dataElementModelDefinition.create()).toBeInstanceOf(Model);\n        });\n\n        describe('with default values', () => {\n            const orgUnitGroupSchema = fixtures.get('/api/schemas/organisationUnitGroupSet');\n            const organisationUnitGroupSetModelDefinition = ModelDefinition.createFromSchema(orgUnitGroupSchema);\n            let model;\n\n            beforeEach(() => {\n                model = organisationUnitGroupSetModelDefinition.create();\n            });\n\n            it('should set the default data dimension', () => {\n                expect(model.dataDimension).toBe(true);\n            });\n        });\n\n        describe('collection properties', () => {\n            let orgunitModelDefinition;\n            let userModelDefinition;\n\n            beforeEach(() => {\n                const orgUnitSchema = fixtures.get('/api/schemas/organisationUnit');\n                userModelDefinition = ModelDefinition.createFromSchema(fixtures.get('/api/schemas/user'));\n                orgunitModelDefinition = ModelDefinition.createFromSchema(orgUnitSchema);\n\n                // TODO: Mock the ModelDefinitions singleton, so we can get rid of this logic\n                if (!ModelDefinitions.getModelDefinitions().user) {\n                    ModelDefinitions.getModelDefinitions().add(userModelDefinition);\n                }\n                if (!ModelDefinitions.getModelDefinitions().organisationUnit) {\n                    ModelDefinitions.getModelDefinitions().add(orgunitModelDefinition);\n                }\n            });\n\n            afterEach(() => {\n                ModelCollectionProperty.create.mockClear();\n            });\n\n            describe('with data', () => {\n                beforeEach(() => {\n                    userModelDefinition.create({\n                        organisationUnits: [\n                            { name: 'Kenya', id: 'FTRrcoaog83' },\n                            { name: 'Oslo', id: 'P3jJH5Tu5VC' },\n                        ],\n                    });\n                });\n\n                it('should create a ModelCollectionProperty.create for a collection of objects', () => {\n                    expect(ModelCollectionProperty.create).toHaveBeenCalledTimes(9);\n                });\n\n                it('should create a ModelCollectionProperty with the correct values', () => {\n                    expect(ModelCollectionProperty.create.mock.calls[0]).toMatchSnapshot();\n                });\n            });\n\n            describe('without data', () => {\n                beforeEach(() => {\n                    userModelDefinition.create();\n                });\n\n                it('should create a ModelCollectionProperty.create for a collection of objects', () => {\n                    expect(ModelCollectionProperty.create).toHaveBeenCalledTimes(3);\n                });\n\n                it('should create a ModelCollectionProperty without data', () => {\n                    const passedModelInstance = ModelCollectionProperty.create.mock.calls[0][0];\n                    const modelDefinitionForCollection = ModelCollectionProperty.create.mock.calls[0][1];\n                    const modelCollectionPropName = ModelCollectionProperty.create.mock.calls[0][2];\n                    const modelCollectionData = ModelCollectionProperty.create.mock.calls[0][3];\n\n                    // First argument to ModelCollectionPrototype.create\n                    expect(passedModelInstance).toMatchSnapshot();\n\n                    // Second argument to ModelCollectionProperty.create\n                    expect(modelDefinitionForCollection.name).toBe(orgunitModelDefinition.name);\n                    expect(modelDefinitionForCollection.plural).toBe(orgunitModelDefinition.plural);\n\n                    // Third argument to ModelCollectionProperty.create\n                    // teiSearchOrganisationUnits is the first collection property on the user model\n                    expect(modelCollectionPropName).toEqual('teiSearchOrganisationUnits');\n\n                    // Fourth argument to ModelCollectionProperty.create\n                    expect(modelCollectionData).toEqual(undefined);\n                });\n            });\n        });\n    });\n\n    describe('get', () => {\n        let dataElementModelDefinition;\n\n        beforeEach(() => {\n            ModelDefinition.prototype.api = {\n                get: jest.fn().mockReturnValue(new Promise((resolve) => {\n                    resolve({ name: 'BS_COLL (N, DSD) TARGET: Blood Units Donated' });\n                })),\n            };\n\n            dataElementModelDefinition = ModelDefinition.createFromSchema(fixtures.get('/api/schemas/dataElement'));\n        });\n\n        it('should throw an error when the given id is not a string', () => {\n            function shouldThrow() {\n                dataElementModelDefinition.get();\n            }\n\n            expect(shouldThrow).toThrowError('Identifier should be provided');\n        });\n\n        it('should return a promise', () => {\n            const modelPromise = dataElementModelDefinition\n                .get('d4343fsss');\n\n            expect(modelPromise.then).toBeInstanceOf(Function);\n        });\n\n        it('should call the api for the requested id', () => {\n            dataElementModelDefinition.get('d4343fsss');\n\n            expect(ModelDefinition.prototype.api.get).toBeCalledWith('https://play.dhis2.org/demo/api/dataElements/d4343fsss', { fields: ':all,attributeValues[:all,attribute[id,name,displayName]]' });\n        });\n\n        it('should set the data onto the model when it is available', () => dataElementModelDefinition.get('d4343fsss')\n            .then((dataElementModel) => {\n                expect(dataElementModel.name).toBe('BS_COLL (N, DSD) TARGET: Blood Units Donated');\n            }));\n\n        it('should reject the promise with the message when the request fails', () => {\n            ModelDefinition.prototype.api.get = jest.fn()\n                .mockReturnValue(Promise.reject({\n                    httpStatus: 'Not Found',\n                    httpStatusCode: 404,\n                    status: 'ERROR',\n                    message: 'DataElementCategory with id sdfsf could not be found.',\n                }));\n\n            return dataElementModelDefinition.get('d4343fsss')\n                .catch((dataElementError) => {\n                    expect(dataElementError).toBe('DataElementCategory with id sdfsf could not be found.');\n                });\n        });\n\n        it('should reject with the promise payload when no message was returned', () => {\n            const responsePayload = '500 error string';\n\n            ModelDefinition.prototype.api.get = jest.fn().mockReturnValue(Promise.reject(responsePayload));\n\n            return dataElementModelDefinition.get('d4343fsss')\n                .catch((dataElementError) => {\n                    expect(dataElementError).toBe(responsePayload);\n                });\n        });\n\n        describe('multiple', () => {\n            it('should return a ModelCollection object', () => {\n                const dataElementsResult = fixtures.get('/api/dataElements');\n                ModelDefinition.prototype.api.get = jest.fn().mockReturnValue(Promise.resolve(dataElementsResult));\n\n                return dataElementModelDefinition.get(['id1', 'id2'])\n                    .then((dataElementCollection) => {\n                        expect(dataElementCollection).toBeInstanceOf(ModelCollection);\n                    });\n            });\n\n            it('should call the api with the in filter', () => {\n                const dataElementsResult = fixtures.get('/api/dataElements');\n                ModelDefinition.prototype.api.get = jest.fn().mockReturnValue(Promise.resolve(dataElementsResult));\n\n                return dataElementModelDefinition.get(['id1', 'id2'])\n                    .then(() => {\n                        expect(ModelDefinition.prototype.api.get).toBeCalledWith('https://play.dhis2.org/demo/api/dataElements', { filter: ['id:in:[id1,id2]'], fields: ':all' });\n                    });\n            });\n        });\n    });\n\n    describe('list', () => {\n        const dataElementsResult = fixtures.get('/api/dataElements');\n        let dataElementModelDefinition;\n\n        beforeEach(() => {\n            ModelDefinition.prototype.api = {\n                get: jest.fn().mockReturnValue(new Promise((resolve) => {\n                    resolve(dataElementsResult);\n                })),\n            };\n\n            dataElementModelDefinition = ModelDefinition.createFromSchema(fixtures.get('/api/schemas/dataElement'));\n        });\n\n        it('should be a function', () => {\n            expect(dataElementModelDefinition.list).toBeInstanceOf(Function);\n        });\n\n        it('should call the get method on the api', () => {\n            dataElementModelDefinition.list();\n\n            expect(ModelDefinition.prototype.api.get).toBeCalled();\n        });\n\n        it('should return a promise', () => {\n            expect(dataElementModelDefinition.list()).toBeInstanceOf(Promise);\n        });\n\n        it('should call the get method on the api with the endpoint of the model', () => {\n            dataElementModelDefinition.list();\n\n            expect(ModelDefinition.prototype.api.get).toBeCalledWith('https://play.dhis2.org/demo/api/dataElements', { fields: ':all' });\n        });\n\n        it('should return a model collection object', () => dataElementModelDefinition.list()\n            .then((dataElementCollection) => {\n                expect(dataElementCollection).toBeInstanceOf(ModelCollection);\n            }));\n\n        it('should call the model collection constructor with the correct data', () => dataElementModelDefinition.list()\n            .then(() => {\n                const firstCallArguments = ModelCollection.create.mock.calls[0];\n\n                expect(firstCallArguments).toMatchSnapshot();\n            }));\n\n        it('should call the api get method with the correct parameters after filters are set', () => {\n            dataElementModelDefinition\n                .filter()\n                .on('name').like('John')\n                .list();\n\n            expect(ModelDefinition.prototype.api.get).toBeCalledWith('https://play.dhis2.org/demo/api/dataElements', { fields: ':all', filter: ['name:like:John'] });\n        });\n\n        it('should return a separate modelDefinition when filter is called', () => {\n            expect(dataElementModelDefinition.filter).not.toBe(dataElementModelDefinition);\n        });\n\n        it('should not influence the list method of the default modelDefinition', () => {\n            dataElementModelDefinition\n                .filter().on('name').like('John')\n                .list();\n\n            dataElementModelDefinition.list();\n\n            expect(ModelDefinition.prototype.api.get).toBeCalledWith('https://play.dhis2.org/demo/api/dataElements', { fields: ':all' });\n            expect(ModelDefinition.prototype.api.get).toBeCalledWith('https://play.dhis2.org/demo/api/dataElements', { fields: ':all', filter: ['name:like:John'] });\n        });\n\n        it('should support multiple filters', () => {\n            dataElementModelDefinition\n                .filter()\n                .on('name')\n                .like('John')\n                .filter()\n                .on('username')\n                .equals('admin')\n                .list();\n\n            expect(ModelDefinition.prototype.api.get).toBeCalledWith('https://play.dhis2.org/demo/api/dataElements', { fields: ':all', filter: ['name:like:John', 'username:eq:admin'] });\n        });\n\n        it('should work with operator-filter', () => {\n            dataElementModelDefinition\n                .filter()\n                .on('name')\n                .operator('like', 'John')\n                .list();\n\n            expect(ModelDefinition.prototype.api.get).toBeCalledWith('https://play.dhis2.org/demo/api/dataElements', { fields: ':all', filter: ['name:like:John'] });\n        });\n\n        it('should work with chained operator-filter', () => {\n            dataElementModelDefinition\n                .filter()\n                .on('name')\n                .operator('like', 'John')\n                .filter()\n                .on('username')\n                .operator('token', 'admin')\n                .list();\n\n            expect(ModelDefinition.prototype.api.get).toBeCalledWith('https://play.dhis2.org/demo/api/dataElements', { fields: ':all', filter: ['name:like:John', 'username:token:admin'] });\n        });\n\n        it('should work with rootJunction', () => {\n            dataElementModelDefinition\n                .filter()\n                .logicMode('OR')\n                .on('name')\n                .like('John')\n                .filter()\n                .logicMode('OR')\n                .on('username')\n                .token('admin')\n                .list();\n\n            expect(ModelDefinition.prototype.api.get).toBeCalledWith('https://play.dhis2.org/demo/api/dataElements', { fields: ':all', filter: ['name:like:John', 'username:token:admin'], rootJunction: 'OR' });\n        });\n\n        it('should not try to filter by \"undefined\"', () => {\n            dataElementModelDefinition\n                .list({ filter: undefined });\n\n            expect(ModelDefinition.prototype.api.get).toBeCalledWith('https://play.dhis2.org/demo/api/dataElements', { fields: ':all' });\n        });\n\n        it('should work by constructing filters before calling list', () => {\n            const filters = dataElementModelDefinition.filter();\n            filters.logicMode('OR');\n            filters.on('name').like('John');\n            filters.on('username').token('admin');\n            filters.list();\n\n            expect(ModelDefinition.prototype.api.get).toBeCalledWith('https://play.dhis2.org/demo/api/dataElements', { fields: ':all', filter: ['name:like:John', 'username:token:admin'], rootJunction: 'OR' });\n        });\n    });\n\n    describe('clone', () => {\n        const dataElementsResult = fixtures.get('/api/dataElements');\n        let dataElementModelDefinition;\n\n        beforeEach(() => {\n            ModelDefinition.prototype.api = {\n                get: jest.fn().mockReturnValue(new Promise((resolve) => {\n                    resolve(dataElementsResult);\n                })),\n            };\n\n            dataElementModelDefinition = ModelDefinition.createFromSchema(fixtures.get('/api/schemas/dataElement'));\n        });\n\n        it('should be a method', () => {\n            expect(dataElementModelDefinition.clone).toBeInstanceOf(Function);\n        });\n\n        it('should return a cloned modelDefinition', () => {\n            expect(dataElementModelDefinition.clone()).not.toBe(dataElementModelDefinition);\n        });\n\n        it('should deep equal the creator', () => {\n            const clonedDefinition = dataElementModelDefinition.clone();\n\n            expect(clonedDefinition.name).toBe(dataElementModelDefinition.name);\n            expect(clonedDefinition.plural).toBe(dataElementModelDefinition.plural);\n            expect(clonedDefinition.isMetaData).toBe(dataElementModelDefinition.isMetaData);\n            expect(clonedDefinition.apiEndpoint).toBe(dataElementModelDefinition.apiEndpoint);\n            expect(clonedDefinition.modelProperties).toBe(dataElementModelDefinition.modelProperties);\n        });\n\n        it('should not have reset the filter', () => {\n            const clonedDefinition = dataElementModelDefinition.clone();\n\n            expect(clonedDefinition.filters).not.toBe(dataElementModelDefinition.filters);\n        });\n\n        it('should still work like normal modelDefinition', () => {\n            const clonedDefinition = dataElementModelDefinition.clone();\n\n            clonedDefinition.list();\n\n            expect(ModelDefinition.prototype.api.get).toBeCalledWith('https://play.dhis2.org/demo/api/dataElements', { fields: ':all' });\n        });\n    });\n\n    describe('saving', () => {\n        let apiUpdateStub;\n        let apiPostStub;\n        let model;\n        let userModelDefinition;\n\n        beforeEach(() => {\n            const singleUserAllFields = fixtures.get('/singleUserAllFields');\n\n            apiUpdateStub = jest.fn().mockReturnValue(new Promise((resolve) => {\n                resolve({ name: 'BS_COLL (N, DSD) TARGET: Blood Units Donated' });\n            }));\n            apiPostStub = jest.fn().mockReturnValue(new Promise((resolve) => {\n                resolve({ name: 'BS_COLL (N, DSD) TARGET: Blood Units Donated' });\n            }));\n\n            ModelDefinition.prototype.api = {\n                update: apiUpdateStub,\n                post: apiPostStub,\n            };\n\n            userModelDefinition = ModelDefinition.createFromSchema(fixtures.get('/api/schemas/user'));\n\n            class Model { // eslint-disable-line no-shadow\n                constructor() {\n                    this.dataValues = {};\n                    this[DIRTY_PROPERTY_LIST] = new Set([]);\n                    this.getCollectionChildrenPropertyNames = jest.fn().mockReturnValue([]);\n                    this.getEmbeddedObjectCollectionPropertyNames = jest.fn().mockReturnValue([]);\n                    this.getReferenceProperties = jest.fn().mockReturnValue([]);\n                }\n            }\n            model = new Model();\n\n            Object.keys(singleUserAllFields).forEach((key) => {\n                model.dataValues[key] = singleUserAllFields[key];\n                model[key] = singleUserAllFields[key];\n            });\n\n            Object.defineProperty(model, 'modelDefinition', { value: userModelDefinition });\n        });\n\n        describe('save()', () => {\n            it('should be a method that returns a promise', () => {\n                expect(userModelDefinition.save(model)).toBeInstanceOf(Promise);\n            });\n\n            it('should call the update method on the api', () => {\n                userModelDefinition.save(model);\n\n                expect(apiUpdateStub).toBeCalled();\n            });\n\n            it('should pass only the properties that are owned to the api', () => {\n                const expectedPayload = fixtures.get('/singleUserOwnerFields');\n\n                userModelDefinition.save(model);\n\n                expect(apiUpdateStub.mock.calls[0][1]).toEqual(expectedPayload);\n            });\n\n            it('should let a falsy value pass as an owned property', () => {\n                const expectedPayload = fixtures.get('/singleUserOwnerFields');\n                expectedPayload.surname = '';\n\n                model.dataValues.surname = '';\n                userModelDefinition.save(model);\n\n                expect(apiUpdateStub.mock.calls[0][1].surname).toEqual(expectedPayload.surname);\n            });\n\n            it('should not let undefined pass as a value', () => {\n                const expectedPayload = fixtures.get('/singleUserOwnerFields');\n                delete expectedPayload.surname;\n\n                model.dataValues.surname = undefined;\n                userModelDefinition.save(model);\n\n                expect(apiUpdateStub.mock.calls[0][1].surname).toEqual(expectedPayload.surname);\n            });\n\n            it('should not let null pass as a value', () => {\n                const expectedPayload = fixtures.get('/singleUserOwnerFields');\n                delete expectedPayload.surname;\n\n                model.dataValues.surname = null;\n                userModelDefinition.save(model);\n\n                expect(apiUpdateStub.mock.calls[0][1].surname).toEqual(expectedPayload.surname);\n            });\n\n            it('should save to the url set on the model', () => {\n                userModelDefinition.save(model);\n\n                expect(apiUpdateStub.mock.calls[0][0]).toBe(fixtures.get('/singleUserAllFields').href);\n            });\n\n            it('should be able to construct a valid save url without an href set on the model', () => {\n                delete model.dataValues.href;\n                userModelDefinition.save(model);\n                expect(apiUpdateStub.mock.calls[0][0]).toBe(fixtures.get('/singleUserAllFields').href);\n            });\n\n            it('should call the update method on the api with the replace strategy option set to true', () => {\n                userModelDefinition.save(model);\n\n                expect(apiUpdateStub.mock.calls[0][2]).toBe(true);\n            });\n\n            it('should save a new object using a post', () => {\n                // Objects without id are concidered \"new\"\n                delete model.id;\n\n                userModelDefinition.save(model);\n\n                expect(apiPostStub).toBeCalled();\n            });\n\n            it('should translate a collection property to an array of ids', () => {\n                model.getCollectionChildrenPropertyNames.mockReturnValue(['organisationUnits']);\n                model.dataValues.organisationUnits = new Set([\n                    { name: 'Kenya', id: 'FTRrcoaog83' },\n                    { name: 'Oslo', id: 'P3jJH5Tu5VC' },\n                ]);\n\n                userModelDefinition.save(model);\n\n                expect(apiUpdateStub.mock.calls[0][1].organisationUnits)\n                    .toEqual([{ id: 'FTRrcoaog83' }, { id: 'P3jJH5Tu5VC' }]);\n            });\n\n            it('should not add invalid objects that do not have an id', () => {\n                model.getCollectionChildrenPropertyNames.mockReturnValue(['organisationUnits']);\n                model.dataValues.organisationUnits = new Set([\n                    { name: 'Kenya' },\n                    { name: 'Oslo', id: 'P3jJH5Tu5VC' },\n                ]);\n\n                userModelDefinition.save(model);\n\n                expect(apiUpdateStub.mock.calls[0][1].organisationUnits).toEqual([{ id: 'P3jJH5Tu5VC' }]);\n            });\n        });\n\n        describe('saveNew()', () => {\n            it('should be a method that returns a promise', () => {\n                expect(userModelDefinition.saveNew(model)).toBeInstanceOf(Promise);\n            });\n\n            it('should call the update method on the api', () => {\n                userModelDefinition.saveNew(model);\n\n                expect(apiPostStub).toBeCalled();\n            });\n\n            it('should pass only the properties that are owned to the api', () => {\n                const expectedPayload = fixtures.get('/singleUserOwnerFields');\n\n                userModelDefinition.saveNew(model);\n\n                expect(apiPostStub.mock.calls[0][1]).toEqual(expectedPayload);\n            });\n        });\n    });\n\n    describe('delete', () => {\n        let apiDeleteStub;\n        let model;\n        let userModelDefinition;\n\n        beforeEach(() => {\n            const singleUserAllFields = fixtures.get('/singleUserAllFields');\n\n            apiDeleteStub = jest.fn().mockReturnValue(new Promise((resolve) => {\n                resolve();\n            }));\n\n            ModelDefinition.prototype.api = {\n                delete: apiDeleteStub,\n            };\n\n            userModelDefinition = ModelDefinition.createFromSchema(fixtures.get('/api/schemas/user'));\n\n            class Model { // eslint-disable-line no-shadow\n                constructor() {\n                    this.dataValues = {};\n                    this.modelDefinition = userModelDefinition;\n                    this[DIRTY_PROPERTY_LIST] = new Set([]);\n                }\n            }\n            model = new Model();\n\n            Object\n                .keys(singleUserAllFields)\n                .forEach((key) => {\n                    model.dataValues[key] = singleUserAllFields[key];\n                    model[key] = singleUserAllFields[key];\n                });\n        });\n\n        it('should call the delete method on the api', () => {\n            userModelDefinition.delete(model);\n\n            expect(apiDeleteStub).toBeCalled();\n        });\n\n        it('should call delete with the url', () => {\n            userModelDefinition.delete(model);\n\n            expect(apiDeleteStub).toBeCalledWith(model.href);\n        });\n\n        it('should return a promise', () => {\n            expect(userModelDefinition.delete(model)).toBeInstanceOf(Promise);\n        });\n\n        it('should create the url from the endpoint and model.id when the href is not available', () => {\n            model.dataValues.href = undefined;\n\n            userModelDefinition.delete(model);\n\n            expect(apiDeleteStub).toBeCalledWith('http://localhost:8080/dhis/api/users/aUplAx3DOWy');\n        });\n    });\n\n    describe('getOwnedPropertyNames', () => {\n        let dataElementModelDefinition;\n\n        beforeEach(() => {\n            dataElementModelDefinition = ModelDefinition.createFromSchema(fixtures.get('/api/schemas/dataElement'));\n        });\n\n        it('should return only the owned properties', () => {\n            const expectedDataElementProperties = [\n                'lastUpdated', 'code', 'id', 'created', 'name', 'formName', 'legendSets',\n                'shortName', 'zeroIsSignificant', 'publicAccess', 'commentOptionSet',\n                'aggregationType', 'valueType', 'url', 'optionSet',\n                'domainType', 'description', 'categoryCombo', 'user',\n                'aggregationLevels', 'attributeValues', 'userAccesses', 'userGroupAccesses', 'translations',\n            ].sort();\n            const ownProperties = dataElementModelDefinition.getOwnedPropertyNames();\n\n            expect(ownProperties.sort()).toEqual(expectedDataElementProperties);\n        });\n    });\n\n    describe('isTranslatable', () => {\n        let dataElementModelDefinition;\n        let userModelDefinition;\n\n        beforeEach(() => {\n            dataElementModelDefinition = ModelDefinition.createFromSchema(fixtures.get('/api/schemas/dataElement'));\n            userModelDefinition = ModelDefinition.createFromSchema(fixtures.get('/api/schemas/user'));\n        });\n\n        it('should be a function', () => {\n            expect(typeof dataElementModelDefinition.isTranslatable).toBe('function');\n        });\n\n        it('should return true if the schema supports translations', () => {\n            expect(dataElementModelDefinition.isTranslatable()).toBe(true);\n        });\n\n        it('should return false if the schema can not be translated', () => {\n            expect(userModelDefinition.isTranslatable()).toBe(false);\n        });\n    });\n\n    describe('getTranslatableProperties()', () => {\n        let dataElementModelDefinition;\n\n        beforeEach(() => {\n            dataElementModelDefinition = ModelDefinition.createFromSchema(fixtures.get('/api/schemas/dataElement'));\n        });\n\n        it('should be a function', () => {\n            expect(typeof dataElementModelDefinition.getTranslatableProperties).toBe('function');\n        });\n\n        it('should return the translatable properties', () => {\n            expect(dataElementModelDefinition.getTranslatableProperties())\n                .toEqual(['description', 'formName', 'name', 'shortName']);\n        });\n\n        it('should return only the properties that have a translatableKey', () => {\n            const dataElementSchema = fixtures.get('/api/schemas/dataElement');\n            dataElementSchema.properties = dataElementSchema.properties\n                .map(({ translationKey, ...props }) => ({ ...props }));\n\n            dataElementModelDefinition = ModelDefinition.createFromSchema(dataElementSchema);\n\n            expect(dataElementModelDefinition.getTranslatableProperties()).toEqual([]);\n        });\n    });\n\n    describe('getTranslatablePropertiesWithKeys()', () => {\n        let dataElementModelDefinition;\n\n        beforeEach(() => {\n            dataElementModelDefinition = ModelDefinition.createFromSchema(fixtures.get('/api/schemas/dataElement'));\n        });\n\n        it('should be a function', () => {\n            expect(typeof dataElementModelDefinition.getTranslatablePropertiesWithKeys).toBe('function');\n        });\n\n        it('should return the translatable properties with their keys', () => {\n            expect(dataElementModelDefinition.getTranslatablePropertiesWithKeys()).toEqual([\n                { name: 'description', translationKey: 'DESCRIPTION' },\n                { name: 'formName', translationKey: 'FORM_NAME' },\n                { name: 'name', translationKey: 'NAME' },\n                { name: 'shortName', translationKey: 'SHORT_NAME' },\n            ]);\n        });\n\n        it('should return only the properties that have a translatableKey', () => {\n            const dataElementSchema = fixtures.get('/api/schemas/dataElement');\n            dataElementSchema.properties = dataElementSchema.properties\n                .map(({ translationKey, ...props }) => ({ ...props }));\n\n            dataElementModelDefinition = ModelDefinition.createFromSchema(dataElementSchema);\n\n            expect(dataElementModelDefinition.getTranslatablePropertiesWithKeys()).toEqual([]);\n        });\n    });\n});\n\ndescribe('ModelDefinition subsclasses', () => {\n    let getOnApiStub;\n\n    beforeEach(() => {\n        getOnApiStub = jest.fn()\n            .mockReturnValue(Promise.resolve());\n\n        ModelDefinition.prototype.api = {\n            get: getOnApiStub,\n        };\n    });\n\n    describe('UserModelDefinition', () => {\n        let UserModelDefinitionClass;\n        let userModelDefinition;\n\n        beforeEach(() => {\n            UserModelDefinitionClass = ModelDefinition.specialClasses.user;\n\n            userModelDefinition = new UserModelDefinitionClass({\n                singular: 'user',\n                plural: 'users',\n                displayName: 'Users',\n            },\n            {},\n            {},\n            );\n        });\n\n        it('should be instance of Model', () => {\n            expect(userModelDefinition).toBeInstanceOf(ModelDefinition);\n        });\n\n        it('should call the get function with the extra parameters', () => {\n            userModelDefinition.get('myUserId');\n\n            expect(getOnApiStub).toBeCalledWith('/myUserId', { fields: ':all,userCredentials[:owner]' });\n        });\n    });\n\n    describe('DataSetModelDefinition', () => {\n        let DataSetModelDefinitionClass;\n        let dataSetModelDefinition;\n\n        beforeEach(() => {\n            DataSetModelDefinitionClass = ModelDefinition.specialClasses.dataSet;\n\n            dataSetModelDefinition = new DataSetModelDefinitionClass(\n                fixtures.get('/api/schemas/dataSet'),\n                {},\n                {},\n                {},\n                {},\n            );\n        });\n\n        it('handles compulsory data element operands correctly', () => {\n            const dataSet = dataSetModelDefinition.create({\n                compulsoryDataElementOperands: ['one', 'two', 'three'],\n            });\n            expect(dataSet).toBeInstanceOf(Model);\n            expect(dataSet.dataValues.compulsoryDataElementOperands).toEqual(['one', 'two', 'three']);\n        });\n    });\n\n    describe('OrganisationUnitDefinition', () => {\n        let OrganisationUnitModelDefinitionClass;\n        let organisationUnitModelDefinition;\n\n        beforeEach(() => {\n            OrganisationUnitModelDefinitionClass = ModelDefinition.specialClasses.organisationUnit;\n\n            organisationUnitModelDefinition = new OrganisationUnitModelDefinitionClass({\n                singular: 'organisationUnit',\n                plural: 'organisationUnits',\n                apiEndpoint: 'organisationUnits',\n            },\n            {},\n            {},\n            {},\n            {},\n            );\n        });\n\n        it('should use the special root orgunit id when fetching lists', (done) => {\n            organisationUnitModelDefinition.list({ root: 'myRootId' }).catch(() => {\n                expect(getOnApiStub).toBeCalledWith('organisationUnits/myRootId', { fields: ':all' });\n                done();\n            });\n        });\n\n        it('should handle list queries without special `root` parameters', (done) => {\n            organisationUnitModelDefinition.list().catch(() => {\n                expect(getOnApiStub).toBeCalledWith('organisationUnits', { fields: ':all' });\n                done();\n            });\n        });\n    });\n});\n"],"file":"ModelDefinition.spec.js"}