{"version":3,"sources":["../../src/system/SystemSettings.js"],"names":["SystemSettings","api","Api","getApi","settings","Promise","resolve","get","then","systemSettingsKey","processValue","value","JSON","parse","e","reject","TypeError","options","headers","accept","join","undefined","response","Error","settingUrl","length","delete","post"],"mappings":"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","sourcesContent":["import { isString } from '../lib/check'\nimport Api from '../api/Api'\n\n/**\n * @description\n * Handles communication with the systemSettings endpoint. Can be used to get or save systemSettings.\n *\n * @memberof module:system\n * @requires lib/check\n * @requires api/Api\n */\n// TODO: Return the values from the local cache if we have not updated it? We could\nclass SystemSettings {\n    constructor(api = Api.getApi()) {\n        this.api = api\n    }\n\n    /**\n     * Loads all the system settings in the system and returns them as an object from the promise.\n     *\n     * @returns {Promise} Promise that resolves with the systemsettings object from the api.\n     *\n     * @example\n     * d2.system.settings.all()\n     *  .then(systemSettings => {\n     *    console.log('Analytics was last updated on: ' + systemSettings.keyLastSuccessfulResourceTablesUpdate);\n     *  });\n     */\n    all() {\n        return this.settings\n            ? Promise.resolve(this.settings)\n            : this.api.get('systemSettings').then(settings => {\n                  this.settings = settings\n                  return Promise.resolve(this.settings)\n              })\n    }\n\n    /**\n     * Get a single systemSetting for the given key.\n     *\n     * This will use the cached value of the key if it has been previously loaded.\n     *\n     * @param {String} systemSettingsKey The identifier of the system setting that should be retrieved.\n     * @returns {Promise} A promise that resolves with the value or will fail if the value is not available.\n     *\n     * @example\n     * d2.system.settings.get('keyLastSuccessfulResourceTablesUpdate')\n     *  .then(systemSettingsValue => {\n     *    console.log('Analytics was last updated on: ' + systemSettingsValue);\n     *  });\n     */\n    get(systemSettingsKey) {\n        if (this.settings && this.settings[systemSettingsKey]) {\n            return Promise.resolve(this.settings[systemSettingsKey])\n        }\n\n        function processValue(value) {\n            // Attempt to parse the response as JSON. If this fails we return the value as is.\n            try {\n                return JSON.parse(value)\n            } catch (e) {\n                return value\n            }\n        }\n\n        return new Promise((resolve, reject) => {\n            if (!isString(systemSettingsKey)) {\n                throw new TypeError(\n                    'A \"key\" parameter should be specified when calling get() on systemSettings'\n                )\n            }\n\n            const options = { headers: { accept: 'text/plain' } }\n            this.api\n                .get(\n                    ['systemSettings', systemSettingsKey].join('/'),\n                    undefined,\n                    options\n                )\n                .then(response => {\n                    if (response) {\n                        resolve(processValue(response))\n                    }\n                    reject(\n                        new Error(\n                            'The requested systemSetting has no value or does not exist.'\n                        )\n                    )\n                })\n        })\n    }\n\n    set(systemSettingsKey, value) {\n        const settingUrl = ['systemSettings', systemSettingsKey].join('/')\n        if (value === null || `${value}`.length === 0) {\n            return this.api.delete(settingUrl).then(response => {\n                // Update cache if present\n                if (this.settings && this.settings[systemSettingsKey]) {\n                    delete this.settings[systemSettingsKey]\n                }\n                return response\n            })\n        }\n        return this.api\n            .post(settingUrl, value, {\n                headers: { 'Content-Type': 'text/plain' },\n            })\n            .then(response => {\n                // update cache if present\n                if (this.settings) {\n                    this.settings[systemSettingsKey] = value\n                }\n                return response\n            })\n    }\n}\n\nexport default SystemSettings\n"],"file":"SystemSettings.js"}