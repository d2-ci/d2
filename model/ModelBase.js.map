{"version":3,"sources":["../../src/model/ModelBase.js"],"names":["modelValidator","getModelValidation","DIRTY_PROPERTY_LIST","Symbol","ModelBase","modelDefinition","modelValidations","validate","then","validationState","status","Promise","reject","saveNew","call","apiResponse","includeChildren","isDirty","resolve","save","validationMessages","unique","current","property","indexOf","push","asyncRemoteValidation","model","validateAgainstSchema","catch","remoteMessages","Array","isArray","concat","length","fields","map","validationMessage","reduce","messages","message","modelClone","create","Object","keys","dirty","delete","hasDirtyChildren","getDirtyChildren","forEach","value","resetDirtyState","clear","from","values","filter","propertyName","getCollectionChildrenPropertyNames","getCollectionChildren"],"mappings":"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","file":"ModelBase.js","sourcesContent":["import ModelValidation from './ModelValidation';\nimport { getJSONForProperties } from './helpers/json';\nimport {\n    hasModelValidationForProperty,\n    pickTypeFromModelValidation,\n    pickEmbeddedObjectFromModelValidation,\n    pickOwnerFromModelValidation,\n    updateModelFromResponseStatus,\n} from './helpers/models';\n\nconst modelValidator = ModelValidation.getModelValidation();\n\nexport const DIRTY_PROPERTY_LIST = Symbol('List to keep track of dirty properties');\n\n/**\n * Base class that supplies functionality to the Model classes\n *\n * @memberof module:model\n */\nclass ModelBase {\n    constructor() {\n        this.modelDefinition = {\n            modelValidations: {},\n        };\n    }\n    /**\n     * @returns {Promise} Returns a promise that resolves when the model has been saved or rejected with the result from\n     * the `validate()` call.\n     *\n     * @definition\n     * Will save model as a new object to the server using a POST request. This method would generally be used if\n     * you're creating models with pre-specified IDs. Note that this does not check if the model is marked as dirty.\n     */\n    create() {\n        return this.validate()\n            .then((validationState) => {\n                if (!validationState.status) {\n                    return Promise.reject(validationState);\n                }\n\n                return this.modelDefinition\n                    .saveNew(this)\n                    .then(apiResponse => updateModelFromResponseStatus.call(this, apiResponse));\n            });\n    }\n\n    /**\n     * @returns {Promise} Returns a promise that resolves when the model has been saved\n     * or rejects with the result from the `validate()` call.\n     *\n     * @description\n     * Checks if the model is dirty. When the model is dirty it will check if the values of the model are valid by calling\n     * `validate`. If this is correct it will attempt to save the [Model](#/model/Model) to the api.\n     *\n     * ```js\n     * myModel.save()\n     *   .then((message) => console.log(message));\n     * ```\n     */\n    save(includeChildren) {\n        // Calling save when there's nothing to be saved is a no-op\n        if (!this.isDirty(includeChildren)) {\n            return Promise.resolve({});\n        }\n\n        return this.validate()\n            .then((validationState) => {\n                if (!validationState.status) {\n                    return Promise.reject(validationState);\n                }\n\n                return this.modelDefinition\n                    .save(this)\n                    .then(apiResponse => updateModelFromResponseStatus.call(this, apiResponse));\n            });\n    }\n\n    /**\n     * @returns {Promise} Promise that resolves with an object with a status property that represents if the model\n     * is valid or not the fields array will return the names of the fields that are invalid.\n     *\n     * @description\n     * This will run the validations on the properties which have validations set. Normally these validations are defined\n     * through the DHIS2 schema. It will check min/max for strings/numbers etc. Additionally it will\n     * run model validations against the schema.\n     *\n     * ```js\n     * myModel.validate()\n     *  .then(myModelStatus => {\n     *    if (myModelStatus.status === false) {\n     *      myModelStatus.fields.forEach((fieldName) => console.log(fieldName));\n     *    }\n     * });\n     * ```\n     *\n     * @deprecated The api now validates the object on save, so doing the additional request to validate the object\n     * is not very useful anymore as the validation on POST/PUT is more extensive than the /api/schemas validation.\n     */\n    validate() {\n        return new Promise((resolve, reject) => {\n            let validationMessages = [];\n\n            function unique(current, property) {\n                if (property && current.indexOf(property) === -1) {\n                    current.push(property);\n                }\n                return current;\n            }\n\n            function asyncRemoteValidation(model) {\n                return modelValidator.validateAgainstSchema(model);\n            }\n\n            // Run async validation against the api\n            asyncRemoteValidation(this)\n                .catch((remoteMessages) => {\n                    // Errors are ok in this case\n                    if (Array.isArray(remoteMessages)) {\n                        return remoteMessages;\n                    }\n                    return Promise.reject(remoteMessages);\n                })\n                .then((remoteMessages) => {\n                    validationMessages = validationMessages.concat(remoteMessages);\n\n                    const validationState = {\n                        status: remoteMessages.length === 0,\n                        fields: validationMessages\n                            .map(validationMessage => validationMessage.property)\n                            .reduce(unique, []),\n                        messages: validationMessages,\n                    };\n                    resolve(validationState);\n                })\n                .catch(message => reject(message));\n        });\n    }\n\n    // TODO: Cloning large graphs is very slow\n    clone() {\n        const modelClone = this.modelDefinition.create(\n            getJSONForProperties(\n                this,\n                Object.keys(this.modelDefinition.modelValidations),\n                true,\n            ),\n        );\n\n        if (this.isDirty()) {\n            modelClone.dirty = this.isDirty(true);\n        }\n\n        return modelClone;\n    }\n\n    /**\n     * Deletes the object from the server.\n     *\n     * This will fire a DELETE request to have the object be removed from the system.\n     *\n     * @returns {Promise} Resolves when the object was successfully deleted.\n     */\n    delete() {\n        return this.modelDefinition.delete(this);\n    }\n\n    /**\n     * Check if the model is in a dirty state and is a candidate to be saved.\n     *\n     * It will check for direct properties that have been changed and if any of the children have been changed.\n     *\n     * @param {boolean} includeChildren If set to false only the models direct properties will be checked.\n     * @returns {boolean} Returns true when the model is in a dirty state.\n     */\n    isDirty(includeChildren = true) {\n        return this.dirty || (includeChildren === true && this.hasDirtyChildren());\n    }\n\n    /**\n     * Utility method to reset the dirty state of the object.\n     *\n     * This is called after a successful save operation was done.\n     *\n     * @returns {ModelBase} Returns itself for potential chaining\n     */\n    resetDirtyState() {\n        this.dirty = false;\n\n        // Also set it's children to be clean\n        this.getDirtyChildren()\n            .forEach((value) => {\n                if (value.resetDirtyState) {\n                    value.resetDirtyState();\n                } else {\n                    value.dirty = false; // eslint-disable-line no-param-reassign\n                }\n            });\n\n        this[DIRTY_PROPERTY_LIST].clear();\n\n        return this;\n    }\n\n    /**\n     * Returns a list of properties that have been changed.\n     *\n     * @returns {Array<string>} The names of the properties that were changed.\n     */\n    getDirtyPropertyNames() {\n        return Array.from(this[DIRTY_PROPERTY_LIST].values());\n    }\n\n    /**\n     * This will return the properties that are marked as `owner: true` in the schema definition for the model.\n     *\n     * @returns {Array<any>} Returns an array of properties that are owned by the object\n     */\n    // TODO: This name is very misleading and should probably be renamed to something like `getOwnerProperties` (would be a breaking change)\n    getCollectionChildren() {\n        return Object.keys(this)\n            .filter(propertyName =>\n                this[propertyName] &&\n                hasModelValidationForProperty(this, propertyName) &&\n                pickOwnerFromModelValidation(propertyName, this),\n            )\n            .map(propertyName => this[propertyName]);\n    }\n\n    /**\n     * Gets the names of the properties that are collections on the object.\n     *\n     * These are usually the properties that contain ModelCollectionProperties.\n     *\n     * @returns {Array<string>} A list of property names that are marked as type `COLLECTION` in the schema.\n     */\n    getCollectionChildrenPropertyNames() {\n        return Object\n            .keys(this)\n            .filter(propertyName => pickTypeFromModelValidation(propertyName, this) === 'COLLECTION');\n    }\n\n    /**\n     * Gets the names of the properties that are references on the object.\n     *\n     * These are usually the properties that contain a Model of a different type. (e.g DataElement -> CategoryCombo)\n     *\n     * @returns {Array<string>} A list of property names that are marked as type `REFERENCE` in the schema.\n     */\n    getReferenceProperties() {\n        return Object\n            .keys(this)\n            .filter(propertyName =>\n                pickTypeFromModelValidation(propertyName, this) === 'REFERENCE' &&\n                pickEmbeddedObjectFromModelValidation(propertyName, this) === false,\n            );\n    }\n\n    /**\n     * Gets the names of the properties that are embedded objects.\n     *\n     * These the properties that are not represented by a different Model, but are just plain objects that are\n     * embedded within the current object.\n     *\n     * @returns {Array<string>} A list of property names of embedded objects.\n     */\n    getEmbeddedObjectCollectionPropertyNames() {\n        return this.getCollectionChildrenPropertyNames()\n            .filter(propertyName => pickEmbeddedObjectFromModelValidation(propertyName, this));\n    }\n\n    /**\n     * Returns a list of child properties that are marked as dirty. This uses the `getCollectionChildren()` method\n     * to retrieve the children properties and then checks if they are marked as dirty.\n     *\n     * The method does not check if direct properties are dirty as those are tracked on the Model itself.\n     *\n     * @returns {Array<any>}\n     */\n    getDirtyChildren() {\n        return this.getCollectionChildren()\n            .filter(property => property && (property.dirty === true));\n    }\n\n    /**\n     * Check if any of the Model's child collections are dirty.\n     *\n     * @returns {boolean} True when one of the children is dirty.\n     */\n    hasDirtyChildren() {\n        return this.getDirtyChildren().length > 0;\n    }\n\n    /**\n     * This method is generally intended to, by default, usefully serialize Model objects during JSON serialization.\n     *\n     * This method will take all the properties that are defined on the schema and create an object with the keys and\n     * values for those properties. This will remove any circular dependencies that could have occurred otherwise.\n     *\n     * @returns {Object}\n     */\n    toJSON() {\n        return getJSONForProperties(this, Object.keys(this.modelDefinition.modelValidations));\n    }\n}\n\nexport default new ModelBase();\n"]}