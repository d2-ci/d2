{"version":3,"sources":["../../src/model/index.js"],"names":["ModelBase","Model","ModelDefinition","ModelDefinitions","ModelValidation"],"mappings":";;;;;;AAmIA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe;AACXA,gCADW;AAEXC,wBAFW;AAGXC,4CAHW;AAIXC,8CAJW;AAKXC;AALW,C,EAzIf","file":"index.js","sourcesContent":["/**\n * @module model\n *\n * @description\n *\n * This page will give you an introduction on one of the largest and more complex parts of d2, the metadata models.\n *\n * Models are an abstraction on top of the dhis2 metadata api. We can use these models to interact with the dhis2 api.\n * The models are accessible on the `.models` property that is attached to the d2 instance (that is retrieved by calling\n * `getInstance()`).\n *\n * A schema is a description of a type of metadata object. To find out which schemas are available for you to use with\n * d2 take a look at https://play.dhis2.org/demo/api/schemas.json?fields=name,metadata. Any schema that is marked as\n * `metadata: true` can be used with d2.\n *\n * There are a few concepts that you should familiarise yourself with before you start. (More documentation on the following\n * concepts can be found on the classes that represent them.)\n *\n * ### ModelDefinitions\n *\n * A {@link module:model.ModelDefinition} is where it all starts. In d2 the schemas you have loaded are represented by a `ModelDefinition`.\n * A `ModelDefinition` is essentially a wrapper around the schemas that allows you to create `Model` instances for that\n * specific schema (e.g. the dataElementModelDefinition allows you to create dataElement Models).\n * ```js\n * d2.models.dataElement // This is the dataElement ModelDefinition\n *  .create()            // Creates a Model object based of the dataElement ModelDefinition\n * ```\n *\n * When working with the d2 object the `d2.models` object contains modelDefinitions for the schemas that you have loaded.\n * (by default that is all schemas). To get a modelDefinition for a specific schema you ask for it by the name of the schema.\n * A few examples other than the dataElement one from above would be:\n *\n * ```js\n * d2.models.user\n * d2.models.legendSet\n * d2.models.organisationUnit\n * ```\n *\n * The ModelDefinition allows you to load objects from the api. You can either load individual items or items in bulk.\n *\n * We can use it to get specific objects\n * ```js\n * d2.models.organisationUnit.get('ImspTQPwCqd')\n *  .then(organisationUnitModel => console.log(organisationUnitModel));\n * ```\n *\n * or to load a list of objects (by default paging is enabled and it will only load the first 50 entries).\n * ```js\n * d2.models.organisationUnit.list()\n *  .then(organisationUnitCollection => console.log(organisationUnitCollection));\n * ```\n *\n * The ModelDefinition also allows you to filter on properties using a programatic syntax. To find out which\n * filter methods are available you can a look at the {@link module:model.Filter|Filter} class.\n * ```js\n * d2.models.organisationUnit\n *  .filter().on('level').equals(2)\n *  .list()\n *  .then(organisationUnitCollection => console.log(organisationUnitCollection));\n * ```\n * Applying a filter like this will create a clone of the modelDefinition with the filter applied, so you can\n * store the reference to the cloned modelDefinition and use it later, without globally applying the filter everywhere.\n *\n * ```js\n * const organisationUnitsOnLevel3 = d2.models.organisationUnit\n *  .filter().on('level').equals(3);\n *\n * const organisationUnitsOnLevel3WithParent = organisationUnitsOnLevel3\n *  .filter().on('parent.id').equals('O6uvpzGd5pu);\n *\n * organisationUnitsOnLevel3\n *  .list({ paging: false }) // Loads all organisation units on level 3\n *  .then(organisationUnitCollection => console.log(organisationUnitCollection));\n *\n * organisationUnitsOnLevel3WithParent\n *  .list({ paging: false }) // Loads all organisation units on level 3 with O6uvpzGd5pu as their parent\n*   .then(organisationUnitCollection => console.log(organisationUnitCollection));\n * ```\n *\n * As you might have noticed we passed `{ paging: false }` to the `.list` method. Any options passed to the list method\n * (with the exception of filter) will be passed through as regular query parameters.\n *\n * If you ran the above examples you would notice that the `.list` method returns a ModelCollection.\n *\n * ## ModelCollection\n * A {@link module:model.ModelCollection|ModelCollection} is simple a collection of Model objects. The ModelCollection is\n * sometimes somewhat cumbersome to work with and often you would like to transform the ModelCollection to an array using\n * the `.toArray()` method or spreading the values of the ModelCollection.\n *\n * ```js\n * d2.models.organisationUnit\n *  .filter().on('level').equals(2)\n *  .list()\n *  .then(organisationUnitCollection => {\n *    let organisationUnits = organisationUnitCollection.toArray();\n *    // or\n *    organisationUnits = [...organisationUnitCollection.values()];\n * });\n * ```\n *\n * The ModelCollection does not only contain the Models, it also gives you access to a {@link module:model.Pager|Pager}.\n * The pager objects keeps track of which page was loaded and how many pages there are.\n *\n * The following example will load the first page of organisation units and then keep loading a new page every second\n * until we run out of pages.\n * ```js\n * function loadNextPage(pager, callback) {\n *   if (pager.hasNextPage()) {\n *     pager.getNextPage()\n *       .then(organisationUnitCollection  => {\n *         setTimeout(() => {\n *           callback(organisationUnitCollection);\n *           loadNextPage(organisationUnitCollection.pager, callback);\n *         }, 1000);\n *       });\n *   }\n * }\n *\n * const printCollection = collection => console.log(collection.toArray());\n *\n * d2.models.organisationUnit\n *   .list()\n *   .then(organisationUnitCollection => {\n *     printCollection(organisationUnitCollection);\n *     loadNextPage(organisationUnitCollection.pager, printCollection);\n *   });\n * ```\n *\n * ## Model\n * TODO: :(\n */\nimport ModelBase from './ModelBase';\nimport Model from './Model';\nimport ModelDefinition from './ModelDefinition';\nimport ModelDefinitions from './ModelDefinitions';\nimport ModelValidation from './ModelValidation';\n\nexport default {\n    ModelBase,\n    Model,\n    ModelDefinition,\n    ModelDefinitions,\n    ModelValidation,\n};\n"]}