{"version":3,"sources":["../../src/model/Filter.js"],"names":["FILTER_COMPARATORS","equals","like","ilike","notEqual","token","nToken","Filter","addFilterCallback","propertyName","comparator","filterValue","undefined","join","operator","Object","keys","forEach","filter","defineProperty","prototype","value","filterGetter"],"mappings":";;;;;;;AAAA;;;;;;;;AAEA,IAAMA,kBAAkB,GAAG;AACvB;;;;;;;;AAQAC,EAAAA,MAAM,EAAE,IATe;;AAUvB;;;;;;;;AAQAC,EAAAA,IAAI,EAAE,MAlBiB;;AAmBvB;;;;;;;;AAQAC,EAAAA,KAAK,EAAE,OA3BgB;;AA4BvB;;;;;;;;AAQAC,EAAAA,QAAQ,EAAE,IApCa;;AAsCvB;;;;;;;;AAQAC,EAAAA,KAAK,EAAE,OA9CgB;;AAgDvB;;;;;;;;AAQAC,EAAAA,MAAM,EAAE;AAGZ;;;;;;AA3D2B,CAA3B;;IAgEMC,M;;;AACF;;;;;AAKA,kBAAYC,iBAAZ,EAA+B;AAAA;;AAC3B,SAAKA,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,YAAL,GAAoB,MAApB;AACA,SAAKC,UAAL,GAAkB,MAAlB;AACA,SAAKC,WAAL,GAAmBC,SAAnB;AACH;AAED;;;;;;;;uBAIGH,Y,EAAc;AACb,+BAAaA,YAAb,EAA2B,4BAA3B;AAEA,WAAKA,YAAL,GAAoBA,YAApB;AACA,aAAO,IAAP;AACH;AAED;;;;;;;;;;;;0CASsB;AAClB,aAAO,CAAC,KAAKA,YAAN,EAAoB,KAAKC,UAAzB,EAAqC,KAAKC,WAA1C,EAAuDE,IAAvD,CAA4D,GAA5D,CAAP;AACH;AAED;;;;;;;;;;;;;;;AAeA;;;;;6BAKSC,S,EAAUH,W,EAAa;AAC5B,+BAAaG,SAAb,EAAuB,UAAvB;AACA,+BAAaH,WAAb,EAA0B,aAA1B;AACA,WAAKD,UAAL,GAAkBI,SAAlB;AACA,WAAKH,WAAL,GAAmBA,WAAnB;AACA,aAAO,KAAKH,iBAAL,CAAuB,IAAvB,CAAP;AACH;;;8BAfgBA,iB,EAAmB;AAChC,aAAO,IAAID,MAAJ,CAAWC,iBAAX,CAAP;AACH;;;;KAgBL;;;AACAO,MAAM,CAACC,IAAP,CAAYhB,kBAAZ,EAAgCiB,OAAhC,CAAwC,UAAAC,MAAM,EAAI;AAC9CH,EAAAA,MAAM,CAACI,cAAP,CAAsBZ,MAAM,CAACa,SAA7B,EAAwCF,MAAxC,EAAgD;AAC5CG,IAAAA,KAAK,EAAE,SAASC,YAAT,CAAsBX,WAAtB,EAAmC;AACtC,+BAAaA,WAAb,EAA0B,aAA1B;AAEA,WAAKD,UAAL,GAAkBV,kBAAkB,CAACkB,MAAD,CAApC;AACA,WAAKP,WAAL,GAAmBA,WAAnB;AAEA,aAAO,KAAKH,iBAAL,CAAuB,IAAvB,CAAP;AACH;AAR2C,GAAhD;AAUH,CAXD;eAaeD,M","sourcesContent":["import { checkDefined } from '../lib/check'\n\nconst FILTER_COMPARATORS = {\n    /**\n     * @function equals\n     * @memberof module:model.Filter.prototype\n     * @returns {Filter} Returns the modified filter for chaining\n     *\n     * @description\n     * This method can be used to add a equals filter value\n     */\n    equals: 'eq',\n    /**\n     * @function like\n     * @memberof module:model.Filter.prototype\n     * @returns {Filter} Returns the modified filter for chaining\n     *\n     * @description\n     * This method can be used to add a like filter value\n     */\n    like: 'like',\n    /**\n     * @function ilike\n     * @memberof module:model.Filter.prototype\n     * @returns {Filter} Returns the modified filter for chaining\n     *\n     * @description\n     * This method can be used to add a ilike filter value\n     */\n    ilike: 'ilike',\n    /**\n     * @function\n     * @memberof module:model.Filter.prototype\n     * @returns {Filter} Returns the modified filter for chaining\n     *\n     * @description\n     * This method can be used to add a ne filter value\n     */\n    notEqual: 'ne',\n\n    /**\n     * @function\n     * @memberof module:model.Filter.prototype\n     * @returns {Filter} Returns the modified filter for chaining\n     *\n     * @description\n     * This method can be used to add a token filter value\n     */\n    token: 'token',\n\n    /**\n     * @function\n     * @memberof module:model.Filter.prototype\n     * @returns {Filter} Returns the modified filter for chaining\n     *\n     * @description\n     * This method can be used to add a !token filter value\n     */\n    nToken: '!token',\n}\n\n/**\n * Filter class that can be used to build api endpoint filters using a semi-natural language style.\n *\n * @memberof module:model\n */\nclass Filter {\n    /**\n     * @constructor\n     * @param {Function} addFilterCallback Callback that will be used to notify Filters that the filter is completed\n     * so it can be added to the list of filters.\n     */\n    constructor(addFilterCallback) {\n        this.addFilterCallback = addFilterCallback\n        this.propertyName = 'name'\n        this.comparator = 'like'\n        this.filterValue = undefined\n    }\n\n    /**\n     * @param {String} propertyName Property name that the filter should be applied on.\n     * @returns {Filter}\n     */\n    on(propertyName) {\n        checkDefined(propertyName, 'Property name to filter on')\n\n        this.propertyName = propertyName\n        return this\n    }\n\n    /**\n     * Utility function used to get the query parameter value in a DHIS2 metadata filter format that can be\n     * send to the api. This returned value is appended to the `filter=` part of the query.\n     *\n     * @private\n     * @note {warning} Usually not used directly and only used by Filters to create the query param values.\n     *\n     * @returns {string} The query param value to be appended to `filter=`\n     */\n    getQueryParamFormat() {\n        return [this.propertyName, this.comparator, this.filterValue].join(':')\n    }\n\n    /**\n     * @static\n     *\n     * @param {Function} addFilterCallback Callback to be called when the filter is completed.\n     *\n     * @returns {Filter} A instance of the Filter class that can be used to create\n     * filters.\n     *\n     * @description\n     * Create a filter instance\n     */\n    static getFilter(addFilterCallback) {\n        return new Filter(addFilterCallback)\n    }\n\n    /**\n     * Utility function to add an operator with filterValue\n     * @param {*} operator to use\n     * @param {*} filterValue to filter on\n     */\n    operator(operator, filterValue) {\n        checkDefined(operator, 'operator')\n        checkDefined(filterValue, 'filterValue')\n        this.comparator = operator\n        this.filterValue = filterValue\n        return this.addFilterCallback(this)\n    }\n}\n\n// Add the filters to the Filter prototype\nObject.keys(FILTER_COMPARATORS).forEach(filter => {\n    Object.defineProperty(Filter.prototype, filter, {\n        value: function filterGetter(filterValue) {\n            checkDefined(filterValue, 'filterValue')\n\n            this.comparator = FILTER_COMPARATORS[filter]\n            this.filterValue = filterValue\n\n            return this.addFilterCallback(this)\n        },\n    })\n})\n\nexport default Filter\n"],"file":"Filter.js"}