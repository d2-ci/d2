{"version":3,"sources":["../../../src/api/__tests__/api.spec.js"],"names":["jest","mock","describe","fetchMock","api","baseFetchOptions","beforeEach","fn","mockReturnValue","Promise","resolve","ok","text","fixtures","get","Api","Object","assign","method","headers","Headers","defaultFetchOptions","System","getSystem","version","major","minor","afterEach","mockReset","it","expect","toBeInstanceOf","Function","baseUrl","toBe","toThrowErrorMatchingSnapshot","wasFetch","window","global","fetch","undefined","toThrowError","getApi","setBaseUrl","shouldThrow","setUnauthorizedCallback","cb","unauthorizedCallback","mockReturnValueOnce","assertions","then","result","data","id","name","isEmpty","subObj","a","b","JSON","stringify","toEqual","reject","TypeError","catch","err","toContain","errorText","join","status","parse","response","httpStatus","httpStatusCode","message","req","toBeCalled","toHaveBeenCalledWith","objectContaining","options","url","post","f","u","Error","code","calls","body","toBeCalledWith","fields","errMessage","toMatchSnapshot","errorJson","res","mode","credentials","cache","filter","href","FormData","nodeFormData","append","constructor","toBeNull","delete","fetchOptions","map","update","obj","oa","ob","arr","patch","propAtBaseLevel","nestedChildThatNeedsTOBeUpdated","endpoint","endpointParam","fetchOptsParam","setDefaultHeaders","Authorization"],"mappings":"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","sourcesContent":["import nodeFormData from 'form-data';\nimport System from '../../system/System';\nimport fixtures from '../../__fixtures__/fixtures';\nimport Api from '../Api';\n\njest.mock('../../system/System');\n\ndescribe('Api', () => {\n    let fetchMock;\n    let api;\n    let baseFetchOptions;\n\n    beforeEach(() => {\n        fetchMock = jest.fn()\n            .mockReturnValue(Promise.resolve({\n                ok: true,\n                text: () => Promise.resolve(fixtures.get('/api/schemas/dataElement')),\n            }));\n\n        api = new Api(fetchMock);\n        baseFetchOptions = Object.assign({ method: 'GET' }, { headers: new Headers({ 'x-requested-with': 'XMLHttpRequest' }) }, api.defaultFetchOptions);\n\n        System.getSystem = jest.fn().mockReturnValue({\n            version: {\n                major: 2,\n                minor: 25,\n            },\n        });\n    });\n\n    afterEach(() => {\n        System.getSystem.mockReset();\n    });\n\n    it('should be an function', () => {\n        expect(Api).toBeInstanceOf(Function);\n    });\n\n    it('should create a new instance of Api', () => {\n        expect(new Api(fetchMock)).toBeInstanceOf(Api);\n    });\n\n    it('should have a baseUrl property that is set to /api', () => {\n        expect(new Api(fetchMock).baseUrl).toBe('/api');\n    });\n\n    it('should not be allowed to be called without new', () => {\n        expect(() => Api(fetchMock)).toThrowErrorMatchingSnapshot();\n    });\n\n    describe('when fetch is not supported', () => {\n        let wasFetch;\n\n        beforeEach(() => {\n            wasFetch = (window || global).fetch;\n            if (window !== undefined) window.fetch = undefined;\n            if (global !== undefined) global.fetch = undefined;\n        });\n\n        afterEach(() => {\n            if (window !== undefined) window.fetch = wasFetch;\n            if (global !== undefined) global.fetch = wasFetch;\n        });\n\n        it('should throw', () => {\n            expect(() => new Api()).toThrowError();\n        });\n    });\n\n    describe('getApi', () => {\n        it('should have a method to get an instance of Api', () => {\n            expect(Api.getApi).toBeInstanceOf(Function);\n        });\n\n        it('should return a singleton', () => {\n            expect(Api.getApi()).toBe(Api.getApi());\n        });\n    });\n\n    describe('setBaseUrl', () => {\n        beforeEach(() => {\n            api = new Api(() => {});\n        });\n\n        it('should be a method', () => {\n            expect(api.setBaseUrl).toBeInstanceOf(Function);\n        });\n\n        it('should throw when the base url provided is not a string', () => {\n            function shouldThrow() {\n                api.setBaseUrl();\n            }\n\n            expect(shouldThrow).toThrowError('Base url should be provided');\n        });\n\n        it('should set the baseUrl property on the object', () => {\n            api.setBaseUrl('/dhis/api');\n\n            expect(api.baseUrl).toBe('/dhis/api');\n        });\n    });\n\n    describe('setUnauthorizedCallback', () => {\n        beforeEach(() => {\n            api = new Api(() => {});\n        });\n\n        it('should be a method', () => {\n            expect(api.setUnauthorizedCallback).toBeInstanceOf(Function);\n        });\n\n        it('should throw when the base url provided is not a function', () => {\n            function shouldThrow() {\n                api.setUnauthorizedCallback('asf');\n            }\n\n            expect(shouldThrow).toThrowError('Callback must be a function.');\n        });\n\n        it('should set the unauthorizedCallback property on the object', () => {\n            const cb = () => {};\n            api.setUnauthorizedCallback(cb);\n\n            expect(api.unauthorizedCallback).toBe(cb);\n        });\n    });\n\n    describe('request()', () => {\n        it('should handle responses in plain text format', () => {\n            fetchMock.mockReturnValueOnce(Promise.resolve({\n                ok: true,\n                text: () => Promise.resolve('this is not valid json'),\n            }));\n\n            expect.assertions(1);\n\n            return api.get('text')\n                .then((result) => {\n                    expect(result).toBe('this is not valid json');\n                });\n        });\n\n        it('should handle responses in JSON format', () => {\n            fetchMock.mockReturnValueOnce(Promise.resolve({\n                ok: true,\n                text: () => Promise.resolve('\"this is a JSON string\"'),\n            }));\n\n            expect.assertions(1);\n\n            return api.get('json')\n                .then((result) => {\n                    expect(result).toBe('this is a JSON string');\n                });\n        });\n\n        it('should handle complex JSON objects', () => {\n            const data = {\n                id: '12345',\n                name: 'bla bla',\n                isEmpty: false,\n                subObj: {\n                    a: true,\n                    b: false,\n                },\n            };\n            fetchMock.mockReturnValueOnce(Promise.resolve({\n                ok: true,\n                text: () => Promise.resolve(JSON.stringify(data)),\n            }));\n\n            expect.assertions(1);\n\n            return api.get('json')\n                .then((result) => {\n                    expect(result).toEqual(data);\n                });\n        });\n\n        it('should report network errors', () => {\n            fetchMock.mockReturnValueOnce(Promise.reject(new TypeError('Failed to fetch-o')));\n\n            expect.assertions(2);\n\n            return api.get('http://not.a.real.server/hi')\n                .catch((err) => {\n                    expect(typeof err).toBe('string');\n                    expect(err).toContain('failed');\n                });\n        });\n\n        it('should report 404 errors', () => {\n            const errorText = [\n                '{',\n                '\"httpStatus\":\"Not Found\",',\n                '\"httpStatusCode\":404,',\n                '\"status\":\"ERROR\",',\n                '\"message\":\"DataElement with id 404 could not be found.\"',\n                '}',\n            ].join('');\n            fetchMock.mockReturnValueOnce(Promise.resolve({\n                ok: false,\n                status: 404,\n                text: () => Promise.resolve(errorText),\n            }));\n\n            expect.assertions(2);\n\n            return api.get('dataElements/404')\n                .catch((err) => {\n                    expect(typeof err).toBe('object');\n                    expect(err).toEqual(JSON.parse(errorText));\n                });\n        });\n\n        it('should handle 401', () => {\n            const response = {\n                httpStatus: 'Unauthorized',\n                httpStatusCode: 401,\n                status: 'ERROR',\n                message: 'Unauthorized',\n            };\n            fetchMock.mockReturnValueOnce(Promise.resolve({\n                ok: false,\n                status: 401,\n                text: () => Promise.resolve(response),\n            }));\n\n            expect.assertions(2);\n\n            return api.get('dataElements/401')\n                .catch((err) => {\n                    expect(typeof err).toBe('object');\n                    expect(err).toEqual(response);\n                });\n        });\n\n        it('401 should call unauthorizedCb if set', () => {\n            const cb = jest.fn();\n            api.setUnauthorizedCallback(cb);\n\n            const response = {\n                httpStatus: 'Unauthorized',\n                httpStatusCode: 401,\n                status: 'ERROR',\n                message: 'Unauthorized',\n            };\n            const req = Promise.resolve({\n                ok: false,\n                status: 401,\n                text: () => Promise.resolve(response),\n            });\n            fetchMock.mockReturnValueOnce(req);\n\n            expect.assertions(2);\n\n            api.get('dataElements/401')\n                .catch(() => {\n                    expect(cb).toBeCalled();\n                    expect(cb).toHaveBeenCalledWith(expect.objectContaining(\n                        { method: 'GET', options: {}, url: '/api/dataElements/401' },\n                    ), response);\n                });\n        });\n\n        it('should report 500 errors', () => {\n            const errorText = [\n                '{',\n                '\"httpStatus\":\"Internal Server Error\",',\n                '\"httpStatusCode\":500,',\n                '\"status\":\"ERROR\",',\n                '\"message\":',\n                '\"object references an unsaved transient instance - save the transient instance before flushing: ',\n                'org.hisp.dhis.dataelement.CategoryOptionGroupSet\"',\n                '}',\n            ].join('');\n            const data = [\n                '{',\n                '\"name\":\"District Funding Agency\",',\n                '\"orgUnitLevel\":2,',\n                '\"categoryOptionGroupSet\":{\"id\":\"SooXFOUnciJ\"}',\n                '}',\n            ].join('');\n            fetchMock.mockReturnValueOnce(Promise.resolve({\n                ok: false,\n                status: 500,\n                text: () => Promise.resolve(errorText),\n            }));\n\n            expect.assertions(2);\n\n            return api.post('dataApprovalLevels', data)\n                .catch((err) => {\n                    expect(typeof err).toBe('object');\n                    expect(err).toEqual(JSON.parse(errorText));\n                });\n        });\n\n        it('should properly encode URIs', () => {\n            expect.assertions(1);\n\n            return api.get('some/endpoint?a=b&c=d|e[with:filter]', {\n                f: 'g|h[i,j],k[l|m],n{o~p`q`$r@s!t}',\n                u: '-._~:/?#[]@!$&()*+,;===,~$!@*()_-=+/;:',\n            })\n                .then(() => {\n                    expect(fetchMock).toHaveBeenCalledWith([\n                        '/api/some/endpoint?',\n                        'a=b&',\n                        'c=d%7Ce%5Bwith:filter%5D&',\n                        'f=g%7Ch%5Bi%2Cj%5D%2Ck%5Bl%7Cm%5D%2Cn%7Bo~p%60q%60%24r%40s!t%7D&',\n                        'u=-._~%3A%2F%3F%23%5B%5D%40!%24%26()*%2B%2C%3B%3D%3D%3D%2C~%24!%40*()_-%3D%2B%2F%3B%3A',\n                    ].join(''),\n                    baseFetchOptions,\n                    );\n                });\n        });\n\n        it('should reject with an error when url contains encoded query string', () => {\n            const message = 'Cannot process URL-encoded URLs, pass an unencoded URL';\n\n            expect.assertions(2);\n\n            return api.get('test?one=%5Bwith%20a%20filter%5D')\n                .catch((err) => {\n                    expect(err).toBeInstanceOf(Error);\n                    expect(err.message).toBe(message);\n                });\n        });\n\n        it('should reject with an error when url is malformed', () => {\n            const message = 'Query parameters in URL are invalid';\n\n            expect.assertions(2);\n\n            return api.get('test?%5')\n                .catch((err) => {\n                    expect(err).toBeInstanceOf(Error);\n                    expect(err.message).toBe(message);\n                });\n        });\n\n        it('should not break URIs when encoding', () => {\n            expect.assertions(1);\n\n            return api.get('test?a=b=c&df,gh')\n                .then(() => {\n                    expect(fetchMock).toHaveBeenCalledWith(\n                        '/api/test?a=b=c&df,gh',\n                        baseFetchOptions,\n                    );\n                });\n        });\n\n        it('should encode data as JSON', () => {\n            const data = { name: 'Name', code: 'Code_01' };\n            expect.assertions(1);\n\n            return api.post('jsonData', data)\n                .then(() => {\n                    expect(fetchMock.mock.calls[0][1].body).toBe(JSON.stringify(data));\n                });\n        });\n\n        it('should not encode text/plain data as JSON', () => {\n            const data = 'my data';\n\n            expect.assertions(1);\n\n            return api.post('textData', data, { headers: { 'Content-Type': 'text/plain' } })\n                .then(() => {\n                    expect(fetchMock.mock.calls[0][1].body).toBe(data);\n                });\n        });\n    });\n\n    describe('get', () => {\n        it('should be a method', () => {\n            expect(api.get).toBeInstanceOf(Function);\n        });\n\n        it('should return a promise', () => {\n            expect(api.get('dataElements')).toBeInstanceOf(Promise);\n        });\n\n        it('should use the baseUrl when requesting', () => {\n            api.get('dataElements');\n\n            expect(fetchMock).toBeCalledWith('/api/dataElements', baseFetchOptions);\n        });\n\n        it('should not add a double slash to the url', () => {\n            api.get('path/of/sorts//dataElements');\n\n            expect(fetchMock).toBeCalledWith('/api/path/of/sorts/dataElements', baseFetchOptions);\n        });\n\n        it('should strip the trailing slash', () => {\n            api.get('/dataElements.json/');\n\n            expect(fetchMock).toBeCalledWith('/api/dataElements.json', baseFetchOptions);\n        });\n\n        it('should keep a full url if it is given as a base', () => {\n            api.baseUrl = 'http://localhost:8090/dhis/api';\n            api.get('/dataElements.json');\n\n            expect(fetchMock).toBeCalledWith('http://localhost:8090/dhis/api/dataElements.json', baseFetchOptions);\n        });\n\n        it('should keep the the slashes if they are the first two characters', () => {\n            api.baseUrl = '//localhost:8090/dhis/api';\n\n            api.get('/dataElements.json');\n\n            expect(fetchMock).toBeCalledWith('//localhost:8090/dhis/api/dataElements.json', baseFetchOptions);\n        });\n\n        it('should call the get method on the http object', () => {\n            api.get('dataElements');\n\n            expect(fetchMock).toBeCalledWith('/api/dataElements', baseFetchOptions);\n        });\n\n        it('should transfer data to the query string', () => {\n            api.get('dataElements', { fields: 'id,name' });\n\n            expect(fetchMock).toBeCalledWith('/api/dataElements?fields=id%2Cname', baseFetchOptions);\n        });\n\n        it('should call the failure handler when the server can\\'t be reached', () => {\n            fetchMock.mockReturnValueOnce(Promise.reject());\n\n            expect.assertions(1);\n\n            return api.get('/api/dataElements', { fields: 'id,name' })\n                .catch((errMessage) => {\n                    expect(errMessage).toMatchSnapshot();\n                });\n        });\n\n        it('should call the failure handler with the message if a webmessage was returned', () => {\n            const errorJson = {\n                httpStatus: 'Not Found',\n                httpStatusCode: 404,\n                status: 'ERROR',\n                message: 'DataElementCategory with id sdfsf could not be found.',\n            };\n            fetchMock.mockReturnValueOnce(Promise.resolve({\n                ok: false,\n                text: () => Promise.resolve(JSON.stringify(errorJson)),\n            }));\n\n            expect.assertions(1);\n\n            return api.get('/api/dataElements/sdfsf', { fields: 'id,name' })\n                .catch((err) => { expect(err).toEqual(errorJson); });\n        });\n\n        it('should call the success resolve handler', () => {\n            fetchMock.mockReturnValueOnce(Promise.resolve({\n                ok: true,\n                text: () => Promise.resolve('\"Success!\"'),\n            }));\n\n            expect.assertions(1);\n\n            return api.get('/api/dataElements', { fields: 'id,name' })\n                .then((res) => {\n                    expect(res).toBe('Success!');\n                });\n        });\n\n        it('should allow the options to be overridden', () => {\n            api.get('dataElements', undefined, { mode: 'no-cors', credentials: 'omit', cache: 'no-cache' });\n\n            expect(fetchMock).toBeCalledWith(\n                '/api/dataElements',\n                Object.assign(baseFetchOptions, { mode: 'no-cors', credentials: 'omit', cache: 'no-cache' }),\n            );\n        });\n\n        it('should encode filters', () => {\n            api.get('filterTest', { filter: ['a:1', 'b:2'] });\n\n            expect(fetchMock).toBeCalledWith('/api/filterTest?filter=a:1&filter=b:2', baseFetchOptions);\n        });\n\n        it('should not double encode filter values', () => {\n            api.get('filterTest', { filter: ['name:eq:A & B'] });\n\n            expect(fetchMock).toBeCalledWith('/api/filterTest?filter=name:eq:A%20%26%20B', baseFetchOptions);\n        });\n\n        it('should transfer complex filters to the query parameters', () => {\n            api.get('complexQueryTest', { fields: ':all', filter: ['id:eq:a0123456789', 'name:ilike:Test'] });\n\n            expect(fetchMock.mock.calls[0][0]).toContain('/api/complexQueryTest?');\n            expect(fetchMock.mock.calls[0][0]).toContain('filter=id:eq:a0123456789&filter=name:ilike:Test');\n        });\n    });\n\n    describe('post', () => {\n        it('should be a method', () => {\n            expect(api.post).toBeInstanceOf(Function);\n        });\n\n        it('should call the api the with the correct data', () => {\n            api.post(fixtures.get('/singleUserAllFields').href, fixtures.get('/singleUserOwnerFields'));\n\n            expect(fetchMock).toBeCalledWith(\n                fixtures.get('/singleUserAllFields').href,\n                Object.assign(baseFetchOptions, {\n                    method: 'POST',\n                    headers: new Headers({ 'Content-Type': 'application/json', 'x-requested-with': 'XMLHttpRequest' }),\n                    body: JSON.stringify(fixtures.get('/singleUserOwnerFields')),\n                }),\n            );\n        });\n\n        it('should not stringify plain text data', () => {\n            api.post('systemSettings/mySettingsKey', 'string=test', { headers: { 'content-type': 'text/plain' } });\n\n            expect(fetchMock).toBeCalledWith(\n                '/api/systemSettings/mySettingsKey',\n                Object.assign(baseFetchOptions, {\n                    method: 'POST',\n                    headers: new Headers({ 'content-type': 'text/plain', 'x-requested-with': 'XMLHttpRequest' }),\n                    body: 'string=test',\n                }),\n            );\n        });\n\n        it('should post the number zero', () => {\n            api.post('systemSettings/numberZero', 0, { headers: { 'content-type': 'text/plain' } });\n\n            expect(fetchMock).toBeCalledWith(\n                '/api/systemSettings/numberZero',\n                Object.assign(baseFetchOptions, {\n                    method: 'POST',\n                    headers: new Headers({ 'content-type': 'text/plain', 'x-requested-with': 'XMLHttpRequest' }),\n                    body: JSON.stringify(0),\n                }),\n            );\n        });\n\n        it('should send plain text boolean true values as \"true\"', () => {\n            api.post('systemSettings/keyTrue', true);\n\n            expect(fetchMock).toBeCalledWith(\n                '/api/systemSettings/keyTrue',\n                Object.assign(baseFetchOptions, {\n                    method: 'POST',\n                    headers: new Headers({ 'content-type': 'application/json', 'x-requested-with': 'XMLHttpRequest' }),\n                    body: 'true',\n                }),\n            );\n        });\n\n        it('should send plain text boolean false values as \"false\"', () => {\n            api.post('systemSettings/keyTrue', false);\n\n            expect(fetchMock).toBeCalledWith(\n                '/api/systemSettings/keyTrue',\n                Object.assign(baseFetchOptions, {\n                    method: 'POST',\n                    headers: new Headers({ 'content-type': 'application/json', 'x-requested-with': 'XMLHttpRequest' }),\n                    body: 'false',\n                }),\n            );\n        });\n\n        it('should set remove the Content-Type header for form data', () => {\n            // Set the global FormData\n            global.FormData = nodeFormData;\n\n            const data = new FormData();\n            data.append('field_1', 'value_1');\n            data.append('field_2', 'value_2');\n\n            expect.assertions(2);\n\n            return api.post('form/data', data, { headers: { 'Content-Type': 'multipart/form-data' } })\n                .then(() => {\n                    expect(fetchMock.mock.calls[0][1].headers.constructor.name).toBe('Headers');\n                    expect(fetchMock.mock.calls[0][1].headers.get('Content-Type')).toBeNull();\n\n                    // Unset the global FormData\n                    global.FormData = undefined;\n                });\n        });\n    });\n\n    describe('delete', () => {\n        it('should be a method', () => {\n            expect(api.delete).toBeInstanceOf(Function);\n        });\n\n        it('should call fetch with the correct DELETE request', () => {\n            api.delete(fixtures.get('/singleUserAllFields').href);\n\n            expect(fetchMock).toBeCalledWith(\n                fixtures.get('/singleUserAllFields').href,\n                Object.assign(baseFetchOptions, {\n                    method: 'DELETE',\n                }),\n            );\n        });\n\n        it('should call the correct api endpoint when the url starts with a /', () => {\n            api.delete('/users/aUplAx3DOWy');\n\n            const fetchOptions = {\n                cache: 'default',\n                credentials: 'include',\n                headers: {\n                    map: { 'x-requested-with': 'XMLHttpRequest' },\n                },\n                method: 'DELETE',\n                mode: 'cors',\n            };\n\n            expect(fetchMock).toBeCalledWith('/api/users/aUplAx3DOWy', fetchOptions);\n        });\n    });\n\n    describe('update', () => {\n        it('should be a method', () => {\n            expect(api.update).toBeInstanceOf(Function);\n        });\n\n        it('should call the ajax method with the correct UPDATE request', () => {\n            const data = {\n                a: 'A',\n                b: 'B!',\n                obj: {\n                    oa: 'o.a',\n                    ob: 'o.b',\n                },\n                arr: [1, 2, 3],\n            };\n            api.update('some/fake/api/endpoint', data);\n\n            expect(fetchMock).toBeCalledWith(\n                '/api/some/fake/api/endpoint',\n                expect.objectContaining(Object.assign(baseFetchOptions, {\n                    method: 'PUT',\n                    headers: new Headers({ 'Content-Type': 'application/json', 'x-requested-with': 'XMLHttpRequest' }),\n                    body: JSON.stringify(data),\n                })),\n            );\n        });\n\n        it('should add the mergeMode param to the url when useMergeStrategy is passed', () => {\n            api.update('some/fake/api/endpoint', {}, true);\n\n            const fetchOptions = {\n                body: '{}',\n                cache: 'default',\n                credentials: 'include',\n                headers: {\n                    map: {\n                        'content-type': 'application/json',\n                        'x-requested-with': 'XMLHttpRequest',\n                    },\n                },\n                method: 'PUT',\n                mode: 'cors',\n            };\n\n            expect(fetchMock).toBeCalledWith('/api/some/fake/api/endpoint?mergeMode=REPLACE', fetchOptions);\n        });\n\n        it('should add the mergeStrategy param to the url when useMergeStrategy is passed ' +\n            'and the version is 2.22', () => {\n            System.getSystem.mockReturnValueOnce({\n                version: {\n                    major: 2,\n                    minor: 22,\n                },\n            });\n\n            api.update('some/fake/api/endpoint', {}, true);\n\n            const fetchOptions = {\n                body: '{}',\n                cache: 'default',\n                credentials: 'include',\n                headers: {\n                    map: {\n                        'content-type': 'application/json',\n                        'x-requested-with': 'XMLHttpRequest',\n                    },\n                },\n                method: 'PUT',\n                mode: 'cors',\n            };\n\n            expect(fetchMock).toBeCalledWith('/api/some/fake/api/endpoint?mergeStrategy=REPLACE', fetchOptions);\n        });\n\n        it('should support payloads of plain texts', () => {\n            api.update('some/fake/api/endpoint', 'a string');\n\n            expect(fetchMock).toBeCalledWith(\n                '/api/some/fake/api/endpoint',\n                Object.assign(baseFetchOptions, {\n                    method: 'PUT',\n                    headers: new Headers({ 'Content-Type': 'text/plain', 'x-requested-with': 'XMLHttpRequest' }),\n                    body: 'a string',\n                }),\n            );\n        });\n    });\n\n    describe('patch', () => {\n        it('should be a method', () => {\n            expect(api.patch).toBeInstanceOf(Function);\n        });\n\n        it('should call the ajax method with the correct PATCH request', () => {\n            const data = {\n                propAtBaseLevel: {\n                    nestedChildThatNeedsTOBeUpdated: false,\n                },\n            };\n            const endpoint = 'some/fake/api/endpoint';\n\n\n            api.patch(endpoint, data);\n\n            const [endpointParam, fetchOptsParam] = fetchMock.mock.calls[0];\n            expect(endpointParam).toEqual(`/api/${endpoint}`);\n            expect(fetchOptsParam).toEqual(expect.objectContaining(Object.assign(baseFetchOptions, {\n                method: 'PATCH',\n                headers: new Headers({ 'Content-Type': 'application/json', 'x-requested-with': 'XMLHttpRequest' }),\n                body: JSON.stringify(data),\n            })));\n        });\n    });\n\n    describe('defaultHeaders', () => {\n        it('should use the set default headers for the request', () => {\n            api.setDefaultHeaders({\n                Authorization: 'Basic YWRtaW46ZGlzdHJpY3Q=',\n                'x-requested-with': 'XMLHttpRequest',\n            });\n\n            api.get('/me');\n\n            expect(fetchMock).toBeCalledWith(\n                '/api/me',\n                Object.assign(baseFetchOptions, {\n                    method: 'GET',\n                    headers: new Headers({ Authorization: 'Basic YWRtaW46ZGlzdHJpY3Q=', 'x-requested-with': 'XMLHttpRequest' }),\n                }),\n            );\n        });\n\n        it('should not use the defaultHeaders if specific header has been passed', () => {\n            api.setDefaultHeaders({\n                Authorization: 'Basic YWRtaW46ZGlzdHJpY3Q=',\n                'x-requested-with': 'XMLHttpRequest',\n            });\n\n            api.get('/me', undefined, { headers: { Authorization: 'Bearer ASDW212331sss', 'x-requested-with': 'XMLHttpRequest' } });\n\n            expect(fetchMock).toBeCalledWith(\n                '/api/me',\n                Object.assign(baseFetchOptions, {\n                    method: 'GET',\n                    headers: new Headers({ Authorization: 'Bearer ASDW212331sss', 'x-requested-with': 'XMLHttpRequest' }),\n                }),\n            );\n        });\n\n        it('should still use the default headers for keys that have not been defined', () => {\n            api.setDefaultHeaders({\n                Authorization: 'Basic YWRtaW46ZGlzdHJpY3Q=',\n                'Custom-Header': 'Some header data',\n            });\n\n            api.get('/me', undefined, { headers: { Authorization: 'Bearer ASDW212331sss' } });\n\n            expect(fetchMock).toBeCalledWith(\n                '/api/me',\n                Object.assign(baseFetchOptions, {\n                    method: 'GET',\n                    headers: new Headers({\n                        Authorization: 'Bearer ASDW212331sss',\n                        'Custom-Header': 'Some header data',\n                    }),\n                }),\n            );\n        });\n    });\n});\n"],"file":"api.spec.js"}