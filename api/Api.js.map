{"version":3,"sources":["../../src/api/Api.js"],"names":["getMergeStrategyParam","mergeType","system","getSystem","version","Number","minor","getUrl","baseUrl","url","RegExp","test","urlParts","push","join","replace","Api","fetchImpl","fetch","bind","window","global","Error","defaultFetchOptions","mode","credentials","cache","defaultHeaders","unauthorizedCallback","headers","cb","data","options","request","requestUrl","payload","Headers","undefined","constructor","name","delete","has","get","toLocaleLowerCase","startsWith","String","set","JSON","stringify","useMergeStrategy","urlForUpdate","method","api","query","indexOf","substr","Array","isArray","filter","encodedFilters","map","split","encodeURIComponent","length","Object","keys","forEach","key","getOptions","mergeOptions","requestData","resultOptions","assign","header","body","requestOptions","parseResponseData","value","parse","e","Promise","resolve","reject","then","response","ok","text","parsedResponseData","status","process","env","npm_lifecycle_event","console","warn","statusText","catch","err","error","getApi"],"mappings":"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","file":"Api.js","sourcesContent":["/**\n * @module api\n */\n/* global window fetch Headers */\nimport 'whatwg-fetch';\nimport { checkType } from '../lib/check';\nimport { customEncodeURIComponent } from '../lib/utils';\nimport System from '../system/System';\n\nfunction getMergeStrategyParam(mergeType = 'REPLACE') {\n    const system = System.getSystem();\n\n    if (system.version && (Number(system.version.minor) <= 22)) {\n        return `mergeStrategy=${mergeType}`;\n    }\n\n    return `mergeMode=${mergeType}`;\n}\n\nfunction getUrl(baseUrl, url) {\n    // If we are dealing with an absolute url use that instead\n    if (new RegExp('^(:?https?:)?//').test(url)) {\n        return url;\n    }\n\n    const urlParts = [];\n\n    if (baseUrl) {\n        urlParts.push(baseUrl);\n    }\n    urlParts.push(url);\n\n    return urlParts.join('/')\n        .replace(new RegExp('(.(?:[^:]))//+', 'g'), '$1/')\n        .replace(new RegExp('/$'), '');\n}\n\n/**\n * @description\n * Used for interaction with the dhis2 api.\n *\n * This class is used as the backbone for d2 and handles all the interaction with the server. There is a singleton\n * available to be reused across your applications. The singleton can be grabbed from the d2 instance.\n *\n * ```js\n * import { getInstance } from 'd2/lib/d2';\n *\n * getInstance()\n *  .then(d2 => {\n *      const api = d2.Api.getApi() // Returns the Api singleton.\n *\n *      api.get('resources');\n *  });\n * ```\n *\n * Uses {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API|Fetch} to do network requests.\n *\n * @memberof module:api\n */\nclass Api {\n    /**\n     * @constructor\n     *\n     * @param {Fetch} [fetchImpl] The fetch implementation to use. Can be used to pass a different implementation\n     * similar to the fetch Api. Will default to `window.fetch` in a browser context.\n     */\n    constructor(fetchImpl) {\n        // Optionally provide fetch to the constructor so it can be mocked during testing\n        if (typeof fetchImpl === 'function') {\n            this.fetch = fetchImpl.bind(typeof window !== 'undefined' ? window : global);\n        } else if (typeof fetch !== 'undefined') {\n            this.fetch = fetch.bind(typeof window !== 'undefined' ? window : global);\n        } else {\n            throw new Error('Failed to initialise D2 Api: No fetch implementation is available');\n        }\n\n        this.baseUrl = '/api';\n        this.defaultFetchOptions = {\n            mode: 'cors', // requests to different origins fail\n            credentials: 'include', // include cookies with same-origin requests\n            cache: 'default',  // See https://fetch.spec.whatwg.org/#concept-request-cache-mode\n        };\n        this.defaultHeaders = {\n            'X-Requested-With': 'XMLHttpRequest',\n        };\n\n        this.unauthorizedCallback = null;\n    }\n\n    /**\n     * Used for setting default headers that should be send with every request.\n     *\n     * @example\n     * const api = Api.getApi();\n     *\n     * api.setDefaultHeaders({\n     *  'x-requested-with': 'XMLHttpRequest', // Make sure the Api does not redirect when authorization is expired.\n     * });\n     *\n     * @param {Object.<string, string>} headers Default headers that should be set on every request.\n     */\n    setDefaultHeaders(headers) {\n        this.defaultHeaders = headers;\n    }\n\n    /**\n     * When any request encounters a 401 - Unauthorized. This callback is called.\n     * Useful for when you want an session expiration-handler API-wide.\n     *\n     * @param {*} cb - Function to call when any request recieves a 401. Called with the response from the server.\n     */\n    setUnauthorizedCallback(cb) {\n        if (typeof cb !== 'function') {\n            throw new Error('Callback must be a function.');\n        }\n        this.unauthorizedCallback = cb;\n    }\n\n    /**\n     * Performs a GET request.\n     *\n     * @param {string} url The url for the request\n     * @param {*} data Any data that should be send with the request. For a GET request these are turned into\n     * query parameters. For POST and PUT requests it becomes the body.\n     * @param {Object.<string, any>} options The request options are passed as options to the fetch request.\n     * These options are passed as the {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * parameter to the fetch request.\n     *\n     * @returns {Promise.<*>} The response body.\n     */\n    get(url, data, options) {\n        return this.request('GET', getUrl(this.baseUrl, url), data, options);\n    }\n\n    /* eslint-disable complexity */\n    /**\n     * Performs a POST request.\n     *\n     * @param {string} url The url for the request\n     * @param {*} data Any data that should be send with the request this becomes the body for the POST request\n     * @param {Object.<string, any>} options The request options are passed as options to the fetch request.\n     * These options are passed as the {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * parameter to the fetch request.\n     *\n     * @returns {Promise.<*>} The response body.\n     */\n    post(url, data, options = {}) {\n        const requestUrl = getUrl(this.baseUrl, url);\n        let payload = data;\n\n        // Ensure that headers are defined and are treated without case sensitivity\n        options.headers = new Headers(options.headers || {}); // eslint-disable-line\n\n        if (data !== undefined) {\n            if (data.constructor.name === 'FormData') {\n                // Ensure that the browser will set the correct Content-Type header for FormData, including boundary\n                options.headers.delete('Content-Type');\n                payload = data;\n            } else if (\n                options.headers.has('Content-Type') &&\n                options.headers.get('Content-Type').toLocaleLowerCase().startsWith('text/')\n            ) {\n                payload = String(data);\n            } else {\n                // Send JSON data by default\n                options.headers.set('Content-Type', 'application/json');\n                payload = JSON.stringify(data);\n            }\n        }\n\n        return this.request('POST', requestUrl, payload, options);\n    }\n    /**\n     * Performs a DELETE request.\n     *\n     * @param {string} url The url for the request\n     * @param {Object.<string, any>} options The request options are passed as options to the fetch request.\n     * These options are passed as the {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * parameter to the fetch request.\n     *\n     * @returns {Promise.<*>} The response body.\n     */\n    /* eslint-enable complexity */\n    delete(url, options) {\n        return this.request('DELETE', getUrl(this.baseUrl, url), undefined, options);\n    }\n\n    /**\n     * Perform a PUT request.\n     *\n     * @param {string} url The url for the request\n     * @param {*} data Any data that should be send with the request. This becomes the body of the PUT request.\n     * @param {boolean} [useMergeStrategy=false]\n     *\n     * @returns {Promise.<*>} The response body.\n     */\n    update(url, data, useMergeStrategy = false) {\n        // Since we are currently using PUT to save the full state back, we have to use mergeMode=REPLACE\n        // to clear out existing values\n        const urlForUpdate = useMergeStrategy === true ? `${url}?${getMergeStrategyParam()}` : url;\n        if (typeof data === 'string') {\n            return this.request('PUT', getUrl(this.baseUrl, urlForUpdate), String(data),\n                { headers: new Headers({ 'Content-Type': 'text/plain' }) });\n        }\n\n        return this.request('PUT', getUrl(this.baseUrl, urlForUpdate), JSON.stringify(data));\n    }\n\n    /**\n     * Perform a PATCH request.\n     *\n     * @param {string} url The url for the request\n     * @param {*} data Any data that should be send with the request. This becomes the body of the PATCH request.\n     *\n     * @returns {Promise.<*>} The response body.\n     */\n    patch(url, data) {\n        return this.request('PATCH', getUrl(this.baseUrl, url), JSON.stringify(data));\n    }\n\n    /**\n     * General purpose request function for making http requests.\n     *\n     * The more specific functions like `delete`, `post` and `get`, utilize this function to make the requests.\n     *\n     * @param {string} method The HTTP request method (e.g. POST/GET/PATCH)\n     * @param {string} url The url for the request\n     * @param {*} data Any data that should be send with the request. For a GET request these are turned into\n     * query parameters. For POST and PUT requests it becomes the body.\n     * @param {Object.<string, any>} options The request options are passed as options to the fetch request.\n     * These options are passed as the {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * parameter to the fetch request.\n     *\n     * @returns {Promise.<*>} The response body.\n     */\n    /* eslint-disable complexity */\n    request(method, url, data, options = {}) {\n        checkType(method, 'string', 'Request type');\n        checkType(url, 'string', 'Url');\n        const api = this;\n        let requestUrl = url;\n        let query = '';\n\n        if (requestUrl.indexOf('?') !== -1) {\n            query = requestUrl.substr(requestUrl.indexOf('?') + 1);\n            requestUrl = requestUrl.substr(0, requestUrl.indexOf('?'));\n        }\n\n        // Transfer filter properties from the data object to the query string\n        if (data && Array.isArray(data.filter)) {\n            const encodedFilters = data.filter\n                .map(filter => filter.split(':').map(encodeURIComponent).join(':'));\n\n            query = (\n                `${customEncodeURIComponent(query)}${query.length ? '&' : ''}` +\n                `filter=${encodedFilters.join('&filter=')}`\n            );\n            delete data.filter; // eslint-disable-line no-param-reassign\n        }\n\n        // When using the GET method, transform the data object to query parameters\n        if (data && method === 'GET') {\n            Object.keys(data)\n                .forEach((key) => {\n                    query = (\n                        `${query}${(query.length > 0 ? '&' : '')}` +\n                        `${encodeURIComponent(key)}=${encodeURIComponent(data[key])}`\n                    );\n                });\n        }\n\n        function getOptions(defaultHeaders, mergeOptions, requestData) {\n            const resultOptions = Object.assign({}, api.defaultFetchOptions, mergeOptions);\n            const headers = new Headers(mergeOptions.headers || {});\n\n            Object\n                .keys(defaultHeaders)\n                .filter(header => !headers.get(header))\n                .forEach(header => headers.set(header, defaultHeaders[header]));\n\n            resultOptions.method = method;\n\n            // Only set content type when there is data to send\n            // GET requests and requests without data do not need a Content-Type header\n            // 0 and false are valid requestData values and therefore should have a content type\n            if (resultOptions.method === 'GET' || (!requestData && requestData !== 0 && requestData !== false)) {\n                headers.delete('Content-Type');\n            } else if (requestData) {\n                if (data.constructor.name === 'FormData') {\n                    headers.delete('Content-Type');\n                } else if (!headers.get('Content-Type')) {\n                    headers.set('Content-Type', 'application/json');\n                }\n                resultOptions.body = requestData;\n            }\n\n            resultOptions.headers = headers;\n            return resultOptions;\n        }\n\n        if (query.length) {\n            requestUrl = `${requestUrl}?${query}`;\n        }\n        const requestOptions = getOptions(this.defaultHeaders, options, data);\n\n        // If the provided value is valid JSON, return the parsed JSON object. If not, return the raw value as is.\n        function parseResponseData(value) {\n            try {\n                return JSON.parse(value);\n            } catch (e) {\n                return value;\n            }\n        }\n\n        return new Promise((resolve, reject) => {\n            // fetch returns a promise that will resolve with any response received from the server\n            // It will be rejected ONLY if no response is received from the server, i.e. because there's no internet\n            this.fetch(requestUrl, requestOptions)\n                .then((response) => {\n                    // If the request failed, response.ok will be false and response.status will be the status code\n                    if (response.ok) {\n                        response.text().then(text => resolve(parseResponseData(text)));\n                    } else {\n                        response.text().then((text) => {\n                            const parsedResponseData = parseResponseData(text);\n                            if (response.status === 401) {\n                                const request = {\n                                    method,\n                                    url,\n                                    data,\n                                    options,\n                                };\n                                if (this.unauthorizedCallback) {\n                                    this.unauthorizedCallback(request, parsedResponseData);\n                                }\n                            }\n                            if (!process.env || process.env.npm_lifecycle_event !== 'test') {\n                                console.warn( // eslint-disable-line\n                                    `API request failed with status ${response.status} ${response.statusText}\\n`,\n                                    `Request: ${requestOptions.method} ${requestUrl}`,\n                                );\n                            }\n                            reject(parsedResponseData);\n                        });\n                    }\n                })\n                .catch((err) => {\n                    // It's not usually possible to get much info about the cause of the error programmatically, but\n                    // the user can check the browser console for more info\n                    if (!process.env || process.env.npm_lifecycle_event !== 'test') {\n                        console.error('Server connection error:', err); // eslint-disable-line\n                    }\n\n                    reject(`Server connection failed for API request: ${requestOptions.method} ${requestUrl}`);\n                });\n        });\n    }\n    /* eslint-enable complexity */\n\n    /**\n     * Sets the baseUrl that should be used for the api.\n     *\n     * When working against the dhis2 demo instance at {@link https://play.dhis2.org/demo} the\n     * baseUrl would be set as `https://play.dhis2.org/demo/api`.\n     *\n     * This method is used when calling the `d2.init` method with the `baseUrl` config property\n     * to configure the Api singleton.\n     *\n     * @param {string} baseUrl The base url to be used for the API.\n     *\n     * @returns {this} Itself for chaining purposes\n     */\n    setBaseUrl(baseUrl) {\n        checkType(baseUrl, 'string', 'Base url');\n\n        this.baseUrl = baseUrl;\n\n        return this;\n    }\n}\n\n/**\n * Retrieve the Api singleton or create one.\n *\n * When called for the first time it creates and Api singleton object.\n * Any subsequent calls will return the previously created singleton.\n *\n * @returns {Api} The Api singleton.\n * @memberof module:api~Api\n */\nfunction getApi() {\n    if (getApi.api) {\n        return getApi.api;\n    }\n    return (getApi.api = new Api());\n}\n\nApi.getApi = getApi;\n\nexport default Api;\n"]}