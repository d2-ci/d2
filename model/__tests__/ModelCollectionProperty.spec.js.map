{"version":3,"sources":["../../../src/model/__tests__/ModelCollectionProperty.spec.js"],"names":["describe","skip","mockParentModel","mockModelDefinition","mcp","testModels","beforeEach","id","plural","href","modelDefinition","apiEndpoint","ModelDefinition","createFromSchema","fixtures","get","ModelCollectionProperty","create","push","name","afterEach","it","expect","toBeInstanceOf","Object","toThrowError","api","toEqual","Api","getApi","dirty","toBe","added","Set","removed","size","parentModel","forEach","model","add","length","remove","updateDirty","resetDirtyState","isDirty","jest","fn","mockReturnValue","Promise","resolve","post","mockClear","done","save","then","toHaveBeenCalledTimes","catch","e","not","toHaveBeenCalled","toBeCalledWith","additions","deletions","reject","loadedWithValues","loadedWithoutValues","unloadedWithValues","unloadedWithoutValues","excludedByFieldFilters","dataElementGroups","mockMcpPropName","undefined","hasUnloadedData","all","load","err","toHaveBeenCalledWith","join","fields","paging","valuesContainerMap","toArray","value","Model"],"mappings":"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","sourcesContent":["import fixtures from '../../__fixtures__/fixtures';\nimport Api from '../../api/Api';\nimport Model from '../Model';\nimport ModelDefinition from '../ModelDefinition';\nimport ModelCollectionProperty from '../ModelCollectionProperty';\n\ndescribe.skip('ModelCollectionProperty', () => {\n    // let ModelCollectionProperty;\n    let mockParentModel;\n    let mockModelDefinition;\n    let mcp;\n    let testModels = [];\n\n    beforeEach(() => {\n        mockParentModel = {\n            id: 'parentModelId',\n            plural: 'notArealModel',\n            href: 'my.dhis/instance',\n            modelDefinition: {\n                apiEndpoint: 'http://my.base.url/api/parentModelEndpoint',\n            },\n        };\n        mockModelDefinition = ModelDefinition.createFromSchema(fixtures.get('/api/schemas/dataElement'));\n\n        mcp = ModelCollectionProperty.create(mockParentModel, mockModelDefinition, 'dataElementGroups', []);\n\n        testModels.push(mockModelDefinition.create({ id: 'dataEleme01', name: 'Test' }));\n        testModels.push(mockModelDefinition.create({ id: 'dataEleme02' }));\n        testModels.push(mockModelDefinition.create({ id: 'dataEleme03' }));\n    });\n\n    afterEach(() => {\n        testModels = [];\n    });\n\n    it('Should be an object', () => {\n        expect(ModelCollectionProperty).toBeInstanceOf(Object);\n    });\n\n    it('Should not be callable as a function', () => {\n        expect(() => ModelCollectionProperty()).toThrowError();\n    });\n\n    describe('create()', () => {\n        it('Supplies the default API implementation', () => {\n            expect(mcp.api).toEqual(Api.getApi());\n        });\n\n        it('Sets the dirty flag to false', () => {\n            expect(mcp.dirty).toBe(false);\n        });\n\n        it('Creates empty Sets for added and removed elements', () => {\n            expect(mcp.added).toBeInstanceOf(Set);\n            expect(mcp.removed).toBeInstanceOf(Set);\n            expect(mcp.added.size).toBe(0);\n            expect(mcp.removed.size).toBe(0);\n        });\n\n        it('Sets the correct parentModel', () => {\n            expect(mcp.parentModel).toEqual(mockParentModel);\n        });\n    });\n\n    describe('add()', () => {\n        it('Registers added elements', () => {\n            testModels.forEach(model => mcp.add(model));\n            expect(mcp.added.size).toBe(testModels.length);\n        });\n\n        it('Only registers each added element once', () => {\n            testModels.forEach(model => mcp.add(model));\n            testModels.forEach(model => mcp.add(model));\n            expect(mcp.added.size).toBe(testModels.length);\n        });\n\n        it('Updates the dirty flag', () => {\n            expect(mcp.dirty).toBe(false);\n            mcp.add(testModels[0]);\n            expect(mcp.dirty).toBe(true);\n        });\n\n        it('Sets the dirty flag to false when an element is added and then removed', () => {\n            expect(mcp.dirty).toBe(false);\n            mcp.add(testModels[0]);\n            expect(mcp.dirty).toBe(true);\n            mcp.remove(testModels[0]);\n            expect(mcp.dirty).toBe(false);\n        });\n    });\n\n    describe('remove()', () => {\n        beforeEach(() => {\n            // Create a new ModelCollectionProperty with existing values\n            mcp = ModelCollectionProperty.create(mockParentModel, mockModelDefinition, 'dataElementGroups', testModels);\n        });\n\n        it('Registers removed elements', () => {\n            expect(mcp.removed.size).toBe(0);\n            mcp.remove(testModels[0]);\n            expect(mcp.removed.size).toBe(1);\n            mcp.remove(testModels[1]);\n            expect(mcp.removed.size).toBe(2);\n            mcp.remove(testModels[2]);\n            expect(mcp.removed.size).toBe(3);\n        });\n\n        it('Only registers each removed element once', () => {\n            expect(mcp.removed.size).toBe(0);\n            mcp.remove(testModels[0]);\n            expect(mcp.removed.size).toBe(1);\n            mcp.remove(testModels[0]);\n            expect(mcp.removed.size).toBe(1);\n        });\n\n        it('Updates the dirty flag', () => {\n            expect(mcp.dirty).toBe(false);\n            mcp.remove(testModels[0]);\n            expect(mcp.dirty).toBe(true);\n        });\n\n        it('Sets the dirty flag to false when an element is removed and re-added', () => {\n            expect(mcp.dirty).toBe(false);\n            mcp.remove(testModels[0]);\n            expect(mcp.dirty).toBe(true);\n            mcp.add(testModels[0]);\n            expect(mcp.dirty).toBe(false);\n        });\n    });\n\n    describe('updateDirty()', () => {\n        it('Updates the dirty flag correctly', () => {\n            expect(mcp.updateDirty()).toBe(false);\n            mcp.added.add({ id: 'not a real model' });\n            expect(mcp.updateDirty()).toBe(true);\n        });\n\n        it('Returns the updated value of the dirty flag', () => {\n            mcp.added.add({ id: 'not a real model' });\n            expect(mcp.updateDirty()).toBe(mcp.dirty);\n        });\n    });\n\n    describe('resetDirtyState()', () => {\n        it('Clears all added and removed elements', () => {\n            mcp.added.add(testModels[0]);\n            mcp.removed.add({ id: 'bah ' });\n            expect(mcp.added.size).toBe(1);\n            expect(mcp.removed.size).toBe(1);\n\n            mcp.resetDirtyState();\n            expect(mcp.added.size).toBe(0);\n            expect(mcp.removed.size).toBe(0);\n        });\n\n        it('Sets the dirty flag to false', () => {\n            expect(mcp.dirty).toBe(false);\n            mcp.add(testModels[0]);\n            mcp.removed.add({ id: 'bah ' });\n            expect(mcp.updateDirty()).toBe(true);\n            mcp.resetDirtyState();\n            expect(mcp.dirty).toBe(false);\n        });\n    });\n\n    describe('isDirty()', () => {\n        it('Returns the current value of the dirty flag', () => {\n            expect(mcp.isDirty()).toBe(mcp.dirty);\n            mcp.add(testModels[0]);\n            expect(mcp.isDirty()).toBe(true);\n            expect(mcp.isDirty()).toBe(mcp.dirty);\n        });\n\n        it('Does not update the dirty flag', () => {\n            expect(mcp.isDirty()).toBe(false);\n            mcp.added.add(testModels[0]);\n            expect(mcp.isDirty()).toBe(false);\n        });\n\n        it('Should be dirty=true if any model has been edited by default', () => {\n            expect(mcp.isDirty()).toBe(false);\n            mcp.add(testModels[0]);\n            expect(mcp.isDirty()).toBe(true);\n            mcp.resetDirtyState();\n\n            expect(mcp.isDirty()).toBe(false);\n\n            testModels[0].name = 'Raccoon';\n            expect(testModels[0].isDirty()).toBe(true);\n            expect(mcp.isDirty()).toBe(true);\n        });\n\n        it('Should be dirty=false if includeValues=false', () => {\n            expect(mcp.isDirty()).toBe(false);\n            mcp.add(testModels[0]);\n            expect(mcp.isDirty()).toBe(true);\n            mcp.resetDirtyState();\n\n            expect(mcp.isDirty()).toBe(false);\n\n            testModels[0].name = 'Raccoon';\n            expect(testModels[0].isDirty()).toBe(true);\n            expect(mcp.isDirty(false)).toBe(false);\n        });\n    });\n\n    describe('save()', () => {\n        const api = {\n            get: jest.fn().mockReturnValue(Promise.resolve()),\n            post: jest.fn().mockReturnValue(Promise.resolve()),\n        };\n\n        beforeEach(() => {\n            mcp = new ModelCollectionProperty(\n                mockParentModel,\n                mockModelDefinition,\n                'dataElementGroups',\n                [testModels[0]],\n                api,\n            );\n        });\n\n        afterEach(() => {\n            api.get.mockClear();\n            api.post.mockClear();\n        });\n\n        it('Does nothing when the collection not dirty', (done) => {\n            mcp.save()\n                .then(() => {\n                    expect(api.post).toHaveBeenCalledTimes(0);\n                    done();\n                }).catch(e => done(e));\n        });\n\n        it('Sends additions and removals in a single request', (done) => {\n            mcp.remove(testModels[0]);\n            mcp.add(testModels[1]);\n            mcp.save()\n                .then(() => {\n                    expect(api.get).not.toHaveBeenCalled();\n                    expect(api.post).toHaveBeenCalledTimes(1);\n                    done();\n                }).catch(e => done(e));\n        });\n\n        it('Sends an API requests with the correct additions and removals, using the correct URL', (done) => {\n            mcp.remove(testModels[0]);\n            mcp.add(testModels[1]);\n            mcp.save()\n                .then(() => {\n                    expect(api.get).not.toHaveBeenCalled();\n                    expect(api.post).toHaveBeenCalledTimes(1);\n                    expect(api.post).toBeCalledWith('my.dhis/instance/dataElements', {\n                        additions: [{ id: 'dataEleme02' }],\n                        deletions: [{ id: 'dataEleme01' }],\n                    });\n                    done();\n                }).catch(e => done(e));\n        });\n\n        it('Resets the dirty flag', (done) => {\n            mcp.remove(testModels[0]);\n            mcp.add(testModels[1]);\n            expect(mcp.dirty).toBe(true);\n            mcp.save()\n                .then(() => {\n                    expect(mcp.dirty).toBe(false);\n                    done();\n                }).catch(e => done(e));\n        });\n\n        it('Does not throw when the API fails', (done) => {\n            api.post.mockReturnValue(Promise.reject());\n            mcp.add(testModels[1]);\n            expect(mcp.dirty).toBe(true);\n            expect(() => {\n                mcp.save().then(() => done()).catch(() => done());\n            }).not.toThrowError();\n        });\n\n        it('Rejects the promise when the API fails', (done) => {\n            api.post.mockReturnValue(Promise.reject());\n            mcp.add(testModels[1]);\n            expect(mcp.dirty).toBe(true);\n            expect(() => {\n                mcp.save().then(() => done('API failure was accepted silently')).catch(() => done());\n            }).not.toThrowError();\n        });\n    });\n\n    describe('load()', () => {\n        let loadedWithValues;\n        let loadedWithoutValues;\n        let unloadedWithValues;\n        let unloadedWithoutValues;\n        let excludedByFieldFilters;\n\n        const api = {\n            get: jest.fn().mockReturnValue(Promise.resolve({\n                dataElementGroups: [\n                    { id: 'groupNo0001' },\n                    { id: 'groupNo0002' },\n                    { id: 'groupNo0003' },\n                ],\n            })),\n        };\n\n        const mockMcpPropName = 'dataElementGroups';\n\n        beforeEach(() => {\n            loadedWithValues = new ModelCollectionProperty(\n                mockParentModel,\n                mockModelDefinition,\n                mockMcpPropName,\n                [ // Loaded, actual values\n                    mockModelDefinition.create({ id: 'groupNo0001' }),\n                    mockModelDefinition.create({ id: 'groupNo0002' }),\n                    mockModelDefinition.create({ id: 'groupNo0003' }),\n                ],\n                api,\n            );\n\n            // A ModelCollectionProperty that has been fully loaded, but contains no values\n            loadedWithoutValues = new ModelCollectionProperty(\n                mockParentModel,\n                mockModelDefinition,\n                mockMcpPropName,\n                [], // Loaded, no values\n                api,\n            );\n\n            // A ModelCollectionProperty that has not yet been loaded, but contains values that can be lazy loaded\n            unloadedWithValues = new ModelCollectionProperty(\n                mockParentModel,\n                mockModelDefinition,\n                mockMcpPropName,\n                true, // Not loaded, has values (meaning the field was loaded with the '::isNotEmpty' transformer)\n                api,\n            );\n\n            unloadedWithoutValues = new ModelCollectionProperty(\n                mockParentModel,\n                mockModelDefinition,\n                mockMcpPropName,\n                false, // Not loaded, no values\n                api,\n            );\n\n            excludedByFieldFilters = new ModelCollectionProperty(\n                mockParentModel,\n                mockModelDefinition,\n                mockMcpPropName,\n                undefined, // This field was not included in the API query\n                api,\n            );\n        });\n\n        afterEach(() => {\n            api.get.mockClear();\n        });\n\n        it('Sets `hasUnloadedData` correctly', () => {\n            expect(loadedWithValues.hasUnloadedData).toBe(false);\n            expect(loadedWithoutValues.hasUnloadedData).toBe(false);\n            expect(unloadedWithValues.hasUnloadedData).toBe(true);\n            expect(unloadedWithoutValues.hasUnloadedData).toBe(false);\n            expect(excludedByFieldFilters.hasUnloadedData).toBe(true);\n        });\n\n        it('does not query the API when there are no unloaded values', (done) => {\n            Promise.all([\n                loadedWithValues.load(),\n                loadedWithoutValues.load(),\n                unloadedWithoutValues.load(),\n            ]).then(() => {\n                expect(api.get).not.toHaveBeenCalled();\n                done();\n            }).catch(err => done(err));\n        });\n\n        it('performs the correct API call for lazy loading', (done) => {\n            unloadedWithValues\n                .load()\n                .then(() => {\n                    expect(api.get).toHaveBeenCalledWith(\n                        [mockParentModel.modelDefinition.apiEndpoint, mockParentModel.id].join('/'), {\n                            fields: 'dataElementGroups[:all]',\n                            paging: false,\n                        },\n                    );\n                    done();\n                }).catch(err => done(err));\n        });\n\n        it('correctly merges request parameters when lazy loading', (done) => {\n            unloadedWithValues\n                .load({ paging: false, fields: 'id,displayName' })\n                .then(() => {\n                    expect(api.get).toHaveBeenCalledWith(\n                        [mockParentModel.modelDefinition.apiEndpoint, mockParentModel.id].join('/'), {\n                            fields: 'dataElementGroups[id,displayName]',\n                            paging: false,\n                        },\n                    );\n                    done();\n                })\n                .catch(err => done(err));\n        });\n\n        it('updates hasUnloadedData when data has been lazy loaded', (done) => {\n            expect(unloadedWithValues.hasUnloadedData).toBe(true);\n            unloadedWithValues.load().then(() => {\n                expect(unloadedWithValues.hasUnloadedData).toBe(false);\n                done();\n            }).catch(err => done(err));\n        });\n\n        it('creates models for lazy loaded objects', (done) => {\n            unloadedWithValues\n                .load()\n                .then(() => {\n                    expect(unloadedWithValues.valuesContainerMap.size).toBe(3);\n                    unloadedWithValues.toArray().forEach(value => expect(value).toBeInstanceOf(Model));\n                    done();\n                })\n                .catch(err => done(err));\n        });\n\n        it('supports lazy loading collection fields that were not included in the original API query', (done) => {\n            expect(excludedByFieldFilters.hasUnloadedData).toBe(true);\n\n            excludedByFieldFilters\n                .load()\n                .then(() => {\n                    expect(api.get).toHaveBeenCalled();\n                    expect(excludedByFieldFilters.hasUnloadedData).toBe(false);\n                    done();\n                }).catch(err => done(err));\n        });\n    });\n});\n"],"file":"ModelCollectionProperty.spec.js"}