{"version":3,"sources":["../../../../src/model/helpers/__tests__/json.spec.js"],"names":["mockModelDefinitions","jest","mock","getModelDefinitions","describe","validationRuleSchema","validationRuleModelDefinition","beforeEach","fixtures","get","ModelDefinition","createFromSchema","validationRule","it","model","create","id","organisationUnitLevels","expect","toEqual","checkTypeStub","legendSetSchema","legendSet","legendSetSchemaDefinition","spyOn","check","mockReturnValue","afterEach","mockRestore","legends","toHaveLength","userGroupAccesses","access","userGroupUid","displayName","userAccesses","userUid","user","username","firstName","favoritesPropName","favoritesValue","modelDefinition","modelValidations","favorites","dataValues","getCollectionChildrenPropertyNames","getReferenceProperties","actual","expected"],"mappings":"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","sourcesContent":["import fixtures from '../../../__fixtures__/fixtures';\nimport * as check from '../../../lib/check';\nimport ModelDefinition from '../../ModelDefinition';\nimport { getJSONForProperties } from '../json';\n\nconst mockModelDefinitions = {};\n\njest.mock('../../ModelDefinitions', () => ({\n    getModelDefinitions() {\n        return mockModelDefinitions;\n    },\n}));\n\ndescribe('getJSONForProperties', () => {\n    describe('for validationRule', () => {\n        let validationRuleSchema;\n        let validationRuleModelDefinition;\n\n        beforeEach(() => {\n            validationRuleSchema = fixtures.get('/api/schemas/validationRule');\n\n            validationRuleModelDefinition = ModelDefinition.createFromSchema(validationRuleSchema);\n            mockModelDefinitions.validationRule = validationRuleModelDefinition;\n        });\n\n        it('does fancy stuffs', () => {\n            const model = validationRuleModelDefinition.create({ id: 'a0123456789', organisationUnitLevels: [1, 2] });\n\n            expect(getJSONForProperties(model, ['organisationUnitLevels'])).toEqual({ organisationUnitLevels: [1, 2] });\n        });\n    });\n\n    describe('for legendSet', () => {\n        let checkTypeStub;\n        let legendSetSchema;\n        let legendSet;\n        let legendSetSchemaDefinition;\n\n        beforeEach(() => {\n            checkTypeStub = jest.spyOn(check, 'checkType')\n                .mockReturnValue(true);\n\n            legendSetSchema = fixtures.get('/api/schemas/legendSet');\n\n            legendSetSchemaDefinition = ModelDefinition.createFromSchema(legendSetSchema);\n            mockModelDefinitions.legendSet = legendSetSchemaDefinition;\n\n            legendSet = fixtures.get('/api/legendSets/k1JHPfXsJND');\n        });\n\n        afterEach(() => {\n            checkTypeStub.mockRestore();\n        });\n\n        it('should embed the legends in the payload', () => {\n            const model = legendSetSchemaDefinition.create(legendSet);\n\n            expect(getJSONForProperties(model, ['legends']).legends).toHaveLength(6);\n            expect(getJSONForProperties(model, ['legends']).legends).toEqual(legendSet.legends);\n        });\n\n        it('should not throw on userGroupAcceses', () => {\n            const model = legendSetSchemaDefinition.create(legendSet);\n\n            expect(getJSONForProperties(model, ['userGroupAccesses']).userGroupAccesses).toHaveLength(1);\n        });\n\n        it('should maintain the full structure of the userGroupAccesses', () => {\n            const model = legendSetSchemaDefinition.create(legendSet);\n\n            expect(getJSONForProperties(model, ['userGroupAccesses']).userGroupAccesses).toEqual([\n                {\n                    access: 'rw------',\n                    userGroupUid: 'wl5cDMuUhmF',\n                    displayName: 'Administrators',\n                    id: 'wl5cDMuUhmF',\n                },\n            ]);\n        });\n\n        it('should maintain the full structure of the userAccesses', () => {\n            legendSetSchemaDefinition = ModelDefinition.createFromSchema(legendSetSchema);\n            const model = legendSetSchemaDefinition.create(legendSet);\n\n            expect(getJSONForProperties(model, ['userAccesses']).userAccesses).toEqual([\n                {\n                    access: 'rw------',\n                    userUid: 'UgDpalMTGDr',\n                    displayName: 'Kanu Nwankwo',\n                    id: 'UgDpalMTGDr',\n                },\n            ]);\n        });\n\n        it('should only use the ID of the user object', () => {\n            legendSetSchemaDefinition = ModelDefinition.createFromSchema(legendSetSchema);\n            const model = legendSetSchemaDefinition.create(legendSet);\n\n            model.user = {\n                id: 'xE7jOejl9FI',\n                username: 'admin',\n                firstName: 'John',\n            };\n\n            expect(getJSONForProperties(model, ['user']).user).toEqual({\n                id: 'xE7jOejl9FI',\n            });\n        });\n    });\n\n    describe('property types', () => {\n        it('should handle non-embedded collection properties', () => {\n            const favoritesPropName = 'favorites';\n            const favoritesValue = ['userId1', 'userId2'];\n            const model = {\n                modelDefinition: {\n                    modelValidations: {\n                        favorites: {},\n                    },\n                },\n                dataValues: {\n                    [favoritesPropName]: favoritesValue,\n                },\n                getCollectionChildrenPropertyNames: () => [favoritesPropName],\n                getReferenceProperties: () => [],\n            };\n            const actual = getJSONForProperties(model, [favoritesPropName]);\n\n            const expected = {\n                [favoritesPropName]: favoritesValue,\n            };\n\n            expect(actual).toEqual(expected);\n        });\n    });\n});\n"],"file":"json.spec.js"}