{"version":3,"sources":["../../src/i18n/I18n.js"],"names":["I18n","sources","api","getApi","strings","Set","translations","undefined","path","push","trim","length","add","Array","from","filter","string","forEach","i18n","parseProperties","text","split","reduce","props","line","map","out","key","value","hasOwnProperty","replace","match","grp","String","fromCharCode","parseInt","propFiles","source","request","then","Promise","resolve","data","all","propFile","Object","keys","str","delete","size","post","res","variables","Error","translatedString","partial"],"mappings":"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","file":"I18n.js","sourcesContent":["/**\n * @module i18n\n */\n\nimport Api from '../api/Api';\n\n/**\n * I18n class for dealing with translations\n */\nclass I18n {\n    constructor(sources = [], api = Api.getApi()) {\n        this.sources = sources;\n        this.api = api;\n        this.strings = new Set();\n        this.translations = undefined;\n    }\n\n    /**\n     * Adds a .properties file to the list of sources to load translations from\n     *\n     * Files are loaded in the order they're added, and the first translation of each string that's encountered will be\n     * used.\n     *\n     * @param {String} path\n     */\n    addSource(path) {\n        this.sources.push(path);\n    }\n\n    /**\n     * Adds one or more strings to the list of strings to translate\n     *\n     * @param {(String[]|String)} strings\n     */\n    addStrings(strings) {\n        if (typeof strings === 'string' && strings.trim().length > 0) {\n            this.strings.add(strings.trim());\n        } else {\n            Array.from(strings)\n                .filter(string => string && (`${string}`).trim().length > 0)\n                .forEach(string => this.strings.add(string));\n        }\n    }\n\n    /**\n     * Load translations\n     *\n     * First, all properties files (specified with addSource) are loaded.\n     * Then, if any untranslated strings remain, these are POSTed to the i18n endpoint of the DHIS2 API.\n     *\n     * @returns {Promise}\n     */\n    load() {\n        const i18n = this;\n        i18n.translations = {};\n\n        function parseProperties(text) {\n            return text.split('\\n').reduce((props, line) => {\n                const [key, value] = line.split('=').map(out => out.trim());\n                if (key !== undefined && value !== undefined && !props.hasOwnProperty(key)) {\n                    props[key] = value // eslint-disable-line no-param-reassign\n                        .replace(/\\\\u([0-9a-f]{4})/gi, (match, grp) => String.fromCharCode(parseInt(grp, 16)));\n                }\n                return props;\n            }, {});\n        }\n\n        const propFiles = [];\n\n        this.sources.forEach((source) => {\n            propFiles.push(\n                i18n.api.request('GET', source).then(\n                    data => Promise.resolve(parseProperties(data)),\n\n                    // Resolve errors to an empty object, so that one missing file doesn't prevent\n                    // the rest from being loaded\n                    () => Promise.resolve({}),\n                ),\n            );\n        });\n\n        return Promise.all(propFiles).then((propFile) => {\n            propFile.forEach((props) => {\n                Object.keys(props).forEach((str) => {\n                    if (!i18n.translations.hasOwnProperty(str)) {\n                        i18n.translations[str] = props[str];\n                    }\n                    this.strings.delete(str);\n                });\n            });\n\n            if (this.strings.size > 0) {\n                return i18n.api.post('i18n', Array.from(i18n.strings)).then((res) => {\n                    Object.keys(res)\n                        .filter(str => str !== res[str])\n                        .forEach((str) => {\n                            i18n.translations[str] = res[str];\n                            i18n.strings.delete(str);\n                        });\n\n                    return Promise.resolve(i18n.translations);\n                });\n            }\n\n            return Promise.resolve(i18n.translations);\n        });\n    }\n\n    /**\n     * Gets the translated version of the specified string\n     *\n     * If no translation exists for the specified string, the string is returned as is with two asterisks on each side,\n     * in order to easily identify missing translations in the UI\n     *\n     * @param string\n     * @returns {String}\n     */\n    getTranslation(string, variables = {}) {\n        if (this.translations === undefined) {\n            throw new Error('Tried to translate before loading translations!');\n        }\n        const translatedString = this.translations.hasOwnProperty(string)\n            ? this.translations[string]\n            : `** ${string} **`;\n\n        if (Object.keys(variables).length) {\n            return translatedString\n                .replace(/\\$\\$(.+?)\\$\\$/gi, (match, partial) => variables[partial] || '');\n        }\n\n        return translatedString;\n    }\n\n    /**\n     * Check if a translation exists for the specified string\n     *\n     * @param string\n     * @returns {boolean} True if a translation exists, false otherwise\n     */\n    isTranslated(string) {\n        if (this.translations === undefined) {\n            throw new Error('Tried to translate before loading translations!');\n        }\n        return this.translations.hasOwnProperty(string);\n    }\n\n\n    /**\n     * Get the list of strings that don't have translations\n     *\n     * If no translations have been loaded yet, `undefined` is returned in stead.\n     *\n     * @returns {Array|undefined} Array of untranslated strings, or undefined if translations haven't been loaded\n     */\n    getUntranslatedStrings() {\n        return this.translations ? Array.from(this.strings) : undefined;\n    }\n\n    /**\n     * Return a new instance of this class\n     *\n     * @returns {I18n}\n     */\n    static getI18n() {\n        return new I18n();\n    }\n}\n\nexport default I18n;\n"]}