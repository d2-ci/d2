{"version":3,"sources":["../../../src/datastore/__tests__/DatastoreNamespace.spec.js"],"names":["jest","mock","describe","keys","namespace","apiMock","beforeEach","MockApi","getApi","DataStoreNamespace","get","mockReturnValue","Promise","resolve","post","update","delete","afterEach","mockReset","it","expect","toThrowError","Array","isArray","toBe","toEqual","refreshedKeys","concat","mockClear","done","getKeys","then","res","catch","e","toHaveBeenCalled","mockReturnValueOnce","toBeCalledWith","namespaceRes","message","val","key","metaObj","created","lastUpdated","externalAccess","value","id","getMetaData","valueData","spyOn","setKey","set","not","arr","encryptedVal","prop","calls","toHaveBeenCalledWith","length","toContain","orgLen","err","toMatch"],"mappings":"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","sourcesContent":["import DataStoreNamespace from '../../datastore/DataStoreNamespace';\nimport MockApi from '../../api/Api';\n\njest.mock('../../api/Api');\n\ndescribe('DataStoreNamespace', () => {\n    const keys = ['key1', 'a key', 'aowelfkxuw'];\n    let namespace;\n    let apiMock;\n\n    beforeEach(() => {\n        apiMock = MockApi.getApi();\n\n        namespace = new DataStoreNamespace('DHIS', keys, apiMock);\n\n        apiMock.get.mockReturnValue(Promise.resolve());\n        apiMock.post.mockReturnValue(Promise.resolve());\n        apiMock.update.mockReturnValue(Promise.resolve());\n        apiMock.delete.mockReturnValue(Promise.resolve());\n    });\n\n    afterEach(() => {\n        MockApi.mockReset();\n    });\n\n    it('should throw an error if not called with a string', () => {\n        expect(() => new DataStoreNamespace()).toThrowError(\n            'BaseStoreNamespace must be called with a string to identify the Namespace',\n        );\n    });\n\n    it('should contain an array of keys', () => {\n        expect(Array.isArray(namespace.keys)).toBe(true);\n        expect(namespace.keys).toEqual(keys);\n    });\n\n    it('should contain a string of a namespace', () => {\n        expect(typeof namespace.namespace).toBe('string');\n    });\n\n    describe('getKeys()', () => {\n        const refreshedKeys = keys.concat('newkey');\n        beforeEach(() => {\n            apiMock.get.mockClear();\n            apiMock.get.mockReturnValue(Promise.resolve(keys));\n        });\n\n        it('should return an array of keys', (done) => {\n            namespace\n                .getKeys()\n                .then((res) => {\n                    expect(res).toEqual(keys);\n                    done();\n                })\n                .catch(e => done(e));\n        });\n\n        it('should be backwards compatible with getKeys(false), but send request either way', () => {\n            namespace.getKeys().then((res) => {\n                expect(res).toEqual(keys);\n                expect(apiMock.get).toHaveBeenCalled();\n            });\n        });\n\n        it('should call remote api if forceload is true and update internal array', (done) => {\n            apiMock.get.mockReturnValueOnce(Promise.resolve(refreshedKeys));\n\n            namespace\n                .getKeys(true)\n                .then((res) => {\n                    expect(res).toEqual(refreshedKeys);\n                    expect(namespace.keys).toEqual(refreshedKeys);\n                    expect(apiMock.get).toBeCalledWith('dataStore/DHIS');\n                    done();\n                })\n                .catch(e => done(e));\n        });\n\n        it('should throw an error when there is no response', (done) => {\n            apiMock.get.mockReturnValueOnce(Promise.resolve({}));\n\n            return namespace\n                .getKeys(true)\n                .then(() => done('It did not fail!'))\n                .catch((namespaceRes) => {\n                    expect(namespaceRes.message).toBe(\n                        'The requested namespace has no keys or does not exist.',\n                    );\n                    done();\n                });\n        });\n    });\n\n    describe('get()', () => {\n        beforeEach(() => {\n            apiMock.get.mockReturnValueOnce(Promise.resolve('value'));\n        });\n\n        it('should call API with correct parameters', (done) => {\n            namespace\n                .get('key1')\n                .then(() => {\n                    expect(apiMock.get).toBeCalledWith('dataStore/DHIS/key1');\n                    done();\n                })\n                .catch(e => done(e));\n        });\n\n        it('should return a value', (done) => {\n            namespace\n                .get('key1')\n                .then((val) => {\n                    expect(val).toBe('value');\n                    done();\n                })\n                .catch(e => done(e));\n        });\n    });\n\n    describe('getMetaData()', () => {\n        const key = 'key1';\n        const metaObj = {\n            created: '2017-01-22T14:15:14.176',\n            lastUpdated: '2017-01-22T14:15:14.176',\n            externalAccess: false,\n            namespace: 'DHIS',\n            key: 'key1',\n            value: '{}',\n            id: 'B6SZPkuigc0',\n        };\n        beforeEach(() => {\n            apiMock.get.mockReturnValueOnce(Promise.resolve(metaObj));\n        });\n\n        it('should retrieve an object with metaData', (done) => {\n            namespace\n                .getMetaData(key)\n                .then((res) => {\n                    expect(res).toBe(metaObj);\n                    done();\n                })\n                .catch(e => done(e));\n        });\n\n        it('should call api.get() with correct parameters', (done) => {\n            namespace\n                .getMetaData(key)\n                .then(() => {\n                    expect(apiMock.get).toBeCalledWith(\n                        `dataStore/DHIS/${key}/metaData`,\n                    );\n                    done();\n                })\n                .catch(e => done(e));\n        });\n    });\n\n    describe('set()', () => {\n        const valueData = 'value';\n        beforeEach(() => {\n            jest.spyOn(namespace, 'update');\n            jest.spyOn(namespace, 'set');\n        });\n\n        it('should call the api with correct url', (done) => {\n            const setKey = 'DHIS2';\n\n            return namespace.set(setKey, valueData).then(() => {\n                expect(apiMock.post).toBeCalledWith(\n                    `dataStore/DHIS/${setKey}`,\n                    valueData,\n                );\n                done();\n            });\n        });\n\n        it('should update if the key exists', () => {\n            const setKey = 'key1';\n\n            return namespace.set(setKey, valueData).then(() => {\n                expect(namespace.update).toBeCalledWith(setKey, valueData);\n                expect(apiMock.update).toBeCalledWith(\n                    `dataStore/DHIS/${setKey}`,\n                    valueData,\n                );\n            });\n        });\n\n        it('should call post if the key exists and override is true', () => {\n            const setKey = 'key1';\n\n            return namespace.set(setKey, valueData, true).then(() => {\n                expect(namespace.update).not.toHaveBeenCalled();\n                expect(apiMock.post).toBeCalledWith(\n                    `dataStore/DHIS/${setKey}`,\n                    valueData,\n                );\n            });\n        });\n\n        it('should add key to internal array', (done) => {\n            const arr = namespace.keys;\n            const key = 'key';\n            namespace\n                .set('key', valueData)\n                .then(() => {\n                    expect(namespace.keys).toEqual(arr.concat(key));\n                    done();\n                })\n                .catch(e => done(e));\n        });\n\n        it('should work with encrypt = true', async () => {\n            const encryptedVal = {\n                prop: 'am encrypted',\n            };\n            await namespace.set('encrypt', encryptedVal, false, true);\n\n            const calls = apiMock.post.mock.calls;\n            expect(namespace.set).toHaveBeenCalledWith(\n                'encrypt',\n                encryptedVal,\n                false,\n                true,\n            );\n\n            expect(calls[calls.length - 1][0]).toContain('encrypt'); // last call with arg0\n        });\n    });\n\n    describe('delete()', () => {\n        it('should call api.delete() with the correct url', (done) => {\n            namespace\n                .delete('key1')\n                .then(() => {\n                    expect(apiMock.delete).toBeCalledWith(\n                        'dataStore/DHIS/key1',\n                    );\n                    done();\n                })\n                .catch(e => done(e));\n        });\n\n        it('should delete key from internal array', (done) => {\n            const orgLen = namespace.keys.length;\n            namespace\n                .delete('key1')\n                .then(() => {\n                    expect(namespace.keys.length).toBe(orgLen - 1);\n                    done();\n                })\n                .catch(e => done(e));\n        });\n\n        it('should call api.delete() even if the key was not present in the internal array', (done) => {\n            namespace\n                .delete('someInaginaryKeyIJustMadeUp')\n                .then(() => {\n                    expect(apiMock.delete).toBeCalledWith(\n                        'dataStore/DHIS/someInaginaryKeyIJustMadeUp',\n                    );\n                    done();\n                })\n                .catch(e => done(e));\n        });\n\n        it('should throw if not called with a string', async () => {\n            /* this way of handling errors is quite weird, see\n                    https://github.com/facebook/jest/issues/3601\n                 */\n            let err = null;\n            try {\n                await namespace.delete({});\n            } catch (e) {\n                err = e;\n            }\n            expect(err.message).toMatch(/Expected key to be string, but got/);\n        });\n    });\n\n    describe('update()', () => {\n        const valueData = 'value';\n\n        it('should call the api with correct url', (done) => {\n            const setKey = 'DHIS';\n            namespace\n                .update(setKey, valueData)\n                .then(() => {\n                    expect(apiMock.update).toBeCalledWith(\n                        `dataStore/DHIS/${setKey}`,\n                        valueData,\n                    );\n                    done();\n                })\n                .catch(e => done(e));\n        });\n    });\n});\n"],"file":"DatastoreNamespace.spec.js"}