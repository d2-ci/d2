{"version":3,"sources":["../../src/current-user/UserSettings.js"],"names":["UserSettings","userSettings","api","Api","getApi","settings","Promise","resolve","get","then","key","processValue","value","JSON","parse","e","reject","TypeError","join","response","Error","settingUrl","length","delete","post","headers"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;IAEMA,Y;AACF,wBAAYC,YAAZ,EAA8C;AAAA,QAApBC,GAAoB,uEAAdC,aAAIC,MAAJ,EAAc;;AAAA;;AAC1C,SAAKF,GAAL,GAAWA,GAAX;;AAEA,QAAID,YAAJ,EAAkB;AACd,WAAKI,QAAL,GAAgBJ,YAAhB;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;0BACU;AAAA;;AACF,aAAO,KAAKI,QAAL,GACDC,OAAO,CAACC,OAAR,CAAgB,KAAKF,QAArB,CADC,GAED,KAAKH,GAAL,CAASM,GAAT,CAAa,cAAb,EAA6BC,IAA7B,CAAkC,UAAAR,YAAY,EAAI;AAC9C,QAAA,KAAI,CAACI,QAAL,GAAgBJ,YAAhB;AACA,eAAOK,OAAO,CAACC,OAAR,CAAgB,KAAI,CAACF,QAArB,CAAP;AACH,OAHD,CAFN;AAMH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;wBACQK,G,EAAK;AAAA;;AACL,UAAI,KAAKL,QAAL,IAAiB,KAAKA,QAAL,CAAcK,GAAd,CAArB,EAAyC;AACrC,eAAOJ,OAAO,CAACC,OAAR,CAAgB,KAAKF,QAAL,CAAcK,GAAd,CAAhB,CAAP;AACH;;AAED,eAASC,YAAT,CAAsBC,KAAtB,EAA6B;AACzB;AACA,YAAI;AACA,iBAAOC,IAAI,CAACC,KAAL,CAAWF,KAAX,CAAP;AACH,SAFD,CAEE,OAAOG,CAAP,EAAU;AACR,iBAAOH,KAAP;AACH;AACJ;;AAED,aAAO,IAAIN,OAAJ,CAAY,UAACC,OAAD,EAAUS,MAAV,EAAqB;AACpC,YAAI,CAAC,qBAASN,GAAT,CAAL,EAAoB;AAChB,gBAAM,IAAIO,SAAJ,CACF,0EADE,CAAN;AAGH;;AAED,QAAA,MAAI,CAACf,GAAL,CAASM,GAAT,CAAa,CAAC,cAAD,EAAiBE,GAAjB,EAAsBQ,IAAtB,CAA2B,GAA3B,CAAb,EAA8CT,IAA9C,CAAmD,UAAAU,QAAQ,EAAI;AAC3D,cAAMP,KAAK,GAAGD,YAAY,CAACQ,QAAD,CAA1B,CAD2D,CAE3D;;AACA,UAAA,MAAI,CAACT,GAAD,CAAJ,GAAYE,KAAZ;;AACA,cAAIA,KAAJ,EAAW;AACPL,YAAAA,OAAO,CAACK,KAAD,CAAP;AACH;;AACDI,UAAAA,MAAM,CACF,IAAII,KAAJ,CACI,2DADJ,CADE,CAAN;AAKH,SAZD;AAaH,OApBM,CAAP;AAqBH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;wBACQV,G,EAAKE,K,EAAO;AACZ,aAAO,KAAKP,QAAZ;AAEA,UAAMgB,UAAU,GAAG,CAAC,cAAD,EAAiBX,GAAjB,EAAsBQ,IAAtB,CAA2B,GAA3B,CAAnB;;AACA,UAAIN,KAAK,KAAK,IAAV,IAAkB,UAAGA,KAAH,EAAWU,MAAX,KAAsB,CAA5C,EAA+C;AAC3C,eAAO,KAAKpB,GAAL,CAASqB,MAAT,CAAgBF,UAAhB,CAAP;AACH;;AACD,aAAO,KAAKnB,GAAL,CAASsB,IAAT,CAAcH,UAAd,EAA0BT,KAA1B,EAAiC;AACpCa,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AAD2B,OAAjC,CAAP;AAGH;;;;;;eAGUzB,Y","sourcesContent":["import Api from '../api/Api'\nimport { isString } from '../lib/check'\n\n/**\n * @description\n * Handles communication with the userSettings endpoint. Can be used to get or save userSettings.\n *\n * @memberof module:current-user\n */\n\nclass UserSettings {\n    constructor(userSettings, api = Api.getApi()) {\n        this.api = api\n\n        if (userSettings) {\n            this.settings = userSettings\n        }\n    }\n\n    /**\n     * @returns {Promise} Promise that resolves with the usersettings object from the api.\n     *\n     * @description\n     * Loads all the user settings of current user and returns them as an object from the promise.\n     * ```js\n     * d2.currentUser.userSettings.all()\n     *  .then(userSettings => {\n     *    console.log('UI Locale: ' + userSettings.keyUiLocale);\n     *  });\n     * ```\n     */\n    all() {\n        return this.settings\n            ? Promise.resolve(this.settings)\n            : this.api.get('userSettings').then(userSettings => {\n                  this.settings = userSettings\n                  return Promise.resolve(this.settings)\n              })\n    }\n\n    /**\n     * @param {String} key The identifier of the user setting that should be retrieved.\n     * @returns {Promise} A promise that resolves with the value or will fail if the value is not available.\n     *\n     * @description\n     * ```js\n     * d2.currentUser.userSettings.get('keyUiLocale')\n     *  .then(userSettingValue => {\n     *    console.log('UI Locale: ' + userSettingValue);\n     *  });\n     * ```\n     */\n    get(key) {\n        if (this.settings && this.settings[key]) {\n            return Promise.resolve(this.settings[key])\n        }\n\n        function processValue(value) {\n            // Attempt to parse the response as JSON. If this fails we return the value as is.\n            try {\n                return JSON.parse(value)\n            } catch (e) {\n                return value\n            }\n        }\n\n        return new Promise((resolve, reject) => {\n            if (!isString(key)) {\n                throw new TypeError(\n                    'A \"key\" parameter should be specified when calling get() on userSettings'\n                )\n            }\n\n            this.api.get(['userSettings', key].join('/')).then(response => {\n                const value = processValue(response)\n                // Store the value on the user settings object\n                this[key] = value\n                if (value) {\n                    resolve(value)\n                }\n                reject(\n                    new Error(\n                        'The requested userSetting has no value or does not exist.'\n                    )\n                )\n            })\n        })\n    }\n\n    /**\n     * @param {String} key The identifier of the user setting that should be saved.\n     * @param {String} value The new value of the user setting.\n     * @returns {Promise} A promise that will resolve when the new value has been saved, or fail if saving fails.\n     *\n     * @description\n     * ```js\n     * d2.currentUser.userSettings.set('keyUiLocale', 'fr')\n     *  .then(() => {\n     *   console.log('UI Locale is now \"fr\");\n     *  });\n     * ```\n     */\n    set(key, value) {\n        delete this.settings\n\n        const settingUrl = ['userSettings', key].join('/')\n        if (value === null || `${value}`.length === 0) {\n            return this.api.delete(settingUrl)\n        }\n        return this.api.post(settingUrl, value, {\n            headers: { 'Content-Type': 'text/plain' },\n        })\n    }\n}\n\nexport default UserSettings\n"],"file":"UserSettings.js"}