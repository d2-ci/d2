{"version":3,"sources":["../../src/current-user/UserSettings.js"],"names":["UserSettings","userSettings","api","getApi","settings","Promise","resolve","get","then","key","processValue","value","JSON","parse","e","reject","TypeError","join","response","Error","settingUrl","length","delete","post","headers"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;AAGA;;;;;;;IAOMA,Y;AACF,0BAAYC,YAAZ,EAA8C;AAAA,YAApBC,GAAoB,uEAAd,cAAIC,MAAJ,EAAc;;AAAA;;AAC1C,aAAKD,GAAL,GAAWA,GAAX;;AAEA,YAAID,YAAJ,EAAkB;AACd,iBAAKG,QAAL,GAAgBH,YAAhB;AACH;AACJ;;AAED;;;;;;;;;;;;;;;;8BAYM;AAAA;;AACF,mBAAO,KAAKG,QAAL,GACDC,QAAQC,OAAR,CAAgB,KAAKF,QAArB,CADC,GAED,KAAKF,GAAL,CAASK,GAAT,CAAa,cAAb,EACGC,IADH,CACQ,UAACP,YAAD,EAAkB;AAAE,sBAAKG,QAAL,GAAgBH,YAAhB,CAA8B,OAAOI,QAAQC,OAAR,CAAgB,MAAKF,QAArB,CAAP;AAAwC,aADlG,CAFN;AAIH;;AAED;;;;;;;;;;;;;;;4BAYIK,G,EAAK;AAAA;;AACL,gBAAI,KAAKL,QAAL,IAAiB,KAAKA,QAAL,CAAcK,GAAd,CAArB,EAAyC;AACrC,uBAAOJ,QAAQC,OAAR,CAAgB,KAAKF,QAAL,CAAcK,GAAd,CAAhB,CAAP;AACH;;AAED,qBAASC,YAAT,CAAsBC,KAAtB,EAA6B;AACzB;AACA,oBAAI;AACA,2BAAOC,KAAKC,KAAL,CAAWF,KAAX,CAAP;AACH,iBAFD,CAEE,OAAOG,CAAP,EAAU;AACR,2BAAOH,KAAP;AACH;AACJ;;AAED,mBAAO,IAAIN,OAAJ,CAAY,UAACC,OAAD,EAAUS,MAAV,EAAqB;AACpC,oBAAI,CAAC,qBAASN,GAAT,CAAL,EAAoB;AAChB,0BAAM,IAAIO,SAAJ,CAAc,0EAAd,CAAN;AACH;;AAED,uBAAKd,GAAL,CAASK,GAAT,CAAa,CAAC,cAAD,EAAiBE,GAAjB,EAAsBQ,IAAtB,CAA2B,GAA3B,CAAb,EACKT,IADL,CACU,UAACU,QAAD,EAAc;AAChB,wBAAMP,QAAQD,aAAaQ,QAAb,CAAd;AACA;AACA,2BAAKT,GAAL,IAAYE,KAAZ;AACA,wBAAIA,KAAJ,EAAW;AACPL,gCAAQK,KAAR;AACH;AACDI,2BAAO,IAAII,KAAJ,CAAU,2DAAV,CAAP;AACH,iBATL;AAUH,aAfM,CAAP;AAgBH;;AAED;;;;;;;;;;;;;;;;4BAaIV,G,EAAKE,K,EAAO;AACZ,mBAAO,KAAKP,QAAZ;;AAEA,gBAAMgB,aAAa,CAAC,cAAD,EAAiBX,GAAjB,EAAsBQ,IAAtB,CAA2B,GAA3B,CAAnB;AACA,gBAAIN,UAAU,IAAV,IAAkB,MAAIA,KAAJ,EAAaU,MAAb,KAAwB,CAA9C,EAAiD;AAC7C,uBAAO,KAAKnB,GAAL,CAASoB,MAAT,CAAgBF,UAAhB,CAAP;AACH;AACD,mBAAO,KAAKlB,GAAL,CAASqB,IAAT,CAAcH,UAAd,EAA0BT,KAA1B,EAAiC,EAAEa,SAAS,EAAE,gBAAgB,YAAlB,EAAX,EAAjC,CAAP;AACH;;;;;;kBAGUxB,Y","file":"UserSettings.js","sourcesContent":["import Api from '../api/Api';\nimport { isString } from '../lib/check';\n\n\n/**\n * @description\n * Handles communication with the userSettings endpoint. Can be used to get or save userSettings.\n *\n * @memberof module:current-user\n */\n\nclass UserSettings {\n    constructor(userSettings, api = Api.getApi()) {\n        this.api = api;\n\n        if (userSettings) {\n            this.settings = userSettings;\n        }\n    }\n\n    /**\n     * @returns {Promise} Promise that resolves with the usersettings object from the api.\n     *\n     * @description\n     * Loads all the user settings of current user and returns them as an object from the promise.\n     * ```js\n     * d2.currentUser.userSettings.all()\n     *  .then(userSettings => {\n     *    console.log('UI Locale: ' + userSettings.keyUiLocale);\n     *  });\n     * ```\n     */\n    all() {\n        return this.settings\n            ? Promise.resolve(this.settings)\n            : this.api.get('userSettings')\n                .then((userSettings) => { this.settings = userSettings; return Promise.resolve(this.settings); });\n    }\n\n    /**\n     * @param {String} key The identifier of the user setting that should be retrieved.\n     * @returns {Promise} A promise that resolves with the value or will fail if the value is not available.\n     *\n     * @description\n     * ```js\n     * d2.currentUser.userSettings.get('keyUiLocale')\n     *  .then(userSettingValue => {\n     *    console.log('UI Locale: ' + userSettingValue);\n     *  });\n     * ```\n     */\n    get(key) {\n        if (this.settings && this.settings[key]) {\n            return Promise.resolve(this.settings[key]);\n        }\n\n        function processValue(value) {\n            // Attempt to parse the response as JSON. If this fails we return the value as is.\n            try {\n                return JSON.parse(value);\n            } catch (e) {\n                return value;\n            }\n        }\n\n        return new Promise((resolve, reject) => {\n            if (!isString(key)) {\n                throw new TypeError('A \"key\" parameter should be specified when calling get() on userSettings');\n            }\n\n            this.api.get(['userSettings', key].join('/'))\n                .then((response) => {\n                    const value = processValue(response);\n                    // Store the value on the user settings object\n                    this[key] = value;\n                    if (value) {\n                        resolve(value);\n                    }\n                    reject(new Error('The requested userSetting has no value or does not exist.'));\n                });\n        });\n    }\n\n    /**\n     * @param {String} key The identifier of the user setting that should be saved.\n     * @param {String} value The new value of the user setting.\n     * @returns {Promise} A promise that will resolve when the new value has been saved, or fail if saving fails.\n     *\n     * @description\n     * ```js\n     * d2.currentUser.userSettings.set('keyUiLocale', 'fr')\n     *  .then(() => {\n     *   console.log('UI Locale is now \"fr\");\n     *  });\n     * ```\n     */\n    set(key, value) {\n        delete this.settings;\n\n        const settingUrl = ['userSettings', key].join('/');\n        if (value === null || (`${value}`).length === 0) {\n            return this.api.delete(settingUrl);\n        }\n        return this.api.post(settingUrl, value, { headers: { 'Content-Type': 'text/plain' } });\n    }\n}\n\nexport default UserSettings;\n"]}