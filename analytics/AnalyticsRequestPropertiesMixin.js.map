{"version":3,"sources":["../../src/analytics/AnalyticsRequestPropertiesMixin.js"],"names":["AnalyticsRequestPropertiesMixin","base","params","parameters","AnalyticsRequest","path","format","value","aggregationType","toUpperCase","aggregationTypes","Set","has","console","warn","criteria","measureCriteria","preAggregationMeasureCriteria","flag","skipMeta","skipData","hierarchyMeta","ignoreLimit","tableLayout","hideEmptyRows","hideEmptyColumns","showHierarchy","includeNumDen","includeMetadataDetails","displayProperty","displayProperties","scheme","outputIdScheme","inputIdScheme","level","approvalLevel","date","relativePeriodDate","orgUnit","userOrgUnit","dimensions","columns","rows","startDate","endDate","program","stage","eventStatus","eventStatuses","programStatus","programStatuses","ouMode","ouModes","asc","desc","coordinatesOnly","page","size","pageSize","sortOrder","sortOrders","limit","type","outputTypes","outputType","collapseDataDimensions","skipRounding","aggregateData","clusterSize","field","coordinateField","bbox","includeClusterPoints"],"mappings":"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","sourcesContent":["/* eslint no-console: 0 */\n\nimport AnalyticsRequest from './AnalyticsRequest'\n\n/**\n * @private\n * @description\n * AnalyticsRequest properties mixin function\n *\n * @param {*} base The base class to mix onto\n * @return {module:analytics.AnalyticsRequestPropertiesMixin} The mixin class\n */\n/**\n * @private\n * @description\n * AnalyticsRequest properties mixin\n *\n * @alias module:analytics.AnalyticsRequestPropertiesMixin\n */\nconst AnalyticsRequestPropertiesMixin = base =>\n    class extends base {\n        /**\n         * Sets the query parameters of the request\n         *\n         * @param {!Object} parameters The query parameters to add/modify to the request\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *   .withParameters({ completedOnly: true, aggregationType: 'AVERAGE' });\n         */\n        withParameters(params) {\n            if (params) {\n                this.parameters = {\n                    ...this.parameters,\n                    ...params,\n                }\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Sets the URL path for the request.\n         * It appends the given path to the request's URL.\n         *\n         * @param {!String} path The path of the response\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withPath('aggregate');\n         */\n        withPath(path) {\n            if (path) {\n                this.path = path\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Sets the response format for the request.\n         * It appends the file extension to the request's path.\n         *\n         * @param {String} [format=json] The format of the response\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withFormat('xml');\n         */\n        withFormat(format = 'json') {\n            this.format = format\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the aggregationType query parameter to the request.\n         *\n         * @param {String} aggregationType The aggregationType value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withAggregationType('SUM');\n         */\n        withAggregationType(value) {\n            const aggregationType = value.toUpperCase()\n\n            const aggregationTypes = new Set([\n                'AVERAGE',\n                'AVERAGE_SUM_ORG_UNIT',\n                'COUNT',\n                'LAST',\n                'LAST_AVERAGE_ORG_UNIT',\n                'MIN',\n                'MAX',\n                'STDDEV',\n                'SUM',\n                'VARIANCE',\n            ])\n\n            if (aggregationTypes.has(aggregationType)) {\n                this.parameters.aggregationType = aggregationType\n            } else if (aggregationType !== 'DEFAULT') {\n                console.warn(\n                    `d2.analytics.request.withAggregationType(): \"${value}\" not listed as possible value`\n                )\n                this.parameters.aggregationType = value\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the measureCriteria query parameter to the request.\n         *\n         * @param {!String} measureCriteria The measureCriteria value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withMeasureCriteria('GE:10;LT:50');\n         */\n        withMeasureCriteria(criteria) {\n            if (criteria) {\n                this.parameters.measureCriteria = criteria\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the preAggregationMeasureCriteria query parameter to the request.\n         *\n         * @param {!String} preAggregationMeasureCriteria The preAggregationMeasureCriteria value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withPreAggregationMeasureCriteria('GE:10;LT:50');\n         */\n        withPreAggregationMeasureCriteria(criteria) {\n            if (criteria) {\n                this.parameters.preAggregationMeasureCriteria = criteria\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the skipMeta query parameter to the request.\n         *\n         * @param {Boolean} [skipMeta=true] The skipMeta value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withSkipMeta();\n         */\n        withSkipMeta(flag = true) {\n            this.parameters.skipMeta = flag\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the skipData query parameter to the request.\n         *\n         * @param {Boolean} [skipData=true] The skipData value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withSkipData();\n         */\n        withSkipData(flag = true) {\n            this.parameters.skipData = flag\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the hierarchyMeta query parameter to the request.\n         *\n         * @param {Boolean} [hierarchyMeta=true] The hierarchyMeta value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withHierarchyMeta();\n         */\n        withHierarchyMeta(flag = true) {\n            this.parameters.hierarchyMeta = flag\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the ignoreLimit query parameter to the request.\n         *\n         * @param {Boolean} [ignoreLimit=true] The ignoreLimit value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withIgnoreLimit();\n         */\n        withIgnoreLimit(flag = true) {\n            this.parameters.ignoreLimit = flag\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the tableLayout query parameter to the request.\n         *\n         * @param {Boolean} [tableLayout=true] The tableLayout value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withTableLayout();\n         */\n        withTableLayout(flag = true) {\n            this.parameters.tableLayout = flag\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the hideEmptyRows query parameter to the request.\n         *\n         * @param {Boolean} [hideEmptyRows=true] The hideEmptyRows value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withHideEmptyRows();\n         */\n        withHideEmptyRows(flag = true) {\n            this.parameters.hideEmptyRows = flag\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the hideEmptyColumns query parameter to the request.\n         *\n         * @param {Boolean} [hideEmptyColumns=true] The hideEmptyColumns value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withHideEmptyColumns();\n         */\n        withHideEmptyColumns(flag = true) {\n            this.parameters.hideEmptyColumns = flag\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the showHierarchy query parameter to the request.\n         *\n         * @param {Boolean} [showHierarchy=true] The showHierarchy value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withShowHierarchy();\n         */\n        withShowHierarchy(flag = true) {\n            this.parameters.showHierarchy = flag\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the includeNumDen query parameter to the request.\n         *\n         * @param {Boolean} [includeNumDen=true] The includeNumDen value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withIncludeNumDen();\n         */\n        withIncludeNumDen(flag = true) {\n            this.parameters.includeNumDen = flag\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the includeMetadataDetails query parameter to the request.\n         *\n         * @param {Boolean} [includeMetadataDetails=true] The includeMetadataDetails value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withIncludeMetadataDetails();\n         */\n        withIncludeMetadataDetails(flag = true) {\n            this.parameters.includeMetadataDetails = flag\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the displayProperty query parameter to the request.\n         *\n         * @param {!String} displayProperty The displayProperty value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withDisplayProperty('SHORTNAME');\n         */\n        withDisplayProperty(value) {\n            const displayProperty = value.toUpperCase()\n\n            const displayProperties = new Set(['NAME', 'SHORTNAME'])\n\n            if (displayProperties.has(displayProperty)) {\n                this.parameters.displayProperty = displayProperty\n            } else {\n                console.warn(\n                    `d2.analytics.request.withDisplayProperty(): \"${value}\" not listed as possible value`\n                )\n                this.parameters.displayProperty = value\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the displayProperty query parameter to the request.\n         *\n         * @param {!String} displayProperty The displayProperty value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withDisplayProperty('SHORTNAME');\n         */\n        withOutputIdScheme(scheme) {\n            if (scheme) {\n                this.parameters.outputIdScheme = scheme\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the inputIdScheme query parameter to the request.\n         *\n         * @param {!String} inputIdScheme The inputIdScheme value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withInputIdScheme('CODE');\n         */\n        withInputIdScheme(scheme) {\n            if (scheme) {\n                this.parameters.inputIdScheme = scheme\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the approvalLevel query parameter to the request.\n         *\n         * @param {!String} approvalLevel The approvalLevel value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withApprovalLevel('');\n         */\n        withApprovalLevel(level) {\n            if (level) {\n                this.parameters.approvalLevel = level\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the relativePeriodDate query parameter to the request.\n         *\n         * @param {!String} relativePeriodDate The relativePeriodDate value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withRelativePeriodDate('LAST_12_MONTHS');\n         */\n        withRelativePeriodDate(date) {\n            if (date) {\n                this.parameters.relativePeriodDate = date\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the userOrgUnit query parameter to the request.\n         *\n         * @param {!String} userOrgUnit The userOrgUnit value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withUserOrgUnit('O6uvpzGd5pu');\n         */\n        withUserOrgUnit(orgUnit) {\n            if (orgUnit) {\n                this.parameters.userOrgUnit = orgUnit\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the columns query parameter to the request.\n         *\n         * @param {!String} columns The dimensions identifiers (separated by ;)\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withColumns('dx;ou');\n         */\n        withColumns(dimensions) {\n            if (dimensions) {\n                this.parameters.columns = dimensions\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the rows query parameter to the request.\n         *\n         * @param {!String} rows The dimensions identifiers (separated by ;)\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withRows('pe');\n         */\n        withRows(dimensions) {\n            if (dimensions) {\n                this.parameters.rows = dimensions\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the startDate query parameter to the request.\n         *\n         * @param {!String} startDate The startDate value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withStartDate('2017-11-28');\n         */\n        withStartDate(date) {\n            if (date) {\n                this.parameters.startDate = date\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the endDate query parameter to the request.\n         *\n         * @param {!String} endDate The endDate value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withEndDate('2017-12-31');\n         */\n        withEndDate(date) {\n            if (date) {\n                this.parameters.endDate = date\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Sets the program for the request.\n         * It appends the program id to the request's path.\n         *\n         * @param {!String} program The program id\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withProgram('eBAyeGv0exc');\n         */\n        withProgram(program) {\n            if (program) {\n                this.program = program\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the stage query parameter to the request.\n         *\n         * @param {!String} stage The stage value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withStage('Zj7UnCAulEk');\n         */\n        withStage(stage) {\n            if (stage) {\n                this.parameters.stage = stage\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the eventStatus query parameter to the request.\n         *\n         * @param {!String} eventStatus The eventStatus value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withEventStatus('COMPLETED');\n         */\n        withEventStatus(value) {\n            const eventStatus = value.toUpperCase()\n\n            const eventStatuses = new Set([\n                'ACTIVE',\n                'COMPLETED',\n                'SCHEDULED',\n                'OVERDUE',\n                'SKIPPED',\n            ])\n\n            if (eventStatuses.has(eventStatus)) {\n                this.parameters.eventStatus = eventStatus\n            } else {\n                console.warn(\n                    `d2.analytics.request.withEventStatus(): \"${value}\" not listed as possible value`\n                )\n                this.parameters.eventStatus = value\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the programStatus query parameter to the request.\n         *\n         * @param {!String} programStatus The programStatus value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withProgramStatus('COMPLETED');\n         */\n        withProgramStatus(value) {\n            const programStatus = value.toUpperCase()\n\n            const programStatuses = new Set([\n                'ACTIVE',\n                'COMPLETED',\n                'CANCELLED',\n            ])\n\n            if (programStatuses.has(programStatus)) {\n                this.parameters.programStatus = programStatus\n            } else {\n                console.warn(\n                    `d2.analytics.request.withProgramStatus(): \"${value}\" not listed as possible value`\n                )\n                this.parameters.programStatus = value\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the ouMode query parameter to the request.\n         *\n         * @param {!String} ouMode The ouMode value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withOuMode('CHILDREN');\n         */\n        withOuMode(value) {\n            const ouMode = value.toUpperCase()\n\n            const ouModes = new Set(['DESCENDANTS', 'CHILDREN', 'SELECTED'])\n\n            if (ouModes.has(ouMode)) {\n                this.parameters.ouMode = ouMode\n            } else {\n                console.warn(\n                    `d2.analytics.request.withOuMode(): \"${value}\" not listed as possible value`\n                )\n                this.parameters.ouMode = value\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the asc query parameter to the request.\n         *\n         * @param {!String} value The dimensions to be sorted ascending\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withAsc('EVENTDATE');\n         */\n        withAsc(value) {\n            if (value) {\n                this.parameters.asc = value\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the desc query parameter to the request.\n         *\n         * @param {!String} value The dimensions to be sorted descending\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withDesc('OUNAME');\n         */\n        withDesc(value) {\n            if (value) {\n                this.parameters.desc = value\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the coordinatesOnly query parameter to the request.\n         *\n         * @param {Boolean} [coordinatesOnly=true] The coordinatesOnly value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withCoordinatesOnly();\n         */\n        withCoordinatesOnly(flag = true) {\n            this.parameters.coordinatesOnly = flag\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the page query parameter to the request.\n         *\n         * @param {!Number} [page=1] The page number\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withPage(2);\n         */\n        withPage(page = 1) {\n            this.parameters.page = page\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the pageSize query parameter to the request.\n         *\n         * @param {!Number} [size=50] The number of items per page\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withPageSize(10);\n         */\n        withPageSize(size = 50) {\n            this.parameters.pageSize = size\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the value query parameter to the request.\n         *\n         * @param {!String} value A data element or attribute identifier\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withValue('UXz7xuGCEhU');\n         */\n        withValue(value) {\n            // must be a data element or attribute of numeric value type\n            if (value) {\n                this.parameters.value = value\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the sortOrder query parameter to the request.\n         *\n         * @param {!String} sortOrder The sortOrder value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withSortOrder('DESC');\n         */\n        withSortOrder(value) {\n            const sortOrder = value.toUpperCase()\n\n            const sortOrders = new Set(['ASC', 'DESC'])\n\n            if (sortOrders.has(sortOrder)) {\n                this.parameters.sortOrder = sortOrder\n            } else {\n                console.warn(\n                    `d2.analytics.request.withSortOrder(): \"${value}\" not listed as possible value`\n                )\n                this.parameters.sortOrder = value\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the limit query parameter to the request.\n         *\n         * @param {!Number} limit The maximum number of records to return\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withLimit('5000');\n         */\n        withLimit(value) {\n            if (value) {\n                const limit = value > 10000 ? 10000 : value\n\n                this.parameters.limit = limit\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the outputType query parameter to the request.\n         *\n         * @param {!String} outputType The output type\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withOutputType('ENROLLMENT');\n         */\n        withOutputType(value) {\n            const type = value.toUpperCase()\n\n            const outputTypes = new Set([\n                'EVENT',\n                'ENROLLMENT',\n                'TRACKED_ENTITY_INSTANCE',\n            ])\n\n            if (outputTypes.has(type)) {\n                this.parameters.outputType = type\n            } else {\n                console.warn(\n                    `d2.analytics.request.withOutputType(): \"${value}\" not listed as possible value`\n                )\n                this.parameters.outputType = value\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the collapseDataDimensions query parameter to the request.\n         *\n         * @param {Boolean} [collapseDataDimensions=true] The collapseDataDimensions value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withCollapseDataDimensions();\n         */\n        withCollapseDataDimensions(flag = true) {\n            this.parameters.collapseDataDimensions = flag\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the skipRounding query parameter to the request.\n         *\n         * @param {Boolean} [skipRounding=true] The skipRounding value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withSkipRounding();\n         */\n        withSkipRounding(flag = true) {\n            this.parameters.skipRounding = flag\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the aggregateData query parameter to the request.\n         *\n         * @param {Boolean} [aggregateData=true] The aggregateData value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withAggregateData();\n         */\n        withAggregateData(flag = true) {\n            this.parameters.aggregateData = flag\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the clusterSize query parameter to the request.\n         *\n         * @param {!Number} clusterSize The size of cluster in meters\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withClusterSize(1000);\n         */\n        withClusterSize(size) {\n            if (size) {\n                this.parameters.clusterSize = size\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the coordinateField query parameter to the request.\n         *\n         * @param {!String} [coordinateField=EVENT] The field to base geospatial event analytics on\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withCoordinateField('<attribute-id>');\n         */\n        withCoordinateField(field = 'EVENT') {\n            // EVENT, <attribute-id>, <dataelement-id>\n            this.parameters.coordinateField = field\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the bbox query parameter to the request.\n         *\n         * @param {!String} bbox The bounding box coordinates in the format \"min lng, min lat, max lng, max lat\"\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withBbox('11.1768827285209, 60.141691309755, 11.1694071634997, 60.287796722512');\n         */\n        withBbox(bbox) {\n            if (bbox) {\n                this.parameters.bbox = bbox\n            }\n\n            return new AnalyticsRequest(this)\n        }\n\n        /**\n         * Adds the includeClusterPoints query parameter to the request.\n         *\n         * @param {Boolean} [includeClusterPoints=true] The includeClusterPoints value\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .withIncludeClusterPoints();\n         */\n        withIncludeClusterPoints(flag = true) {\n            this.parameters.includeClusterPoints = flag\n            return new AnalyticsRequest(this)\n        }\n    }\n\nexport default AnalyticsRequestPropertiesMixin\n"],"file":"AnalyticsRequestPropertiesMixin.js"}