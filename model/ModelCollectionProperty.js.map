{"version":3,"sources":["../../src/model/ModelCollectionProperty.js"],"names":["ModelCollectionProperty","parentModel","modelDefinition","propName","values","api","undefined","dirty","added","Set","removed","hasUnloadedData","value","valuesContainerMap","has","id","delete","add","updateDirty","ModelCollection","throwIfContainsOtherThanModelObjects","throwIfContainsModelWithoutUid","size","includeValues","toArray","filter","model","isDirty","length","Promise","resolve","url","href","plural","join","data","additions","Array","from","map","deletions","post","then","resetDirtyState","catch","err","reject","options","forceReload","apiEndpoint","requestOptions","Object","assign","paging","fields","get","isArray","clear","forEach","set","create","Api","getApi"],"mappings":"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","sourcesContent":["import Api from '../api/Api'\nimport ModelCollection from './ModelCollection'\n\n/**\n * A ModelCollectionProperty instance is a ModelCollection that is a property of\n * a model instance. ModelCollectionProperties can be operated on independently of\n * the Model that owns them.\n *\n * @memberof module:model\n */\nclass ModelCollectionProperty extends ModelCollection {\n    /**\n     * @constructor\n     *\n     * @param {Model} parentModel The `Model` of the parent of this `ModelCollectionProperty`\n     * @param {ModelDefinition} modelDefinition The `ModelDefinition` that this `ModelCollection` property is for\n     * @param {String} propName The name of this property on the parent model\n     * @param {Model[]|boolean} values Initial values that should be added to the collection property\n     * @param {Api} api The class to use for API calls\n     *\n     * @description\n     *\n     * Creates a new `ModelCollectionProperty` object. This is a subclass of `ModelCollection`, which adds logic\n     * for adding and removing elements to the collection and saving the changes to the API.\n     *\n     * If the value is `true` or `undefined` is specified instead of an array of data values, this indicates that the\n     * collection contains (or may contain) data that has not yet been loaded from the API.\n     */\n    constructor(parentModel, modelDefinition, propName, values, api) {\n        super(modelDefinition, values, undefined)\n\n        // The name of this property on the parent object - necessary for loading values lazily\n        this.propName = propName\n\n        // Dirty bit - true if any models have been added to or removed from the collection\n        this.dirty = false\n\n        // Keep track of added and removed elements\n        this.added = new Set()\n        this.removed = new Set()\n\n        // Using field transformers, it's possible to query the API for the presence of data without actually fetching\n        // the data. For instance this is used to determine if an organization unit has any children without actually\n        // loading the children. If yes, it will be displayed as an expandable branch within the tree.\n        // For more information, see the documentation about field transformers, specifically the isNotEmpty operator:\n        // https://docs.dhis2.org/master/en/developer/html/dhis2_developer_manual_full.html#webapi_field_transformers\n        this.hasUnloadedData = values === true || values === undefined\n\n        this.api = api\n\n        // Store the parent model of this collection so we can construct the URI for API calls\n        this.parentModel = parentModel\n    }\n\n    /**\n     * @param {Model} value Model instance to add to the collection.\n     * @returns {ModelCollectionProperty} Returns itself for chaining purposes.\n     *\n     * @description\n     * Calls the `add` method on the parent `ModelCollection` class, and then performs checks to keep track of\n     * what, if any, changes that have been made to the collection.\n     */\n    add(value) {\n        if (this.valuesContainerMap.has(value.id)) {\n            return this\n        }\n\n        super.add(value)\n\n        if (this.removed.has(value.id)) {\n            this.removed.delete(value.id)\n        } else {\n            this.added.add(value.id)\n        }\n\n        this.updateDirty()\n        return this\n    }\n\n    /**\n     * If the collection contains an object with the same id as the `value` parameter, that object is removed\n     * from the collection. Checks are then performed to keep track of what, if any, changes that have been\n     * made to the collection.\n     *\n     * @param {Model} value Model instance to remove from the collection.\n     * @returns {ModelCollectionProperty} Returns itself for chaining purposes.\n     */\n    remove(value) {\n        ModelCollection.throwIfContainsOtherThanModelObjects([value])\n        ModelCollection.throwIfContainsModelWithoutUid([value])\n\n        if (this.delete(value.id)) {\n            if (this.added.has(value.id)) {\n                this.added.delete(value.id)\n            } else {\n                this.removed.add(value.id)\n            }\n        }\n\n        this.updateDirty()\n        return this\n    }\n\n    /**\n     * Checks whether any changes have been made to the collection, and updates the dirty flag accordingly.\n     *\n     * @returns {boolean} True if the collection has changed, false otherwise.\n     */\n    updateDirty() {\n        this.dirty = this.added.size > 0 || this.removed.size > 0\n        return this.dirty\n    }\n\n    /**\n     * Sets dirty=false and resets the added and removed sets used for dirty state tracking.\n     */\n    resetDirtyState() {\n        this.dirty = false\n        this.added = new Set()\n        this.removed = new Set()\n    }\n\n    /**\n     * Checks if the collection property has been modified.\n     * @param {boolean} [includeValues=true] If true, also checks if any models in the collection\n     * has been edited by checking the dirty flag on each model.\n     * @returns {boolean} true if any elements have been added to or removed from the collection\n     */\n    isDirty(includeValues = true) {\n        if (includeValues) {\n            return (\n                this.dirty ||\n                this.toArray().filter(\n                    model => model && model.isDirty() === true\n                ).length > 0\n            )\n        }\n        return this.dirty\n    }\n\n    /**\n     * If any changes have been made to the collection, these changes will be submitted to the API. The returned\n     * promise will resolve successfully when the changes have been saved to the API, and will be rejected if\n     * either the changes weren't saved or if there were no changes to save.\n     *\n     * @returns {Promise} A `Promise`\n     */\n    save() {\n        // Calling save when there's nothing to be saved is a no-op (not an error)\n        if (!this.isDirty()) {\n            return Promise.resolve({})\n        }\n\n        const url = [this.parentModel.href, this.modelDefinition.plural].join(\n            '/'\n        )\n        const data = {\n            additions: Array.from(this.added).map(id => ({ id })),\n            deletions: Array.from(this.removed).map(id => ({ id })),\n        }\n\n        return this.api\n            .post(url, data)\n            .then(() => {\n                this.resetDirtyState()\n                return Promise.resolve({})\n            })\n            .catch(err => Promise.reject('Failed to alter collection:', err))\n    }\n\n    load(options, forceReload = false) {\n        if (!this.hasUnloadedData && !forceReload) {\n            return Promise.resolve(this)\n        }\n\n        const url = [\n            this.parentModel.modelDefinition.apiEndpoint,\n            this.parentModel.id,\n        ].join('/')\n        const requestOptions = Object.assign(\n            {\n                paging: false,\n            },\n            options,\n            {\n                fields: `${this.propName}[${\n                    (options && options.fields) || ':all'\n                }]`,\n            }\n        )\n\n        return this.api\n            .get(url, requestOptions)\n            .then(data => data[this.propName])\n            .then(values => {\n                if (Array.isArray(values)) {\n                    this.valuesContainerMap.clear()\n                    values.forEach(value =>\n                        this.valuesContainerMap.set(\n                            value.id,\n                            this.modelDefinition.create(value)\n                        )\n                    )\n                }\n                this.hasUnloadedData = false\n                return Promise.resolve(this)\n            })\n    }\n\n    /**\n     * See `ModelCollectionProperty.constructor`.\n     *\n     * @param {Model} parentModel\n     * @param {ModelDefinition} modelDefinition\n     * @param {Model[]} values\n     * @returns {ModelCollectionProperty}\n     */\n    static create(parentModel, modelDefinition, propName, values) {\n        return new ModelCollectionProperty(\n            parentModel,\n            modelDefinition,\n            propName,\n            values,\n            Api.getApi()\n        )\n    }\n}\n\nexport default ModelCollectionProperty\n"],"file":"ModelCollectionProperty.js"}