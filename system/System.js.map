{"version":3,"sources":["../../src/system/System.js"],"names":["System","settings","configuration","systemInfo","undefined","version","installedApps","parseVersionString","apps","api","Api","getApi","get","then","setInstalledApps","zipFile","onProgress","data","FormData","xhr","append","XMLHttpRequest","upload","onprogress","progress","lengthComputable","loaded","total","post","contentType","processData","compatibleOnly","Promise","resolve","reject","appStoreData","map","appData","app","Object","assign","versions","filter","versionData","isVersionCompatible","length","catch","err","uid","join","dataType","appKey","delete","update","loadInstalledApps","major","Number","parseInt","minor","substring","indexOf","snapshot","a","b","from","String","to","systemVersion","appVersion","minVersion","minDhisVersion","min_platform_version","maxVersion","maxDhisVersion","max_platform_version","isNewEnough","compareVersions","isNotTooOld","getSystem","system","SystemSettings","SystemConfiguration"],"mappings":"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","sourcesContent":["/**\n * @module system\n *\n * @requires module:api/Api\n */\n\nimport Api from '../api/Api';\nimport SystemSettings from './SystemSettings';\nimport SystemConfiguration from './SystemConfiguration';\n\n/**\n * @description\n * Represents the system that can be interacted with. There is a single instance of this pre-defined onto the d2\n * object after initialisation. This can be interacted with using its property objects to among other be used\n * to get and save systemSettings.\n *\n * @memberof module:system\n */\nclass System {\n    constructor(settings, configuration) {\n        /**\n         * Contains a reference to a `SystemSettings` instance that can be used\n         * to retrieve and save system settings.\n         *\n         * ```js\n         * d2.system.settings.get('keyLastSuccessfulResourceTablesUpdate')\n         *  .then(systemSettingsValue => {\n         *    console.log('Analytics was last updated on: ' + systemSettingsValue);\n         *  });\n         * ```\n         * @type {SystemSettings}\n         *\n         */\n        this.settings = settings;\n\n        /**\n         * A representation of the system configuration,\n         * that can be used to retrieve and change system configuration options.\n         * @type {SystemConfiguration}\n         */\n        this.configuration = configuration;\n\n        /**\n         * An object containing system information about the DHIS2 instance\n         * @type {Object}\n         */\n        this.systemInfo = undefined;\n\n        /**\n         * An object containing version information about the DHIS2 instance\n         * @type {Object}\n         */\n        this.version = undefined;\n\n        /**\n         * An array of all the webapps that are installed on the current DHIS2 instance\n         * @type {Array}\n         */\n        this.installedApps = undefined;\n    }\n\n    /**\n     * Sets the systemInfo and version properties\n     *\n     * @param systemInfo\n     */\n    setSystemInfo(systemInfo) {\n        this.version = System.parseVersionString(systemInfo.version);\n        this.systemInfo = systemInfo;\n    }\n\n    /**\n     * Sets the list of currently installed webapps\n     *\n     * @param apps\n     */\n    setInstalledApps(apps) {\n        this.installedApps = apps;\n    }\n\n    /**\n     * Refreshes the list of currently installed webapps\n     *\n     * @returns {Promise} A promise that resolves to the list of installed apps\n     */\n    loadInstalledApps() {\n        const api = Api.getApi();\n\n        return api.get('apps')\n            .then((apps) => {\n                this.setInstalledApps(apps);\n\n                return apps;\n            });\n    }\n\n    /**\n     * Upload and install a zip file containing a new webapp\n     *\n     * @param zipFile Zip file data from a file input form field\n     * @param onProgress An optional callback that will be called whenever file upload progress info is available\n     * @returns {Promise}\n     */\n    uploadApp(zipFile, onProgress) { // eslint-disable-line class-methods-use-this\n        const api = Api.getApi();\n        const data = new FormData();\n        let xhr;\n        data.append('file', zipFile);\n\n        if (onProgress !== undefined) {\n            xhr = new XMLHttpRequest();\n            xhr.upload.onprogress = (progress) => {\n                if (progress.lengthComputable) {\n                    onProgress(progress.loaded / progress.total);\n                }\n            };\n        }\n\n        return api.post('apps', data, {\n            contentType: false,\n            processData: false,\n            xhr: xhr !== undefined ? () => xhr : undefined,\n        });\n    }\n\n    /**\n     * Load the list of apps available in the DHIS 2 app store\n     *\n     * @param compatibleOnly If true, apps that are incompatible with the current system will be filtered out\n     * @returns {Promise}\n     */\n    loadAppStore(compatibleOnly = true) {\n        return new Promise((resolve, reject) => {\n            const api = Api.getApi();\n            api.get('appStore')\n                .then(appStoreData => resolve(appStoreData\n                    .map((appData) => {\n                        const app = Object.assign({}, appData);\n\n                        if (compatibleOnly) {\n                            app.versions = app.versions\n                                .filter(versionData => System.isVersionCompatible(this.version, versionData));\n                        }\n\n                        return app;\n                    })\n                    .filter(appData => appData.versions.length > 0)),\n                )\n                .catch(err => reject(err));\n        });\n    }\n\n    /**\n     * Install the specified app version from the DHIS 2 app store\n     *\n     * @param uid The uid of the app version to install\n     * @returns {Promise}\n     */\n    installAppVersion(uid) { // eslint-disable-line class-methods-use-this\n        const api = Api.getApi();\n        return new Promise((resolve, reject) => {\n            api.post(['appStore', uid].join('/'), '', { dataType: 'text' }).then(() => {\n                resolve();\n            }).catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n    /**\n     * Remove the specified app from the system\n     *\n     * @param appKey The key of the app to remove\n     * @returns {Promise}\n     */\n    uninstallApp(appKey) { // eslint-disable-line class-methods-use-this\n        const api = Api.getApi();\n\n        return api.delete(['apps', appKey].join('/'))\n            // TODO: Stop jQuery from rejecting successful promises\n            .catch(() => undefined);\n    }\n\n    /**\n     * Refresh the list of apps that are installed on the server\n     *\n     * @returns {Promise} A promise that resolves to the updated list of installed apps\n     */\n    reloadApps() {\n        const api = Api.getApi();\n        return api.update('apps').then(() => this.loadInstalledApps());\n    }\n\n    /**\n     * @static\n     * @typedef {Object} ParsedVersion\n     * @property {number} major - Major version of the parsed-string (before .)\n     * @property {number} minor - Minor version of the parsed-string (after .)\n     * @property {boolean} snapshot - If it's a snapshot-version\n     */\n    // TODO: Validate string\n    // TODO: Handle valid version objects too\n    /**\n     * Parses a version string into an object describing the version.\n     * @param {string} version Version-string to parse\n     * @returns {module:system.ParsedVersion}\n     */\n    static parseVersionString(version) {\n        return {\n            major: Number.parseInt(version, 10),\n            minor: Number.parseInt(version.substring(version.indexOf('.') + 1), 10),\n            snapshot: version.indexOf('-SNAPSHOT') >= 0,\n        };\n    }\n\n    // Disable eslint complexity warning\n    /* eslint-disable complexity */\n    /**\n     * Compares version a to version b.\n     * @param a {string|module:system.ParsedVersion}\n     * @param b {string|module:system.ParsedVersion}\n     * @returns {number} 0 if same version, else a - b.\n     */\n    static compareVersions(a, b) {\n        const from = (typeof a === 'string' || a instanceof String) ? System.parseVersionString(a) : a;\n        const to = (typeof b === 'string' || b instanceof String) ? System.parseVersionString(b) : b;\n\n        if (from.major !== to.major) {\n            return from.major - to.major;\n        } else if (from.minor !== to.minor) {\n            return from.minor - to.minor;\n        }\n\n        return (from.snapshot ? 0 : 1) - (to.snapshot ? 0 : 1);\n    }\n\n    /**\n     * Checks if systemVersion is compatible with appVersion.\n     * Versions are compatible if appVersion.minDhisVersion <= parsed systemVersion and\n     * if appVersion.maxDhisVersion >= parsed systemVersion.\n     * @param systemVersion {string|module:system.ParsedVersion} systemVersion to check\n     * @param {Object} appVersion - AppVersion object to check\n     * @returns {boolean} true if compatible, false otherwise.\n     */\n    static isVersionCompatible(systemVersion, appVersion) {\n        const minVersion = appVersion.minDhisVersion || appVersion.min_platform_version || null;\n        const maxVersion = appVersion.maxDhisVersion || appVersion.max_platform_version || null;\n\n        const isNewEnough = (minVersion ? System.compareVersions(systemVersion, minVersion) >= 0 : true);\n        const isNotTooOld = (maxVersion ? System.compareVersions(systemVersion, maxVersion) <= 0 : true);\n\n        return isNewEnough && isNotTooOld;\n    }\n    /* eslint-enable */\n\n    /**\n     * Get a new instance of the system object. This will function as a singleton, when a System object has been created\n     * when requesting getSystem again the original version will be returned.\n     *\n     * @returns {System} Object with the system interaction properties\n     */\n    static getSystem() {\n        if (!System.getSystem.system) {\n            System.getSystem.system = new System(new SystemSettings(), new SystemConfiguration());\n        }\n\n        return System.getSystem.system;\n    }\n}\n\nexport default System;\n"],"file":"System.js"}