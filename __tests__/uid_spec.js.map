{"version":3,"sources":["../../src/__tests__/uid_spec.js"],"names":["describe","it","expect","isValidUid","toBe","toHaveLength","toMatch","not","generate500UniqueCodes","map","reduce","codes","code","add","Set","toThrowError"],"mappings":";;AAAA;;AACA;;;;AAEAA,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAC7BA,EAAAA,QAAQ,CAAC,cAAD,EAAiB,YAAM;AAC3BC,IAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAM;AAC7BC,MAAAA,MAAM,SAAQC,eAAR,EAAN,CAA0BC,IAA1B,CAA+B,UAA/B;AACH,KAFC,CAAF;AAIAH,IAAAA,EAAE,CAAC,mCAAD,EAAsC,YAAM;AAC1CC,MAAAA,MAAM,CAAC,sBAAD,CAAN,CAAqBE,IAArB,CAA0B,KAA1B;AACH,KAFC,CAAF;AAIAH,IAAAA,EAAE,CAAC,8BAAD,EAAiC,YAAM;AACrCC,MAAAA,MAAM,CAAC,qBAAW,IAAX,CAAD,CAAN,CAAyBE,IAAzB,CAA8B,KAA9B;AACH,KAFC,CAAF;AAIAH,IAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAM;AAClCC,MAAAA,MAAM,CAAC,qBAAW,CAAX,CAAD,CAAN,CAAsBE,IAAtB,CAA2B,KAA3B;AACH,KAFC,CAAF;AAIAH,IAAAA,EAAE,CAAC,sCAAD,EAAyC,YAAM;AAC7CC,MAAAA,MAAM,CAAC,qBAAW,EAAX,CAAD,CAAN,CAAuBE,IAAvB,CAA4B,KAA5B;AACH,KAFC,CAAF;AAIAH,IAAAA,EAAE,CAAC,kEAAD,EAAqE,YAAM;AACzEC,MAAAA,MAAM,CAAC,qBAAW,OAAX,CAAD,CAAN,CAA4BE,IAA5B,CAAiC,KAAjC;AACH,KAFC,CAAF;AAIAH,IAAAA,EAAE,CAAC,oCAAD,EAAuC,YAAM;AAC3CC,MAAAA,MAAM,CAAC,qBAAW,aAAX,CAAD,CAAN,CAAkCE,IAAlC,CAAuC,IAAvC;AACH,KAFC,CAAF;AAIAH,IAAAA,EAAE,CAAC,yDAAD,EAA4D,YAAM;AAChEC,MAAAA,MAAM,CAAC,qBAAW,aAAX,CAAD,CAAN,CAAkCE,IAAlC,CAAuC,KAAvC;AACH,KAFC,CAAF;AAIAH,IAAAA,EAAE,CAAC,4DAAD,EAA+D,YAAM;AACnEC,MAAAA,MAAM,CAAC,qBAAW,aAAX,CAAD,CAAN,CAAkCE,IAAlC,CAAuC,KAAvC;AACH,KAFC,CAAF;AAGH,GApCO,CAAR;AAsCAJ,EAAAA,QAAQ,CAAC,aAAD,EAAgB,YAAM;AAC1BC,IAAAA,EAAE,CAAC,kDAAD,EAAqD,YAAM;AACzDC,MAAAA,MAAM,CAAC,uBAAD,CAAN,CAAsBG,YAAtB,CAAmC,EAAnC;AACH,KAFC,CAAF;AAIAJ,IAAAA,EAAE,CAAC,iDAAD,EAAoD,YAAM;AACxDC,MAAAA,MAAM,CAAC,uBAAD,CAAN,CAAsBI,OAAtB,CAA8B,WAA9B;AACH,KAFC,CAAF;AAIAL,IAAAA,EAAE,CAAC,mCAAD,EAAsC,YAAM;AAC1CC,MAAAA,MAAM,CAAC,uBAAD,CAAN,CAAsBK,GAAtB,CAA0BH,IAA1B,CAA+B,uBAA/B;AACH,KAFC,CAAF;AAIAH,IAAAA,EAAE,CAAC,uCAAD,EAA0C,YAAM;AAC9C,UAAMO,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA,eAAM,mBAAM,CAAN,EAAS,GAAT,EAChCC,GADgC,CAC5B;AAAA,iBAAM,uBAAN;AAAA,SAD4B,EAEhCC,MAFgC,CAEzB,UAACC,KAAD,EAAQC,IAAR;AAAA,iBAAiBD,KAAK,CAACE,GAAN,CAAUD,IAAV,CAAjB;AAAA,SAFyB,EAES,IAAIE,GAAJ,EAFT,CAAN;AAAA,OAA/B;;AAIAZ,MAAAA,MAAM,CAACM,sBAAD,CAAN,CAA+BD,GAA/B,CAAmCQ,YAAnC;AACH,KANC,CAAF;AAOH,GApBO,CAAR;AAqBH,CA5DO,CAAR","sourcesContent":["import { range } from 'lodash';\nimport { isValidUid, generateUid } from '../uid';\n\ndescribe('Uid generation', () => {\n    describe('isValidUid()', () => {\n        it('should be a function', () => {\n            expect(typeof isValidUid).toBe('function');\n        });\n\n        it('should return false for undefined', () => {\n            expect(isValidUid()).toBe(false);\n        });\n\n        it('should return false for null', () => {\n            expect(isValidUid(null)).toBe(false);\n        });\n\n        it('should return false for 0', () => {\n            expect(isValidUid(0)).toBe(false);\n        });\n\n        it('should return false for empty string', () => {\n            expect(isValidUid('')).toBe(false);\n        });\n\n        it('should return false for a uid that is shorter than 11 characters', () => {\n            expect(isValidUid('a1234')).toBe(false);\n        });\n\n        it('should return true for a valid uid', () => {\n            expect(isValidUid('JkWynlWMjJR')).toBe(true);\n        });\n\n        it('should return false for a uid that starts with a number', () => {\n            expect(isValidUid('0kWynlWMjJR')).toBe(false);\n        });\n\n        it('should return false for a uid that has a special character', () => {\n            expect(isValidUid('AkWy$lWMjJR')).toBe(false);\n        });\n    });\n\n    describe('generateUid', () => {\n        it('should generate a uid that is 11 characters long', () => {\n            expect(generateUid()).toHaveLength(11);\n        });\n\n        it('should generate a uid that starts with a letter', () => {\n            expect(generateUid()).toMatch(/^[A-z]{1}/);\n        });\n\n        it('should not generate the same uids', () => {\n            expect(generateUid()).not.toBe(generateUid());\n        });\n\n        it('should generate a lot of unique codes', () => {\n            const generate500UniqueCodes = () => range(0, 500)\n                .map(() => generateUid())\n                .reduce((codes, code) => codes.add(code), new Set());\n\n            expect(generate500UniqueCodes).not.toThrowError();\n        });\n    });\n});\n"],"file":"uid_spec.js"}