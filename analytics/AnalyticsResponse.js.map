{"version":3,"sources":["../../src/analytics/AnalyticsResponse.js"],"names":["booleanMap","OUNAME","OU","DEFAULT_COLLECT_IGNORE_HEADERS","DEFAULT_PREFIX_IGNORE_HEADERS","getParseMiddleware","type","value","Number","isNaN","isFinite","parseFloat","isPrefixHeader","header","dimensions","includes","name","Boolean","Array","isArray","length","isCollectHeader","getPrefixedId","id","prefix","getNameByIdsByValueType","valueType","AnalyticsResponse","response","headers","extractHeaders","rows","extractRows","metaData","extractMetadata","map","index","isPrefix","isCollect","headersWithOptionSet","filter","optionSet","slice","optionCodeIdMap","forEach","row","items","ids","getSortedUniqueRowIdStringsByHeader","prefixedId","hasHeader","ouNameHeaderIndex","getHeader","getIndex","ouHeaderIndex","ouId","ouName","undefined","find","parseByType","parseString","rowIds","from","Set","responseRow","sort","optionIds","code","reduce","acc","obj","Object","assign","organisationUnits","ou","organisationUnit","i","hierarchyPrefix","ouHierarchy","hierarchyIds","hierarchyNames","split","reverse","unshift","push","fullName","join","a","b","aFullName","bFullName"],"mappings":"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","file":"AnalyticsResponse.js","sourcesContent":["import AnalyticsResponseHeader from './AnalyticsResponseHeader';\n\nconst booleanMap = {\n    0: 'No', // XXX i18n.no || 'No',\n    1: 'Yes', // i18n.yes || 'Yes',\n};\n\nconst OUNAME = 'ouname';\nconst OU = 'ou';\n\nconst DEFAULT_COLLECT_IGNORE_HEADERS = [\n    'psi',\n    'ps',\n    'eventdate',\n    'longitude',\n    'latitude',\n    'ouname',\n    'oucode',\n    'eventdate',\n    'eventdate',\n];\n\nconst DEFAULT_PREFIX_IGNORE_HEADERS = ['dy', ...DEFAULT_COLLECT_IGNORE_HEADERS];\n\nconst getParseMiddleware = (type) => {\n    switch (type) {\n    case 'STRING':\n    case 'TEXT':\n        return value => `${value}`;\n    case 'INTEGER':\n    case 'NUMBER':\n        return value => (!Number.isNaN(+value) && Number.isFinite(+value) ? parseFloat(+value) : value);\n    default:\n        return value => value;\n    }\n};\n\nconst isPrefixHeader = (header, dimensions) => {\n    if (DEFAULT_PREFIX_IGNORE_HEADERS.includes(header.name)) {\n        return false;\n    }\n\n    return Boolean(Array.isArray(dimensions) && dimensions.length === 0);\n};\n\nconst isCollectHeader = (header, dimensions) => {\n    if (DEFAULT_COLLECT_IGNORE_HEADERS.includes(header.name)) {\n        return false;\n    }\n\n    return Boolean(Array.isArray(dimensions) && dimensions.length === 0);\n};\n\nconst getPrefixedId = (id, prefix) => `${prefix || ''} ${id}`;\n\nconst getNameByIdsByValueType = (id, valueType) => {\n    if (valueType === 'BOOLEAN') {\n        return booleanMap[id];\n    }\n\n    return id;\n};\n\nclass AnalyticsResponse {\n    constructor(response) {\n        if (response) {\n            this.response = response;\n            this.headers = this.extractHeaders();\n            this.rows = this.extractRows();\n            this.metaData = this.extractMetadata();\n        }\n    }\n\n    extractHeaders() {\n        const dimensions = this.response.metaData.dimensions;\n        const headers = this.response.headers || [];\n\n        return headers.map(\n            (header, index) =>\n                new AnalyticsResponseHeader(header, {\n                    isPrefix: isPrefixHeader(header, dimensions[header.name]),\n                    isCollect: isCollectHeader(header, dimensions[header.name]),\n                    index,\n                }),\n        );\n    }\n\n    extractRows() {\n        const headersWithOptionSet = this.headers.filter(header => header.optionSet);\n        let rows = this.response.rows;\n\n        if (headersWithOptionSet.length) {\n            rows = rows.slice();\n\n            const optionCodeIdMap = this.optionCodeIdMap();\n\n            // replace option code with option uid\n            headersWithOptionSet.forEach((header) => {\n                rows.forEach((row, index) => {\n                    const id = optionCodeIdMap[header.name][row[header.index]];\n\n                    if (id) {\n                        rows[index][header.index] = id;\n                    }\n                });\n            });\n        }\n\n        return rows;\n    }\n\n    extractMetadata() {\n        const metaData = { ...this.response.metaData };\n\n        const { dimensions, items } = metaData;\n\n        // populate metaData dimensions and items\n        this.headers\n            .filter(header => !DEFAULT_COLLECT_IGNORE_HEADERS.includes(header.name))\n            .forEach((header) => {\n                let ids;\n\n                // collect row values\n                if (header.isCollect) {\n                    ids = this.getSortedUniqueRowIdStringsByHeader(header);\n                    dimensions[header.name] = ids;\n                } else {\n                    ids = dimensions[header.name];\n                }\n\n                if (header.isPrefix) {\n                    // create prefixed dimensions array\n                    dimensions[header.name] = ids.map(id => getPrefixedId(id, header.name));\n\n                    // create items\n                    dimensions[header.name].forEach((prefixedId, index) => {\n                        const id = ids[index];\n                        const valueType = header.valueType;\n\n                        const name = getNameByIdsByValueType(id, valueType);\n\n                        items[prefixedId] = { name };\n                    });\n                }\n            });\n\n        // for events, add items from 'ouname'\n        if (this.hasHeader(OUNAME) && this.hasHeader(OU)) {\n            const ouNameHeaderIndex = this.getHeader(OUNAME).getIndex();\n            const ouHeaderIndex = this.getHeader(OU).getIndex();\n            let ouId;\n            let ouName;\n\n            this.rows.forEach((row) => {\n                ouId = row[ouHeaderIndex];\n\n                if (items[ouId] === undefined) {\n                    ouName = row[ouNameHeaderIndex];\n\n                    items[ouId] = {\n                        name: ouName,\n                    };\n                }\n            });\n        }\n\n        return metaData;\n    }\n\n    getHeader(name) {\n        return this.headers.find(header => header.name === name);\n    }\n\n    hasHeader(name) {\n        return this.getHeader(name) !== undefined;\n    }\n\n    getSortedUniqueRowIdStringsByHeader(header) {\n        const parseByType = getParseMiddleware(header.valueType);\n        const parseString = getParseMiddleware('STRING');\n\n        const rowIds = Array.from(\n            // unique values\n            new Set(this.rows.map(responseRow => parseByType(responseRow[header.index]))),\n            // remove empty values\n        ).filter(id => id !== '');\n\n        return rowIds.sort().map(id => parseString(id));\n    }\n\n    optionCodeIdMap() {\n        const { dimensions, items } = this.response.metaData;\n        const map = {};\n\n        this.headers.filter(header => typeof header.optionSet === 'string').forEach((header) => {\n            const optionIds = dimensions[header.name];\n\n            map[header.name] = optionIds\n                .map(id => ({\n                    [items[id].code]: id,\n                }))\n                .reduce((acc, obj) => Object.assign(acc, obj), {});\n        });\n\n        return map;\n    }\n\n    sortOrganisationUnitsHierarchy() {\n        const organisationUnits = this.metaData.dimensions.ou;\n\n        organisationUnits.forEach((organisationUnit, i) => {\n            const hierarchyPrefix = this.metaData.ouHierarchy[organisationUnit];\n            const hierarchyIds = [organisationUnit];\n            const hierarchyNames = [];\n\n            hierarchyPrefix\n                .split('/')\n                .reverse()\n                .forEach((ouId) => {\n                    hierarchyIds.unshift(ouId);\n                });\n\n            hierarchyIds.forEach((ouId) => {\n                if (this.metaData.items[ouId]) {\n                    hierarchyNames.push(this.metaData.items[ouId].name);\n                }\n            });\n\n            organisationUnits[i] = {\n                id: organisationUnit,\n                fullName: hierarchyNames.join(' / '),\n            };\n        });\n\n        // XXX how does this work with different languages/collations?\n        organisationUnits.sort((a, b) => {\n            const aFullName = a.fullName;\n            const bFullName = b.fullName;\n\n            if (aFullName < bFullName) {\n                return -1;\n            }\n\n            return aFullName > bFullName ? 1 : 0;\n        });\n\n        this.metaData.dimensions.ou = organisationUnits.map(ou => ou.id);\n    }\n}\n\nexport default AnalyticsResponse;\n"]}