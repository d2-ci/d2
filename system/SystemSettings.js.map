{"version":3,"sources":["../../src/system/SystemSettings.js"],"names":["SystemSettings","api","Api","getApi","settings","Promise","resolve","get","then","systemSettingsKey","processValue","value","JSON","parse","e","reject","TypeError","options","headers","accept","join","undefined","response","Error","settingUrl","length","delete","post"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;AAEA;;;;;;;;AAQA;IACMA,c;;;AACF,4BAAgC;AAAA,QAApBC,GAAoB,uEAAdC,aAAIC,MAAJ,EAAc;;AAAA;;AAC5B,SAAKF,GAAL,GAAWA,GAAX;AACH;AAED;;;;;;;;;;;;;;;0BAWM;AAAA;;AACF,aAAO,KAAKG,QAAL,GACDC,OAAO,CAACC,OAAR,CAAgB,KAAKF,QAArB,CADC,GAED,KAAKH,GAAL,CAASM,GAAT,CAAa,gBAAb,EACGC,IADH,CACQ,UAACJ,QAAD,EAAc;AAChB,QAAA,KAAI,CAACA,QAAL,GAAgBA,QAAhB;AACA,eAAOC,OAAO,CAACC,OAAR,CAAgB,KAAI,CAACF,QAArB,CAAP;AACH,OAJH,CAFN;AAOH;AAED;;;;;;;;;;;;;;;;;wBAcIK,iB,EAAmB;AAAA;;AACnB,UAAI,KAAKL,QAAL,IAAiB,KAAKA,QAAL,CAAcK,iBAAd,CAArB,EAAuD;AACnD,eAAOJ,OAAO,CAACC,OAAR,CAAgB,KAAKF,QAAL,CAAcK,iBAAd,CAAhB,CAAP;AACH;;AAED,eAASC,YAAT,CAAsBC,KAAtB,EAA6B;AACzB;AACA,YAAI;AACA,iBAAOC,IAAI,CAACC,KAAL,CAAWF,KAAX,CAAP;AACH,SAFD,CAEE,OAAOG,CAAP,EAAU;AACR,iBAAOH,KAAP;AACH;AACJ;;AAED,aAAO,IAAIN,OAAJ,CAAY,UAACC,OAAD,EAAUS,MAAV,EAAqB;AACpC,YAAI,CAAC,qBAASN,iBAAT,CAAL,EAAkC;AAC9B,gBAAM,IAAIO,SAAJ,CAAc,4EAAd,CAAN;AACH;;AAED,YAAMC,OAAO,GAAG;AAAEC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,MAAM,EAAE;AAAV;AAAX,SAAhB;;AACA,QAAA,MAAI,CAAClB,GAAL,CAASM,GAAT,CACI,CAAC,gBAAD,EAAmBE,iBAAnB,EAAsCW,IAAtC,CAA2C,GAA3C,CADJ,EACqDC,SADrD,EACgEJ,OADhE,EAEKT,IAFL,CAEU,UAACc,QAAD,EAAc;AAChB,cAAIA,QAAJ,EAAc;AACVhB,YAAAA,OAAO,CAACI,YAAY,CAACY,QAAD,CAAb,CAAP;AACH;;AACDP,UAAAA,MAAM,CAAC,IAAIQ,KAAJ,CAAU,6DAAV,CAAD,CAAN;AACH,SAPL;AAQH,OAdM,CAAP;AAeH;;;wBAEGd,iB,EAAmBE,K,EAAO;AAC1B,aAAO,KAAKP,QAAZ;AAEA,UAAMoB,UAAU,GAAG,CAAC,gBAAD,EAAmBf,iBAAnB,EAAsCW,IAAtC,CAA2C,GAA3C,CAAnB;;AACA,UAAIT,KAAK,KAAK,IAAV,IAAkB,UAAIA,KAAJ,EAAac,MAAb,KAAwB,CAA9C,EAAiD;AAC7C,eAAO,KAAKxB,GAAL,CAASyB,MAAT,CAAgBF,UAAhB,CAAP;AACH;;AACD,aAAO,KAAKvB,GAAL,CAAS0B,IAAT,CAAcH,UAAd,EAA0Bb,KAA1B,EAAiC;AAAEO,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AAAX,OAAjC,CAAP;AACH;;;;;;eAGUlB,c","sourcesContent":["import { isString } from '../lib/check';\nimport Api from '../api/Api';\n\n/**\n * @description\n * Handles communication with the systemSettings endpoint. Can be used to get or save systemSettings.\n *\n * @memberof module:system\n * @requires lib/check\n * @requires api/Api\n */\n// TODO: Return the values from the local cache if we have not updated it? We could\nclass SystemSettings {\n    constructor(api = Api.getApi()) {\n        this.api = api;\n    }\n\n    /**\n     * Loads all the system settings in the system and returns them as an object from the promise.\n     *\n     * @returns {Promise} Promise that resolves with the systemsettings object from the api.\n     *\n     * @example\n     * d2.system.settings.all()\n     *  .then(systemSettings => {\n     *    console.log('Analytics was last updated on: ' + systemSettings.keyLastSuccessfulResourceTablesUpdate);\n     *  });\n     */\n    all() {\n        return this.settings\n            ? Promise.resolve(this.settings)\n            : this.api.get('systemSettings')\n                .then((settings) => {\n                    this.settings = settings;\n                    return Promise.resolve(this.settings);\n                });\n    }\n\n    /**\n     * Get a single systemSetting for the given key.\n     *\n     * This will use the cached value of the key if it has been previously loaded.\n     *\n     * @param {String} systemSettingsKey The identifier of the system setting that should be retrieved.\n     * @returns {Promise} A promise that resolves with the value or will fail if the value is not available.\n     *\n     * @example\n     * d2.system.settings.get('keyLastSuccessfulResourceTablesUpdate')\n     *  .then(systemSettingsValue => {\n     *    console.log('Analytics was last updated on: ' + systemSettingsValue);\n     *  });\n     */\n    get(systemSettingsKey) {\n        if (this.settings && this.settings[systemSettingsKey]) {\n            return Promise.resolve(this.settings[systemSettingsKey]);\n        }\n\n        function processValue(value) {\n            // Attempt to parse the response as JSON. If this fails we return the value as is.\n            try {\n                return JSON.parse(value);\n            } catch (e) {\n                return value;\n            }\n        }\n\n        return new Promise((resolve, reject) => {\n            if (!isString(systemSettingsKey)) {\n                throw new TypeError('A \"key\" parameter should be specified when calling get() on systemSettings');\n            }\n\n            const options = { headers: { accept: 'text/plain' } };\n            this.api.get(\n                ['systemSettings', systemSettingsKey].join('/'), undefined, options)\n                .then((response) => {\n                    if (response) {\n                        resolve(processValue(response));\n                    }\n                    reject(new Error('The requested systemSetting has no value or does not exist.'));\n                });\n        });\n    }\n\n    set(systemSettingsKey, value) {\n        delete this.settings;\n\n        const settingUrl = ['systemSettings', systemSettingsKey].join('/');\n        if (value === null || (`${value}`).length === 0) {\n            return this.api.delete(settingUrl);\n        }\n        return this.api.post(settingUrl, value, { headers: { 'Content-Type': 'text/plain' } });\n    }\n}\n\nexport default SystemSettings;\n"],"file":"SystemSettings.js"}