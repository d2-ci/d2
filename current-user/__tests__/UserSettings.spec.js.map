{"version":3,"sources":["../../../src/current-user/__tests__/UserSettings.spec.js"],"names":["jest","mock","describe","userSettingsFixture","keyUiLocale","userSettings","beforeEach","UserSettings","afterEach","MockApi","mockReset","it","expect","toThrowErrorMatchingSnapshot","api","toBe","getApi","get","mockReturnValue","Promise","resolve","all","toBeInstanceOf","Function","assertions","then","toHaveBeenCalledTimes","calls","settings","toEqual","result","catch","error","TypeError","message","toBeCalledWith","value","mockReturnValueOnce","mydataKey","post","delete","set"],"mappings":"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","sourcesContent":["import MockApi from '../../../src/api/Api';\nimport UserSettings from '../../../src/current-user/UserSettings';\n\njest.mock('../../../src/api/Api');\n\ndescribe('CurrentUser.userSettings', () => {\n    const userSettingsFixture = { keyUiLocale: 'en' };\n    let userSettings;\n\n    beforeEach(() => {\n        userSettings = new UserSettings();\n    });\n\n    afterEach(() => {\n        MockApi.mockReset();\n    });\n\n    it('should not be allowed to be called without new', () => {\n        expect(() => UserSettings()).toThrowErrorMatchingSnapshot(); // eslint-disable-line\n    });\n\n    it('should set an instance of MockApi onto the UserSettings instance', () => {\n        expect(userSettings.api).toBe(MockApi.getApi());\n    });\n\n    describe('all', () => {\n        beforeEach(() => {\n            userSettings.api.get\n                .mockReturnValue(Promise.resolve(userSettingsFixture));\n        });\n\n        it('should be a function', () => {\n            expect(userSettings.all).toBeInstanceOf(Function);\n        });\n\n        it('should call the api to get all the userSettings', () => {\n            expect.assertions(2);\n\n            return userSettings.all().then(() => {\n                expect(userSettings.api.get).toHaveBeenCalledTimes(1);\n                expect(userSettings.api.get.mock.calls[0][0]).toBe('userSettings');\n            });\n        });\n\n        it('should resolve the promise with the settings', () => {\n            expect.assertions(1);\n\n            return userSettings.all()\n                .then((settings) => {\n                    expect(settings.keyUiLocale).toBe('en');\n                });\n        });\n\n        it('should cache the current user settings', () => {\n            expect.assertions(2);\n\n            return userSettings.all().then(() => userSettings.all())\n                .then(() => {\n                    expect(userSettings.api.get).toHaveBeenCalledTimes(1);\n                    expect(userSettings.settings).toEqual(userSettingsFixture);\n                });\n        });\n    });\n\n    describe('get', () => {\n        beforeEach(() => {\n            userSettings.api.get\n                .mockReturnValue(Promise.resolve(userSettingsFixture.keyUiLocale));\n        });\n\n        it('should be a function', () => {\n            expect(userSettings.get).toBeInstanceOf(Function);\n        });\n\n        it('should return a Promise', () => {\n            const result = userSettings.get('keyUiLocale');\n\n            expect(result).toBeInstanceOf(Promise);\n        });\n\n        it('should reject the promise with an error if no key has been specified', () => {\n            expect.assertions(2);\n\n            return userSettings.get()\n                .catch((error) => {\n                    expect(error).toBeInstanceOf(TypeError);\n                    expect(error.message)\n                        .toBe('A \"key\" parameter should be specified when calling get() on userSettings');\n                });\n        });\n\n        it('should call the api to get the value', () => {\n            userSettings.get('keyUiLocale');\n\n            expect(userSettings.api.get).toBeCalledWith('userSettings/keyUiLocale');\n        });\n\n        it('should return the value from the promise', () => {\n            expect.assertions(1);\n\n            return userSettings.get('keyUiLocale')\n                .then((value) => {\n                    expect(value).toBe('en');\n                });\n        });\n\n        it('should try to transform the response to json if possible', () => {\n            userSettings.api.get\n                .mockReturnValueOnce(Promise.resolve('{\"mydataKey\": \"myDataValue\"}'));\n\n            expect.assertions(1);\n\n            return userSettings.get('keyUiLocale')\n                .then((value) => {\n                    expect(value).toEqual({ mydataKey: 'myDataValue' });\n                });\n        });\n\n        it('should reject the promise if the value is empty', () => {\n            userSettings.api.get\n                .mockReturnValueOnce(Promise.resolve(''));\n\n            expect.assertions(1);\n\n            return userSettings.get('keyThatDefinitelyDoesNotExist')\n                .catch((error) => {\n                    expect(error.message).toBe('The requested userSetting has no value or does not exist.');\n                });\n        });\n\n        it('should use the cache', () => {\n            userSettings.api.get\n                .mockReturnValueOnce(Promise.resolve(userSettingsFixture));\n\n            expect.assertions(2);\n\n            return userSettings.all()\n                .then(() => userSettings.get('keyUiLocale'))\n                .then((value) => {\n                    expect(userSettings.api.get).toHaveBeenCalledTimes(1);\n                    expect(value).toBe(userSettingsFixture.keyUiLocale);\n                });\n        });\n\n        it('should also return a promise when serving cached values', () => {\n            userSettings.api.get.mockReturnValueOnce(Promise.resolve(userSettingsFixture));\n\n            expect.assertions(1);\n\n            return userSettings.all()\n                .then(() => {\n                    expect(userSettings.get('keyUiLocale')).toBeInstanceOf(Promise);\n                });\n        });\n    });\n\n    describe('set', () => {\n        beforeEach(() => {\n            userSettings.api.get\n                .mockReturnValue(Promise.resolve(userSettingsFixture));\n            userSettings.api.post\n                .mockReturnValueOnce(Promise.resolve());\n            userSettings.api.delete\n                .mockReturnValueOnce(Promise.resolve());\n        });\n\n        afterEach(() => {\n            userSettings = new UserSettings();\n        });\n\n        it('should POST to the API', () => userSettings.set('mySetting', 'my value')\n            .then(() => {\n                expect(userSettings.api.get).toHaveBeenCalledTimes(0);\n                expect(userSettings.api.post).toHaveBeenCalledTimes(1);\n                expect(userSettings.api.delete).toHaveBeenCalledTimes(0);\n            }));\n\n        it('should DELETE if the value is null or an empty string', () => userSettings.set('mySetting', '')\n            .then(() => {\n                expect(userSettings.api.get).toHaveBeenCalledTimes(0);\n                expect(userSettings.api.post).toHaveBeenCalledTimes(0);\n                expect(userSettings.api.delete).toHaveBeenCalledTimes(1);\n            }));\n\n        it('should clear out the cache', () => userSettings.all()\n            .then(() => userSettings.all())\n            .then(() => userSettings.set('a', 'b'))\n            .then(() => userSettings.all())\n            .then(() => userSettings.all())\n            .then(() => {\n                expect(userSettings.api.post).toHaveBeenCalledTimes(1);\n                expect(userSettings.api.get).toHaveBeenCalledTimes(2);\n            }));\n    });\n});\n"],"file":"UserSettings.spec.js"}