{"version":3,"sources":["../../../src/period/__tests__/helpers_spec.js"],"names":["describe","it","expect","Date","toBe","toThrowError","periods","endDate","startDate","name","id","beforeEach","DateGlobal","global","now","jest","spyOn","mockImplementation","dateString","afterEach","mockRestore","toHaveLength","toEqual","getDate","toDateString","lastOfMarch","lastOfJune","lastOfSept","lastOfDec"],"mappings":"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","sourcesContent":["import {\n    formatAsISODate,\n    filterFuturePeriods,\n    getLastDateOfMonth,\n    getFirstDateOfQuarter,\n    getLastDateOfQuarter,\n} from '../helpers';\n\ndescribe('Period helpers', () => {\n    describe('formatAsISODate()', () => {\n        it('should format a date as YYYY-MM-DD', () => {\n            expect(formatAsISODate(new Date(2017, 1, 1))).toBe('2017-02-01');\n        });\n\n        it('should throw when the passed date is not a Date', () => {\n            expect(() => formatAsISODate('2017-02-01')).toThrowError();\n            expect(() => formatAsISODate()).toThrowError();\n            expect(() => formatAsISODate(null)).toThrowError();\n            expect(() => formatAsISODate(1)).toThrowError();\n        });\n    });\n\n    describe('filterFuturePeriods()', () => {\n        const periods = [\n            {\n                endDate: '2015-12-31',\n                startDate: '2015-01-01',\n                name: '2015',\n                id: '2015',\n            }, {\n                endDate: '2016-12-31',\n                startDate: '2016-01-01',\n                name: '2016',\n                id: '2016',\n            }, {\n                endDate: '2017-12-31',\n                startDate: '2017-01-01',\n                name: '2017',\n                id: '2017',\n            }, {\n                endDate: '2018-12-31',\n                startDate: '2018-01-01',\n                name: '2018',\n                id: '2018',\n            }, {\n                endDate: '2018-12-31',\n                startDate: '2018-01-01',\n                name: '2018',\n                id: '2018',\n            },\n        ];\n\n        beforeEach(() => {\n            const DateGlobal = global.Date;\n            const now = new Date('Mon July 11 2017 17:09:35 GMT+0200 (CEST)');\n\n            jest.spyOn(global, 'Date')\n                // Return our own fake `now` when no dateString was passed\n                .mockImplementation(dateString => (dateString ? new DateGlobal(dateString) : now));\n        });\n\n        afterEach(() => {\n            global.Date.mockRestore();\n        });\n\n        it('should filter out the future periods', () => {\n            expect(filterFuturePeriods(periods)).toHaveLength(3);\n        });\n\n        it('should filter out the future periods', () => {\n            expect(filterFuturePeriods(periods)).toEqual([\n                {\n                    endDate: '2015-12-31',\n                    startDate: '2015-01-01',\n                    name: '2015',\n                    id: '2015',\n                }, {\n                    endDate: '2016-12-31',\n                    startDate: '2016-01-01',\n                    name: '2016',\n                    id: '2016',\n                }, {\n                    endDate: '2017-12-31',\n                    startDate: '2017-01-01',\n                    name: '2017',\n                    id: '2017',\n                },\n            ]);\n        });\n    });\n\n    describe('getLastDateOfMonth()', () => {\n        it('returns the correct date for normal and leap years', () => {\n            expect(getLastDateOfMonth(1980, 1).getDate()).toBe(29);\n            expect(getLastDateOfMonth(1981, 1).getDate()).toBe(28);\n            expect(getLastDateOfMonth(2000, 0).getDate()).toBe(31);\n        });\n    });\n\n    describe('getFirstDateOfQuarter()', () => {\n        it('returns the correct start date for each quarter', () => {\n            expect(getFirstDateOfQuarter(2017, 1).toDateString()).toBe(new Date(2017, 0, 1).toDateString());\n            expect(getFirstDateOfQuarter(2017, 2).toDateString()).toBe(new Date(2017, 3, 1).toDateString());\n            expect(getFirstDateOfQuarter(2017, 3).toDateString()).toBe(new Date(2017, 6, 1).toDateString());\n            expect(getFirstDateOfQuarter(2017, 4).toDateString()).toBe(new Date(2017, 9, 1).toDateString());\n        });\n    });\n    describe('getLastDateOfQuarter()', () => {\n        it('returns the correct end date for each quarter', () => {\n            const lastOfMarch = new Date(2017, 2, 31);\n            const lastOfJune = new Date(2017, 5, 30);\n            const lastOfSept = new Date(2017, 8, 30);\n            const lastOfDec = new Date(2017, 11, 31);\n            expect(getLastDateOfQuarter(2017, 1).toDateString()).toBe(lastOfMarch.toDateString());\n            expect(getLastDateOfQuarter(2017, 2).toDateString()).toBe(lastOfJune.toDateString());\n            expect(getLastDateOfQuarter(2017, 3).toDateString()).toBe(lastOfSept.toDateString());\n            expect(getLastDateOfQuarter(2017, 4).toDateString()).toBe(lastOfDec.toDateString());\n        });\n    });\n});\n"],"file":"helpers_spec.js"}