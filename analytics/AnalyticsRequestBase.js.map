{"version":3,"sources":["../../src/analytics/AnalyticsRequestBase.js"],"names":["AnalyticsRequestBase","endPoint","format","path","program","dimensions","filters","parameters","toLowerCase","options","sorted","encodedDimensions","map","dimension","items","Array","isArray","length","encodedItems","customEncodeURIComponent","sort","join","filter","e","encodedFilters"],"mappings":"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","sourcesContent":["import sortBy from 'lodash/sortBy';\nimport { customEncodeURIComponent } from '../lib/utils';\n\n/**\n * @private\n * @description\n * Class for constructing a request object to use for communicating with the analytics API endpoint.\n *\n * @param {!Object} options Object with analytics request options\n *\n * @requires module:lib/utils\n *\n * @memberof module:analytics\n * @abstract\n */\nclass AnalyticsRequestBase {\n    constructor({\n        endPoint = 'analytics',\n        format = 'json',\n        path,\n        program,\n        dimensions = [],\n        filters = [],\n        parameters = {},\n    } = {}) {\n        this.endPoint = endPoint;\n        this.format = format.toLowerCase();\n        this.path = path;\n        this.program = program;\n\n        this.dimensions = dimensions;\n        this.filters = filters;\n        this.parameters = { ...parameters };\n    }\n\n    /**\n     * @private\n     * @description\n     * Builds the URL to pass to the Api object.\n     * The URL includes the dimension(s) parameters.\n     * Used internally.\n     *\n     * @param {Object} options Optional configurations\n     *\n     * @returns {String} URL URL for the request with dimensions included\n     */\n    buildUrl(options) {\n        // at least 1 dimension is required\n        let dimensions = this.dimensions;\n\n        if (options && options.sorted) {\n            dimensions = sortBy(dimensions, 'dimension');\n        }\n\n        const encodedDimensions = dimensions.map(({ dimension, items }) => {\n            if (Array.isArray(items) && items.length) {\n                const encodedItems = items.map(customEncodeURIComponent);\n                if (options && options.sorted) {\n                    encodedItems.sort();\n                }\n\n                return `${dimension}:${encodedItems.join(';')}`;\n            }\n\n            return dimension;\n        });\n\n        const endPoint = [this.endPoint, this.path, this.program].filter(e => !!e).join('/');\n\n        return (\n            `${endPoint}.${this.format}?dimension=${encodedDimensions.join('&dimension=')}`\n        );\n    }\n\n    /**\n     * @private\n     * @description\n     * Builds the query object passed to the API instance.\n     * The object includes all the parameters added via with*() methods\n     * and the filters added via addDataFilter(), addPeriodFilter(), addOrgUnitFilter(), addFilter().\n     * The filters are handled by the API instance when building the final URL.\n     * Used internally.\n     *\n     * @param {Object} options Optional configurations\n     *\n     * @returns {Object} Query parameters\n     */\n    buildQuery(options) {\n        let filters = this.filters;\n\n        if (options && options.sorted) {\n            filters = sortBy(filters, 'dimension');\n        }\n\n        const encodedFilters = filters.map(({ dimension, items }) => {\n            if (Array.isArray(items) && items.length) {\n                const encodedItems = items.map(customEncodeURIComponent);\n                if (options && options.sorted) {\n                    encodedItems.sort();\n                }\n\n                return `${dimension}:${encodedItems.join(';')}`;\n            }\n\n            return dimension;\n        });\n\n        if (filters.length) {\n            this.parameters.filter = encodedFilters;\n        }\n\n        return this.parameters;\n    }\n}\n\nexport default AnalyticsRequestBase;\n"],"file":"AnalyticsRequestBase.js"}