{"version":3,"sources":["../../../src/model/__tests__/ModelValidation.spec.js"],"names":["jest","mock","Logger","getOwnedPropertyJSON","id","name","describe","skip","mockApi","modelValidation","beforeEach","MockApi","getApi","ModelValidation","MockLogger","afterEach","mockReset","it","expect","toBeInstanceOf","toThrowError","getModelValidation","toBe","modelMock","modelDefinition","fn","mockReturnValueOnce","getOwnedPropertyNames","modelValidations","dataValues","getCollectionChildrenPropertyNames","getReferenceProperties","validateAgainstSchema","Function","post","Promise","resolve","catch","message","httpStatus","httpStatusCode","status","response","responseType","then","toBeCalled","toBeCalledWith","schemaValidationResult","errorReports","mainKlass","errorKlass","errorCode","reject","validationMessages","property","toEqual","done","errorMessage","data"],"mappings":";;AAAA;;AACA;;AACA;;;;;;;;;;AAEAA,IAAI,CAACC,IAAL,CAAU,qBAAV,EAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,oCACV;AACf,iBAAO,IAAIC,MAAJ,EAAP;AACH;AAH4B;;AAAA;AAAA;AAAA;AAAA,CAAjC;AAKAF,IAAI,CAACC,IAAL,CAAU,eAAV;AACAD,IAAI,CAACC,IAAL,CAAU,iBAAV,EAA6B;AAAA,SAAO;AAChCE,IAAAA,oBADgC,kCACT;AACnB,aAAO;AAAEC,QAAAA,EAAE,EAAE,aAAN;AAAqBC,QAAAA,IAAI,EAAE;AAA3B,OAAP;AACH;AAH+B,GAAP;AAAA,CAA7B;AAMAC,QAAQ,CAACC,IAAT,CAAc,kBAAd,EAAkC,YAAM;AACpC,MAAIC,OAAJ;AACA,MAAIC,eAAJ;AAEAC,EAAAA,UAAU,CAAC,YAAM;AACbF,IAAAA,OAAO,GAAGG,aAAQC,MAAR,EAAV;AAEAH,IAAAA,eAAe,GAAG,IAAII,wBAAJ,CAAoB,IAAIC,eAAJ,CAAe,EAAf,CAApB,CAAlB;AACH,GAJS,CAAV;AAMAC,EAAAA,SAAS,CAAC,YAAM;AACZJ,iBAAQK,SAAR;AACH,GAFQ,CAAT;AAIAC,EAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAM;AAC/CC,IAAAA,MAAM,CAACT,eAAD,CAAN,CAAwBU,cAAxB,CAAuCN,wBAAvC;AACH,GAFC,CAAF;AAIAI,EAAAA,EAAE,CAAC,gDAAD,EAAmD,YAAM;AACvDC,IAAAA,MAAM,CAAC;AAAA,aAAM,+BAAN;AAAA,KAAD,CAAN,CAAgCE,YAAhC,CAA6C,mCAA7C;AACH,GAFC,CAAF;AAIAd,EAAAA,QAAQ,CAAC,oBAAD,EAAuB,YAAM;AACjCW,IAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAM;AAC/CC,MAAAA,MAAM,CAACL,yBAAgBQ,kBAAhB,EAAD,CAAN,CAA6CF,cAA7C,CAA4DN,wBAA5D;AACH,KAFC,CAAF;AAIAI,IAAAA,EAAE,CAAC,2CAAD,EAA8C,YAAM;AAClDC,MAAAA,MAAM,CAACL,yBAAgBQ,kBAAhB,EAAD,CAAN,CAA6CC,IAA7C,CAAkDT,yBAAgBQ,kBAAhB,EAAlD;AACH,KAFC,CAAF;AAGH,GARO,CAAR;AAUAf,EAAAA,QAAQ,CAAC,uBAAD,EAA0B,YAAM;AACpC,QAAIiB,SAAJ;AAEAb,IAAAA,UAAU,CAAC,YAAM;AACba,MAAAA,SAAS,GAAG;AACRC,QAAAA,eAAe,EAAE;AACbnB,UAAAA,IAAI,EAAE,aADO;AAEbF,UAAAA,oBAAoB,EAAEH,IAAI,CAACyB,EAAL,GACjBC,mBADiB,CACG;AAAEtB,YAAAA,EAAE,EAAE,aAAN;AAAqBC,YAAAA,IAAI,EAAE;AAA3B,WADH,CAFT;AAIbsB,UAAAA,qBAAqB,EAAE3B,IAAI,CAACyB,EAAL,GAClBC,mBADkB,CACE,CAAC,IAAD,EAAO,MAAP,CADF,CAJV;AAMbE,UAAAA,gBAAgB,EAAE;AACdxB,YAAAA,EAAE,EAAE,EADU;AAEdC,YAAAA,IAAI,EAAE;AAFQ;AANL,SADT;AAYRwB,QAAAA,UAAU,EAAE;AAAEzB,UAAAA,EAAE,EAAE,aAAN;AAAqBC,UAAAA,IAAI,EAAE;AAA3B,SAZJ;AAaRyB,QAAAA,kCAAkC,EAAE9B,IAAI,CAACyB,EAAL,GAAUC,mBAAV,CAA8B,EAA9B,CAb5B;AAcRK,QAAAA,sBAAsB,EAAE/B,IAAI,CAACyB,EAAL,GAAUC,mBAAV,CAA8B,EAA9B;AAdhB,OAAZ;AAgBH,KAjBS,CAAV;AAmBAT,IAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAM;AAC7BC,MAAAA,MAAM,CAACT,eAAe,CAACuB,qBAAjB,CAAN,CAA8Cb,cAA9C,CAA6Dc,QAA7D;AACH,KAFC,CAAF;AAIAhB,IAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAM;AAChCT,MAAAA,OAAO,CAAC0B,IAAR,CAAaR,mBAAb,CAAiCS,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAjC;AAEAlB,MAAAA,MAAM,CAACT,eAAe,CAACuB,qBAAhB,CAAsCT,SAAtC,CAAD,CAAN,CAAyDJ,cAAzD,CAAwEgB,OAAxE;AACH,KAJC,CAAF;AAMAlB,IAAAA,EAAE,CAAC,mFAAD,EAAsF,YAAM;AAC1FR,MAAAA,eAAe,CAACuB,qBAAhB,GACKK,KADL,CACW,UAACC,OAAD,EAAa;AAChBpB,QAAAA,MAAM,CAACoB,OAAD,CAAN,CAAgBhB,IAAhB,CAAqB,6CAArB;AACH,OAHL;AAIH,KALC,CAAF;AAOAL,IAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAM;AAC/CT,MAAAA,OAAO,CAAC0B,IAAR,CAAaR,mBAAb,CAAiCS,OAAO,CAACC,OAAR,CAAgB;AAC7CG,QAAAA,UAAU,EAAE,IADiC;AAE7CC,QAAAA,cAAc,EAAE,GAF6B;AAG7CC,QAAAA,MAAM,EAAE,IAHqC;AAI7CC,QAAAA,QAAQ,EAAE;AACNC,UAAAA,YAAY,EAAE;AADR;AAJmC,OAAhB,CAAjC;AASA,aAAOlC,eAAe,CAACuB,qBAAhB,CAAsCT,SAAtC,EACFqB,IADE,CACG,YAAM;AACR1B,QAAAA,MAAM,CAACV,OAAO,CAAC0B,IAAT,CAAN,CAAqBW,UAArB;AACH,OAHE,CAAP;AAIH,KAdC,CAAF;AAgBA5B,IAAAA,EAAE,CAAC,2DAAD,EAA8D,YAAM;AAClET,MAAAA,OAAO,CAAC0B,IAAR,CAAaR,mBAAb,CAAiCS,OAAO,CAACC,OAAR,CAAgB;AAC7CG,QAAAA,UAAU,EAAE,IADiC;AAE7CC,QAAAA,cAAc,EAAE,GAF6B;AAG7CC,QAAAA,MAAM,EAAE,IAHqC;AAI7CC,QAAAA,QAAQ,EAAE;AACNC,UAAAA,YAAY,EAAE;AADR;AAJmC,OAAhB,CAAjC;AASA,aAAOlC,eAAe,CAACuB,qBAAhB,CAAsCT,SAAtC,EACFqB,IADE,CACG,YAAM;AACR1B,QAAAA,MAAM,CAACV,OAAO,CAAC0B,IAAT,CAAN,CAAqBY,cAArB,CACI,qBADJ,EAEI;AAAE1C,UAAAA,EAAE,EAAE,aAAN;AAAqBC,UAAAA,IAAI,EAAE;AAA3B,SAFJ;AAIH,OANE,CAAP;AAOH,KAjBC,CAAF;AAmBAY,IAAAA,EAAE,CAAC,kEAAD,EAAqE,YAAM;AACzE,UAAM8B,sBAAsB,GAAG;AAC3BR,QAAAA,UAAU,EAAE,aADe;AAE3BC,QAAAA,cAAc,EAAE,GAFW;AAG3BC,QAAAA,MAAM,EAAE,OAHmB;AAI3BC,QAAAA,QAAQ,EAAE;AACNC,UAAAA,YAAY,EAAE,cADR;AAENK,UAAAA,YAAY,EAAE,CACV;AACIV,YAAAA,OAAO,EAAE,yCADb;AAEIW,YAAAA,SAAS,EAAE,uCAFf;AAGIC,YAAAA,UAAU,EAAE,6CAHhB;AAIIC,YAAAA,SAAS,EAAE;AAJf,WADU,EAOV;AACIb,YAAAA,OAAO,EAAE,4CADb;AAEIW,YAAAA,SAAS,EAAE,uCAFf;AAGIC,YAAAA,UAAU,EAAE,oDAHhB;AAIIC,YAAAA,SAAS,EAAE;AAJf,WAPU,EAaV;AACIb,YAAAA,OAAO,EAAE,mCADb;AAEIW,YAAAA,SAAS,EAAE,uCAFf;AAGIC,YAAAA,UAAU,EAAE,kBAHhB;AAIIC,YAAAA,SAAS,EAAE;AAJf,WAbU,EAmBV;AACIb,YAAAA,OAAO,EAAE,wCADb;AAEIW,YAAAA,SAAS,EAAE,uCAFf;AAGIC,YAAAA,UAAU,EAAE,kBAHhB;AAIIC,YAAAA,SAAS,EAAE;AAJf,WAnBU;AAFR;AAJiB,OAA/B;AAkCA3C,MAAAA,OAAO,CAAC0B,IAAR,CAAaR,mBAAb,CAAiCS,OAAO,CAACiB,MAAR,CAAeL,sBAAf,CAAjC;AAEA,aAAOtC,eAAe,CAACuB,qBAAhB,CAAsCT,SAAtC,EACFqB,IADE,CACG,UAACS,kBAAD,EAAwB;AAC1BnC,QAAAA,MAAM,CAACmC,kBAAD,CAAN,CAA2B/B,IAA3B,CAAgCyB,sBAAsB,CAACL,QAAvB,CAAgCM,YAAhE;AACH,OAHE,CAAP;AAIH,KAzCC,CAAF;AA2CA/B,IAAAA,EAAE,CAAC,0DAAD,EAA6D,YAAM;AACjE,UAAM8B,sBAAsB,GAAG;AAC3BR,QAAAA,UAAU,EAAE,aADe;AAE3BC,QAAAA,cAAc,EAAE,GAFW;AAG3BC,QAAAA,MAAM,EAAE,OAHmB;AAI3BC,QAAAA,QAAQ,EAAE;AACNM,UAAAA,YAAY,EAAE,CAAC;AAAEV,YAAAA,OAAO,EAAE,4BAAX;AAAyCgB,YAAAA,QAAQ,EAAE;AAAnD,WAAD;AADR;AAJiB,OAA/B;AAQA9C,MAAAA,OAAO,CAAC0B,IAAR,CAAaR,mBAAb,CAAiCS,OAAO,CAACiB,MAAR,CAAeL,sBAAf,CAAjC;AAEA,aAAOtC,eAAe,CAACuB,qBAAhB,CAAsCT,SAAtC,EACFqB,IADE,CACG,UAACS,kBAAD,EAAwB;AAC1BnC,QAAAA,MAAM,CAACmC,kBAAD,CAAN,CAA2BE,OAA3B,CAAmC,CAAC;AAAEjB,UAAAA,OAAO,EAAE,4BAAX;AAAyCgB,UAAAA,QAAQ,EAAE;AAAnD,SAAD,CAAnC;AACH,OAHE,CAAP;AAIH,KAfC,CAAF;AAiBArC,IAAAA,EAAE,CAAC,yDAAD,EAA4D,UAACuC,IAAD,EAAU;AACpEhD,MAAAA,OAAO,CAAC0B,IAAR,CAAaR,mBAAb,CAAiCS,OAAO,CAACC,OAAR,CAAgB;AAC7CG,QAAAA,UAAU,EAAE,IADiC;AAE7CC,QAAAA,cAAc,EAAE,GAF6B;AAG7CC,QAAAA,MAAM,EAAE,IAHqC;AAI7CC,QAAAA,QAAQ,EAAE;AACNC,UAAAA,YAAY,EAAE;AADR;AAJmC,OAAhB,CAAjC;AASAlC,MAAAA,eAAe,CAACuB,qBAAhB,CAAsCT,SAAtC,EACKqB,IADL,CACU,UAACS,kBAAD,EAAwB;AAC1BnC,QAAAA,MAAM,CAACmC,kBAAD,CAAN,CAA2BE,OAA3B,CAAmC,EAAnC;AACAC,QAAAA,IAAI;AACP,OAJL,EAKKnB,KALL,CAKWmB,IALX;AAMH,KAhBC,CAAF;AAkBAvC,IAAAA,EAAE,CAAC,qFAAD,EAAwF,YAAM;AAC5F,UAAM8B,sBAAsB,GAAG;AAC3BR,QAAAA,UAAU,EAAE,aADe;AAE3BC,QAAAA,cAAc,EAAE,GAFW;AAG3BC,QAAAA,MAAM,EAAE,OAHmB;AAI3BC,QAAAA,QAAQ,EAAE;AAJiB,OAA/B;AAMAlC,MAAAA,OAAO,CAAC0B,IAAR,CAAaR,mBAAb,CAAiCS,OAAO,CAACiB,MAAR,CAAeL,sBAAf,CAAjC;AAEA,aAAOtC,eAAe,CAACuB,qBAAhB,CAAsCT,SAAtC,EACFc,KADE,CACI,UAACoB,YAAD,EAAkB;AACrBvC,QAAAA,MAAM,CAACuC,YAAY,CAACnB,OAAd,CAAN,CAA6BhB,IAA7B,CAAkC,wDAAlC;AACH,OAHE,CAAP;AAIH,KAbC,CAAF;AAeAL,IAAAA,EAAE,CAAC,4EACC,mDADF,EACuD,YAAM;AAC3DT,MAAAA,OAAO,CAAC0B,IAAR,CAAaR,mBAAb,CAAiCS,OAAO,CAACC,OAAR,CAAgB;AAAEsB,QAAAA,IAAI,EAAE;AAAR,OAAhB,CAAjC;AAEA,aAAOjD,eAAe,CAACuB,qBAAhB,CAAsCT,SAAtC,EACFc,KADE,CACI,UAACoB,YAAD,EAAkB;AACrBvC,QAAAA,MAAM,CAACuC,YAAY,CAACnB,OAAd,CAAN,CAA6BhB,IAA7B,CAAkC,wDAAlC;AACH,OAHE,CAAP;AAIH,KARC,CAAF;AASH,GAhLO,CAAR;AAiLH,CAjND","sourcesContent":["import MockLogger from '../../logger/Logger';\nimport MockApi from '../../api/Api';\nimport ModelValidation from '../ModelValidation';\n\njest.mock('../../logger/Logger', () => class Logger {\n    static getLogger() {\n        return new Logger();\n    }\n});\njest.mock('../../api/Api');\njest.mock('../helpers/json', () => ({\n    getOwnedPropertyJSON() {\n        return { id: 'R4dd3wwdwdw', name: 'ANC' };\n    },\n}));\n\ndescribe.skip('ModelValidations', () => {\n    let mockApi;\n    let modelValidation;\n\n    beforeEach(() => {\n        mockApi = MockApi.getApi();\n\n        modelValidation = new ModelValidation(new MockLogger({}));\n    });\n\n    afterEach(() => {\n        MockApi.mockReset();\n    });\n\n    it('should create a ModelValidation object', () => {\n        expect(modelValidation).toBeInstanceOf(ModelValidation);\n    });\n\n    it('should not be allowed to be called without new', () => {\n        expect(() => ModelValidation()).toThrowError('Cannot call a class as a function');\n    });\n\n    describe('getModelValidation', () => {\n        it('should return a ModelValidation object', () => {\n            expect(ModelValidation.getModelValidation()).toBeInstanceOf(ModelValidation);\n        });\n\n        it('should create a singleton and return that', () => {\n            expect(ModelValidation.getModelValidation()).toBe(ModelValidation.getModelValidation());\n        });\n    });\n\n    describe('validateAgainstSchema', () => {\n        let modelMock;\n\n        beforeEach(() => {\n            modelMock = {\n                modelDefinition: {\n                    name: 'dataElement',\n                    getOwnedPropertyJSON: jest.fn()\n                        .mockReturnValueOnce({ id: 'R4dd3wwdwdw', name: 'ANC' }),\n                    getOwnedPropertyNames: jest.fn()\n                        .mockReturnValueOnce(['id', 'name']),\n                    modelValidations: {\n                        id: {},\n                        name: {},\n                    },\n                },\n                dataValues: { id: 'R4dd3wwdwdw', name: 'ANC' },\n                getCollectionChildrenPropertyNames: jest.fn().mockReturnValueOnce([]),\n                getReferenceProperties: jest.fn().mockReturnValueOnce([]),\n            };\n        });\n\n        it('should be a function', () => {\n            expect(modelValidation.validateAgainstSchema).toBeInstanceOf(Function);\n        });\n\n        it('should return a promise', () => {\n            mockApi.post.mockReturnValueOnce(Promise.resolve({}));\n\n            expect(modelValidation.validateAgainstSchema(modelMock)).toBeInstanceOf(Promise);\n        });\n\n        it('should return a rejected promise if the model.modelDefinition.name is not present', () => {\n            modelValidation.validateAgainstSchema()\n                .catch((message) => {\n                    expect(message).toBe('model.modelDefinition.name can not be found');\n                });\n        });\n\n        it('should call the post method on the Api', () => {\n            mockApi.post.mockReturnValueOnce(Promise.resolve({\n                httpStatus: 'OK',\n                httpStatusCode: 200,\n                status: 'OK',\n                response: {\n                    responseType: 'ValidationViolations',\n                },\n            }));\n\n            return modelValidation.validateAgainstSchema(modelMock)\n                .then(() => {\n                    expect(mockApi.post).toBeCalled();\n                });\n        });\n\n        it('should call the post method on the api with the modeldata', () => {\n            mockApi.post.mockReturnValueOnce(Promise.resolve({\n                httpStatus: 'OK',\n                httpStatusCode: 200,\n                status: 'OK',\n                response: {\n                    responseType: 'ValidationViolations',\n                },\n            }));\n\n            return modelValidation.validateAgainstSchema(modelMock)\n                .then(() => {\n                    expect(mockApi.post).toBeCalledWith(\n                        'schemas/dataElement',\n                        { id: 'R4dd3wwdwdw', name: 'ANC' },\n                    );\n                });\n        });\n\n        it('should return the validationViolations array from the webmessage', () => {\n            const schemaValidationResult = {\n                httpStatus: 'Bad Request',\n                httpStatusCode: 400,\n                status: 'ERROR',\n                response: {\n                    responseType: 'ErrorReports',\n                    errorReports: [\n                        {\n                            message: 'Missing required property `domainType`.',\n                            mainKlass: 'org.hisp.dhis.dataelement.DataElement',\n                            errorKlass: 'org.hisp.dhis.dataelement.DataElementDomain',\n                            errorCode: 'E4000',\n                        },\n                        {\n                            message: 'Missing required property `categoryCombo`.',\n                            mainKlass: 'org.hisp.dhis.dataelement.DataElement',\n                            errorKlass: 'org.hisp.dhis.dataelement.DataElementCategoryCombo',\n                            errorCode: 'E4000',\n                        },\n                        {\n                            message: 'Missing required property `name`.',\n                            mainKlass: 'org.hisp.dhis.dataelement.DataElement',\n                            errorKlass: 'java.lang.String',\n                            errorCode: 'E4000',\n                        },\n                        {\n                            message: 'Missing required property `shortName`.',\n                            mainKlass: 'org.hisp.dhis.dataelement.DataElement',\n                            errorKlass: 'java.lang.String',\n                            errorCode: 'E4000',\n                        },\n                    ],\n                },\n            };\n            mockApi.post.mockReturnValueOnce(Promise.reject(schemaValidationResult));\n\n            return modelValidation.validateAgainstSchema(modelMock)\n                .then((validationMessages) => {\n                    expect(validationMessages).toBe(schemaValidationResult.response.errorReports);\n                });\n        });\n\n        it('should return the errorReports array from the webmessage', () => {\n            const schemaValidationResult = {\n                httpStatus: 'Bad Request',\n                httpStatusCode: 400,\n                status: 'ERROR',\n                response: {\n                    errorReports: [{ message: 'Required property missing.', property: 'name' }],\n                },\n            };\n            mockApi.post.mockReturnValueOnce(Promise.reject(schemaValidationResult));\n\n            return modelValidation.validateAgainstSchema(modelMock)\n                .then((validationMessages) => {\n                    expect(validationMessages).toEqual([{ message: 'Required property missing.', property: 'name' }]);\n                });\n        });\n\n        it('should return an empty array when the validation passed', (done) => {\n            mockApi.post.mockReturnValueOnce(Promise.resolve({\n                httpStatus: 'OK',\n                httpStatusCode: 200,\n                status: 'OK',\n                response: {\n                    responseType: 'ValidationViolations',\n                },\n            }));\n\n            modelValidation.validateAgainstSchema(modelMock)\n                .then((validationMessages) => {\n                    expect(validationMessages).toEqual([]);\n                    done();\n                })\n                .catch(done);\n        });\n\n        it('should throw an error when the server does not return the correct WebMessage format', () => {\n            const schemaValidationResult = {\n                httpStatus: 'Bad Request',\n                httpStatusCode: 400,\n                status: 'ERROR',\n                response: {},\n            };\n            mockApi.post.mockReturnValueOnce(Promise.reject(schemaValidationResult));\n\n            return modelValidation.validateAgainstSchema(modelMock)\n                .catch((errorMessage) => {\n                    expect(errorMessage.message).toBe('Response was not a WebMessage with the expected format');\n                });\n        });\n\n        it('should reject the promise if the server gives a successful status code ' +\n            'but the web message status is not the `OK` string', () => {\n            mockApi.post.mockReturnValueOnce(Promise.resolve({ data: 'someData' }));\n\n            return modelValidation.validateAgainstSchema(modelMock)\n                .catch((errorMessage) => {\n                    expect(errorMessage.message).toBe('Response was not a WebMessage with the expected format');\n                });\n        });\n    });\n});\n"],"file":"ModelValidation.spec.js"}