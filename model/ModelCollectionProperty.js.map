{"version":3,"sources":["../../src/model/ModelCollectionProperty.js"],"names":["ModelCollectionProperty","parentModel","modelDefinition","propName","values","api","undefined","dirty","added","Set","removed","hasUnloadedData","value","valuesContainerMap","has","id","delete","add","updateDirty","throwIfContainsOtherThanModelObjects","throwIfContainsModelWithoutUid","size","includeValues","toArray","filter","model","isDirty","length","Promise","resolve","url","href","plural","join","data","additions","Array","from","map","deletions","post","then","resetDirtyState","catch","reject","err","options","forceReload","apiEndpoint","requestOptions","Object","assign","paging","fields","get","isArray","clear","forEach","set","create","getApi"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;AAEA;;;;;;;IAOMA,uB;;;AACF;;;;;;;;;;;;;;;;;AAiBA,qCAAYC,WAAZ,EAAyBC,eAAzB,EAA0CC,QAA1C,EAAoDC,MAApD,EAA4DC,GAA5D,EAAiE;AAAA;;AAG7D;AAH6D,sJACvDH,eADuD,EACtCE,MADsC,EAC9BE,SAD8B;;AAI7D,cAAKH,QAAL,GAAgBA,QAAhB;;AAEA;AACA,cAAKI,KAAL,GAAa,KAAb;;AAEA;AACA,cAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACA,cAAKC,OAAL,GAAe,IAAID,GAAJ,EAAf;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAKE,eAAL,GAAwBP,WAAW,IAAZ,IAAsBA,WAAWE,SAAxD;;AAEA,cAAKD,GAAL,GAAWA,GAAX;;AAEA;AACA,cAAKJ,WAAL,GAAmBA,WAAnB;AAvB6D;AAwBhE;;AAED;;;;;;;;;;;;4BAQIW,K,EAAO;AACP,gBAAI,KAAKC,kBAAL,CAAwBC,GAAxB,CAA4BF,MAAMG,EAAlC,CAAJ,EAA2C;AACvC,uBAAO,IAAP;AACH;;AAED,kJAAUH,KAAV;;AAEA,gBAAI,KAAKF,OAAL,CAAaI,GAAb,CAAiBF,MAAMG,EAAvB,CAAJ,EAAgC;AAC5B,qBAAKL,OAAL,CAAaM,MAAb,CAAoBJ,MAAMG,EAA1B;AACH,aAFD,MAEO;AACH,qBAAKP,KAAL,CAAWS,GAAX,CAAeL,MAAMG,EAArB;AACH;;AAED,iBAAKG,WAAL;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;+BAQON,K,EAAO;AACV,sCAAgBO,oCAAhB,CAAqD,CAACP,KAAD,CAArD;AACA,sCAAgBQ,8BAAhB,CAA+C,CAACR,KAAD,CAA/C;;AAEA,gBAAI,KAAKI,MAAL,CAAYJ,MAAMG,EAAlB,CAAJ,EAA2B;AACvB,oBAAI,KAAKP,KAAL,CAAWM,GAAX,CAAeF,MAAMG,EAArB,CAAJ,EAA8B;AAC1B,yBAAKP,KAAL,CAAWQ,MAAX,CAAkBJ,MAAMG,EAAxB;AACH,iBAFD,MAEO;AACH,yBAAKL,OAAL,CAAaO,GAAb,CAAiBL,MAAMG,EAAvB;AACH;AACJ;;AAED,iBAAKG,WAAL;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;sCAKc;AACV,iBAAKX,KAAL,GAAa,KAAKC,KAAL,CAAWa,IAAX,GAAkB,CAAlB,IAAuB,KAAKX,OAAL,CAAaW,IAAb,GAAoB,CAAxD;AACA,mBAAO,KAAKd,KAAZ;AACH;;AAED;;;;;;0CAGkB;AACd,iBAAKA,KAAL,GAAa,KAAb;AACA,iBAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACA,iBAAKC,OAAL,GAAe,IAAID,GAAJ,EAAf;AACH;;AAED;;;;;;;;;kCAM8B;AAAA,gBAAtBa,aAAsB,uEAAN,IAAM;;AAC1B,gBAAIA,aAAJ,EAAmB;AACf,uBAAO,KAAKf,KAAL,IAAc,KAAKgB,OAAL,GAChBC,MADgB,CACT;AAAA,2BAASC,SAAUA,MAAMC,OAAN,OAAoB,IAAvC;AAAA,iBADS,EACqCC,MADrC,GAC8C,CADnE;AAEH;AACD,mBAAO,KAAKpB,KAAZ;AACH;;AAED;;;;;;;;;;+BAOO;AAAA;;AACH;AACA,gBAAI,CAAC,KAAKmB,OAAL,EAAL,EAAqB;AACjB,uBAAOE,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACH;;AAED,gBAAMC,MAAM,CAAC,KAAK7B,WAAL,CAAiB8B,IAAlB,EAAwB,KAAK7B,eAAL,CAAqB8B,MAA7C,EAAqDC,IAArD,CAA0D,GAA1D,CAAZ;AACA,gBAAMC,OAAO;AACTC,2BAAWC,MAAMC,IAAN,CAAW,KAAK7B,KAAhB,EAAuB8B,GAAvB,CAA2B;AAAA,2BAAO,EAAEvB,MAAF,EAAP;AAAA,iBAA3B,CADF;AAETwB,2BAAWH,MAAMC,IAAN,CAAW,KAAK3B,OAAhB,EAAyB4B,GAAzB,CAA6B;AAAA,2BAAO,EAAEvB,MAAF,EAAP;AAAA,iBAA7B;AAFF,aAAb;;AAKA,mBAAO,KAAKV,GAAL,CAASmC,IAAT,CAAcV,GAAd,EAAmBI,IAAnB,EACFO,IADE,CACG,YAAM;AACR,uBAAKC,eAAL;AACA,uBAAOd,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACH,aAJE,EAKFc,KALE,CAKI;AAAA,uBAAOf,QAAQgB,MAAR,CAAe,6BAAf,EAA8CC,GAA9C,CAAP;AAAA,aALJ,CAAP;AAMH;;;6BAEIC,O,EAA8B;AAAA;;AAAA,gBAArBC,WAAqB,uEAAP,KAAO;;AAC/B,gBAAI,CAAC,KAAKpC,eAAN,IAAyB,CAACoC,WAA9B,EAA2C;AACvC,uBAAOnB,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACH;;AAED,gBAAMC,MAAM,CAAC,KAAK7B,WAAL,CAAiBC,eAAjB,CAAiC8C,WAAlC,EAA+C,KAAK/C,WAAL,CAAiBc,EAAhE,EAAoEkB,IAApE,CAAyE,GAAzE,CAAZ;AACA,gBAAMgB,iBAAiBC,OAAOC,MAAP,CAAc;AACjCC,wBAAQ;AADyB,aAAd,EAEpBN,OAFoB,EAEX,EAAEO,QAAW,KAAKlD,QAAhB,UAA6B2C,WAAWA,QAAQO,MAApB,IAA+B,MAA3D,OAAF,EAFW,CAAvB;;AAIA,mBAAO,KAAKhD,GAAL,CAASiD,GAAT,CAAaxB,GAAb,EAAkBmB,cAAlB,EACFR,IADE,CACG;AAAA,uBAAQP,KAAK,OAAK/B,QAAV,CAAR;AAAA,aADH,EAEFsC,IAFE,CAEG,UAACrC,MAAD,EAAY;AACd,oBAAIgC,MAAMmB,OAAN,CAAcnD,MAAd,CAAJ,EAA2B;AACvB,2BAAKS,kBAAL,CAAwB2C,KAAxB;AACApD,2BAAOqD,OAAP,CAAe;AAAA,+BAAS,OAAK5C,kBAAL,CAAwB6C,GAAxB,CAA4B9C,MAAMG,EAAlC,EAAsC,OAAKb,eAAL,CAAqByD,MAArB,CAA4B/C,KAA5B,CAAtC,CAAT;AAAA,qBAAf;AACH;AACD,uBAAKD,eAAL,GAAuB,KAAvB;AACA,uBAAOiB,QAAQC,OAAR,QAAP;AACH,aATE,CAAP;AAUH;;AAED;;;;;;;;;;;+BAQc5B,W,EAAaC,e,EAAiBC,Q,EAAUC,M,EAAQ;AAC1D,mBAAO,IAAIJ,uBAAJ,CAA4BC,WAA5B,EAAyCC,eAAzC,EAA0DC,QAA1D,EAAoEC,MAApE,EAA4E,cAAIwD,MAAJ,EAA5E,CAAP;AACH;;;;;;kBAIU5D,uB","file":"ModelCollectionProperty.js","sourcesContent":["import Api from '../api/Api';\nimport ModelCollection from './ModelCollection';\n\n/**\n * A ModelCollectionProperty instance is a ModelCollection that is a property of\n * a model instance. ModelCollectionProperties can be operated on independently of\n * the Model that owns them.\n *\n * @memberof module:model\n */\nclass ModelCollectionProperty extends ModelCollection {\n    /**\n     * @constructor\n     *\n     * @param {Model} parentModel The `Model` of the parent of this `ModelCollectionProperty`\n     * @param {ModelDefinition} modelDefinition The `ModelDefinition` that this `ModelCollection` property is for\n     * @param {String} propName The name of this property on the parent model\n     * @param {Model[]|boolean} values Initial values that should be added to the collection property\n     * @param {Api} api The class to use for API calls\n     *\n     * @description\n     *\n     * Creates a new `ModelCollectionProperty` object. This is a subclass of `ModelCollection`, which adds logic\n     * for adding and removing elements to the collection and saving the changes to the API.\n     *\n     * If the value is `true` or `undefined` is specified instead of an array of data values, this indicates that the\n     * collection contains (or may contain) data that has not yet been loaded from the API.\n     */\n    constructor(parentModel, modelDefinition, propName, values, api) {\n        super(modelDefinition, values, undefined);\n\n        // The name of this property on the parent object - necessary for loading values lazily\n        this.propName = propName;\n\n        // Dirty bit - true if any models have been added to or removed from the collection\n        this.dirty = false;\n\n        // Keep track of added and removed elements\n        this.added = new Set();\n        this.removed = new Set();\n\n        // Using field transformers, it's possible to query the API for the presence of data without actually fetching\n        // the data. For instance this is used to determine if an organization unit has any children without actually\n        // loading the children. If yes, it will be displayed as an expandable branch within the tree.\n        // For more information, see the documentation about field transformers, specifically the isNotEmpty operator:\n        // https://docs.dhis2.org/master/en/developer/html/dhis2_developer_manual_full.html#webapi_field_transformers\n        this.hasUnloadedData = (values === true) || (values === undefined);\n\n        this.api = api;\n\n        // Store the parent model of this collection so we can construct the URI for API calls\n        this.parentModel = parentModel;\n    }\n\n    /**\n     * @param {Model} value Model instance to add to the collection.\n     * @returns {ModelCollectionProperty} Returns itself for chaining purposes.\n     *\n     * @description\n     * Calls the `add` method on the parent `ModelCollection` class, and then performs checks to keep track of\n     * what, if any, changes that have been made to the collection.\n     */\n    add(value) {\n        if (this.valuesContainerMap.has(value.id)) {\n            return this;\n        }\n\n        super.add(value);\n\n        if (this.removed.has(value.id)) {\n            this.removed.delete(value.id);\n        } else {\n            this.added.add(value.id);\n        }\n\n        this.updateDirty();\n        return this;\n    }\n\n    /**\n     * If the collection contains an object with the same id as the `value` parameter, that object is removed\n     * from the collection. Checks are then performed to keep track of what, if any, changes that have been\n     * made to the collection.\n     *\n     * @param {Model} value Model instance to remove from the collection.\n     * @returns {ModelCollectionProperty} Returns itself for chaining purposes.\n     */\n    remove(value) {\n        ModelCollection.throwIfContainsOtherThanModelObjects([value]);\n        ModelCollection.throwIfContainsModelWithoutUid([value]);\n\n        if (this.delete(value.id)) {\n            if (this.added.has(value.id)) {\n                this.added.delete(value.id);\n            } else {\n                this.removed.add(value.id);\n            }\n        }\n\n        this.updateDirty();\n        return this;\n    }\n\n    /**\n     * Checks whether any changes have been made to the collection, and updates the dirty flag accordingly.\n     *\n     * @returns {boolean} True if the collection has changed, false otherwise.\n     */\n    updateDirty() {\n        this.dirty = this.added.size > 0 || this.removed.size > 0;\n        return this.dirty;\n    }\n\n    /**\n     * Sets dirty=false and resets the added and removed sets used for dirty state tracking.\n     */\n    resetDirtyState() {\n        this.dirty = false;\n        this.added = new Set();\n        this.removed = new Set();\n    }\n\n    /**\n     * Checks if the collection property has been modified.\n     * @param {boolean} [includeValues=true] If true, also checks if any models in the collection\n     * has been edited by checking the dirty flag on each model.\n     * @returns {boolean} true if any elements have been added to or removed from the collection\n     */\n    isDirty(includeValues = true) {\n        if (includeValues) {\n            return this.dirty || this.toArray()\n                .filter(model => model && (model.isDirty() === true)).length > 0;\n        }\n        return this.dirty;\n    }\n\n    /**\n     * If any changes have been made to the collection, these changes will be submitted to the API. The returned\n     * promise will resolve successfully when the changes have been saved to the API, and will be rejected if\n     * either the changes weren't saved or if there were no changes to save.\n     *\n     * @returns {Promise} A `Promise`\n     */\n    save() {\n        // Calling save when there's nothing to be saved is a no-op (not an error)\n        if (!this.isDirty()) {\n            return Promise.resolve({});\n        }\n\n        const url = [this.parentModel.href, this.modelDefinition.plural].join('/');\n        const data = {\n            additions: Array.from(this.added).map(id => ({ id })),\n            deletions: Array.from(this.removed).map(id => ({ id })),\n        };\n\n        return this.api.post(url, data)\n            .then(() => {\n                this.resetDirtyState();\n                return Promise.resolve({});\n            })\n            .catch(err => Promise.reject('Failed to alter collection:', err));\n    }\n\n    load(options, forceReload = false) {\n        if (!this.hasUnloadedData && !forceReload) {\n            return Promise.resolve(this);\n        }\n\n        const url = [this.parentModel.modelDefinition.apiEndpoint, this.parentModel.id].join('/');\n        const requestOptions = Object.assign({\n            paging: false,\n        }, options, { fields: `${this.propName}[${(options && options.fields) || ':all'}]` });\n\n        return this.api.get(url, requestOptions)\n            .then(data => data[this.propName])\n            .then((values) => {\n                if (Array.isArray(values)) {\n                    this.valuesContainerMap.clear();\n                    values.forEach(value => this.valuesContainerMap.set(value.id, this.modelDefinition.create(value)));\n                }\n                this.hasUnloadedData = false;\n                return Promise.resolve(this);\n            });\n    }\n\n    /**\n     * See `ModelCollectionProperty.constructor`.\n     *\n     * @param {Model} parentModel\n     * @param {ModelDefinition} modelDefinition\n     * @param {Model[]} values\n     * @returns {ModelCollectionProperty}\n     */\n    static create(parentModel, modelDefinition, propName, values) {\n        return new ModelCollectionProperty(parentModel, modelDefinition, propName, values, Api.getApi());\n    }\n}\n\n\nexport default ModelCollectionProperty;\n"]}