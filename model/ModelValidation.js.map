{"version":3,"sources":["../../src/model/ModelValidation.js"],"names":["extractValidationViolations","webmessage","response","errorReports","Error","ModelValidation","providedLogger","logger","warn","model","modelDefinition","name","Promise","reject","url","Api","getApi","post","then","webMessage","status","catch","modelValidation","Logger","getLogger","console"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,SAASA,2BAAT,CAAqCC,UAArC,EAAiD;AAC7C,MAAIA,UAAU,CAACC,QAAX,IAAuBD,UAAU,CAACC,QAAX,CAAoBC,YAA/C,EAA6D;AACzD,WAAOF,UAAU,CAACC,QAAX,CAAoBC,YAA3B;AACH;;AAED,QAAM,IAAIC,KAAJ,CAAU,wDAAV,CAAN;AACH;AAED;;;;;;;IAKMC,e;;;AACF,2BAAYC,cAAZ,EAA4B;AAAA;;AACxB,0BAAUA,cAAV,EAA0B,QAA1B,EAAoC,iBAApC;AACA,SAAKC,MAAL,GAAcD,cAAd;AACH;AAED;;;;;;;;;+BAKW;AACP,WAAKC,MAAL,CAAYC,IAAZ,CAAiB,4CAAjB;AACA,YAAM,IAAIJ,KAAJ,CAAU,4CAAV,CAAN;AACH;AAED;;;;;;;;;;;0CAQsBK,K,EAAO;AAAE;AAC3B,UAAI,EAAEA,KAAK,IAAIA,KAAK,CAACC,eAAf,IAAkCD,KAAK,CAACC,eAAN,CAAsBC,IAA1D,CAAJ,EAAqE;AACjE,eAAOC,OAAO,CAACC,MAAR,CAAe,6CAAf,CAAP;AACH;;AAED,UAAMC,GAAG,qBAAcL,KAAK,CAACC,eAAN,CAAsBC,IAApC,CAAT,CALyB,CAOzB;;AACA,aAAOI,aAAIC,MAAJ,GAAaC,IAAb,CAAkBH,GAAlB,EAAuB,gCAAqBL,KAArB,CAAvB,EACFS,IADE,CACG,UAACC,UAAD,EAAgB;AAClB,YAAIA,UAAU,CAACC,MAAX,KAAsB,IAA1B,EAAgC;AAC5B,iBAAO,EAAP;AACH;;AACD,eAAOR,OAAO,CAACC,MAAR,CAAeM,UAAf,CAAP;AACH,OANE,EAOFE,KAPE,CAOIrB,2BAPJ,CAAP;AAQH;AAED;;;;;;;;;yCAM4B;AACxB,UAAI,KAAKsB,eAAT,EAA0B;AACtB,eAAO,KAAKA,eAAZ;AACH;;AACD,aAAQ,KAAKA,eAAL,GAAuB,IAAIjB,eAAJ,CAAoBkB,gBAAOC,SAAP,CAAiBC,OAAjB,CAApB,CAA/B;AACH;;;;;;eAGUpB,e","sourcesContent":["import { checkType } from '../lib/check';\nimport Logger from '../logger/Logger';\nimport Api from '../api/Api';\nimport { getOwnedPropertyJSON } from './helpers/json';\n\nfunction extractValidationViolations(webmessage) {\n    if (webmessage.response && webmessage.response.errorReports) {\n        return webmessage.response.errorReports;\n    }\n\n    throw new Error('Response was not a WebMessage with the expected format');\n}\n\n/**\n * Handles validation of Model objects based on their modelDefinition.\n *\n * @memberof module:model\n */\nclass ModelValidation {\n    constructor(providedLogger) {\n        checkType(providedLogger, 'object', 'logger (Logger)');\n        this.logger = providedLogger;\n    }\n\n    /**\n     * @deprecated Client side model validation is deprecated in favour of server side validation only.\n     *\n     * @returns {{status: boolean, messages: Array}} Returns {status: true, messages: []}\n     */\n    validate() {\n        this.logger.warn('Client side model validation is deprecated');\n        throw new Error('Client side model validation is deprecated');\n    }\n\n    /**\n     * Sends a POST request against the `api/schemas` endpoint to check if the model is valid.\n     *\n     * @param {Model} model The model that should be validated.\n     * @returns {Array} Returns an array with validation messages if there are any.\n     *\n     * @note {warn} Currently only checks\n     */\n    validateAgainstSchema(model) { // eslint-disable-line class-methods-use-this\n        if (!(model && model.modelDefinition && model.modelDefinition.name)) {\n            return Promise.reject('model.modelDefinition.name can not be found');\n        }\n\n        const url = `schemas/${model.modelDefinition.name}`;\n\n        // TODO: The function getOwnedPropertyJSON should probably not be exposed, perhaps we could have a getJSONForModel(ownedPropertiesOnly=true) method.\n        return Api.getApi().post(url, getOwnedPropertyJSON(model))\n            .then((webMessage) => {\n                if (webMessage.status === 'OK') {\n                    return [];\n                }\n                return Promise.reject(webMessage);\n            })\n            .catch(extractValidationViolations);\n    }\n\n    /**\n     * Returns the `ModelValidation` singleton. Creates a new one if it does not yet exist.\n     * Grabs a logger instance by calling `Logger.getLogger`\n     *\n     * @returns {ModelValidation} New or memoized instance of `ModelInstance`\n     */\n    static getModelValidation() {\n        if (this.modelValidation) {\n            return this.modelValidation;\n        }\n        return (this.modelValidation = new ModelValidation(Logger.getLogger(console)));\n    }\n}\n\nexport default ModelValidation;\n"],"file":"ModelValidation.js"}