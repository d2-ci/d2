{"version":3,"sources":["../src/config.js"],"names":["Config","args","configObjects","filter","arg","every","configObject","Error","Object","assign","preinitConfig","api","headers","setDefaultHeaders","baseUrl","setBaseUrl","config","d2","Api","getApi","model","ModelDefinition","prototype","models","ModelDefinitions","getModelDefinitions","unauthorizedCb","setUnauthorizedCallback","i18n","sources","Array","from","forEach","addSource","source","strings","addStrings"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;IAEqBA,M;;;;;;;iCACM;AAAA,8CAANC,IAAM;AAANA,oBAAM;AAAA;;AACnB,gBAAMC,gBAAgBD,KACjBE,MADiB,CACV;AAAA,uBAAOC,GAAP;AAAA,aADU,CAAtB;;AAGA,gBAAI,CAACF,cAAcG,KAAd,CAAoB;AAAA,uBAAgB,mBAAOC,YAAP,EAAqB,QAArB,CAAhB;AAAA,aAApB,CAAL,EAA0E;AACtE,sBAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACH;;AAED,mBAAOC,OAAOC,MAAP,gBAAc,EAAd,kCAAoCR,IAApC,EAAP;AACH;;;6CAE2BS,a,EAAeC,G,EAAK;AAC5C,gBAAID,cAAcE,OAAlB,EAA2B;AACvBD,oBAAIE,iBAAJ,CAAsBH,cAAcE,OAApC;AACH;;AAED,gBAAIF,cAAcI,OAAlB,EAA2B;AACvBH,oBAAII,UAAJ,CAAeL,cAAcI,OAA7B;AACH;AACJ;;;2CAEyBE,M,EAAQC,E,EAAI;AAClC,gBAAMN,MAAMM,GAAGC,GAAH,CAAOC,MAAP,EAAZ;AACAF,eAAGG,KAAH,CAASC,eAAT,CAAyBC,SAAzB,CAAmCX,GAAnC,GAAyCA,GAAzC,CAFkC,CAEY;AAC9CM,eAAGM,MAAH,GAAYN,GAAGG,KAAH,CAASI,gBAAT,CAA0BC,mBAA1B,EAAZ,CAHkC,CAG2B;;AAE7D,gBAAI,qBAAST,OAAOF,OAAhB,CAAJ,EAA8B;AAC1BH,oBAAII,UAAJ,CAAeC,OAAOF,OAAtB;AACH,aAFD,MAEO;AACH;AACAH,oBAAII,UAAJ,CAAe,MAAf;AACH;;AAED,gBAAIC,OAAOJ,OAAX,EAAoB;AAChBD,oBAAIE,iBAAJ,CAAsBG,OAAOJ,OAA7B;AACH;;AAED,gBAAII,OAAOU,cAAX,EAA2B;AACvBf,oBAAIgB,uBAAJ,CAA4BX,OAAOU,cAAnC;AACH;;AAED,gBAAIV,OAAOY,IAAP,IAAeZ,OAAOY,IAAP,CAAYC,OAA/B,EAAwC;AACpCC,sBAAMC,IAAN,CAAWf,OAAOY,IAAP,CAAYC,OAAvB,EACKG,OADL,CACa;AAAA,2BAAUf,GAAGW,IAAH,CAAQK,SAAR,CAAkBC,MAAlB,CAAV;AAAA,iBADb;AAEH;;AAED,gBAAIlB,OAAOY,IAAP,IAAeZ,OAAOY,IAAP,CAAYO,OAA/B,EAAwC;AACpClB,mBAAGW,IAAH,CAAQQ,UAAR,CAAmBN,MAAMC,IAAN,CAAWf,OAAOY,IAAP,CAAYO,OAAvB,CAAnB;AACH;AACJ;;;;;;kBAlDgBnC,M","file":"config.js","sourcesContent":["import defaultConfig from './defaultConfig';\nimport { isType, isString } from './lib/check';\n\nexport default class Config {\n    static create(...args) {\n        const configObjects = args\n            .filter(arg => arg);\n\n        if (!configObjects.every(configObject => isType(configObject, 'object'))) {\n            throw new Error('Expected Config parameter to have type object');\n        }\n\n        return Object.assign({}, defaultConfig, ...args);\n    }\n\n    static processPreInitConfig(preinitConfig, api) {\n        if (preinitConfig.headers) {\n            api.setDefaultHeaders(preinitConfig.headers);\n        }\n\n        if (preinitConfig.baseUrl) {\n            api.setBaseUrl(preinitConfig.baseUrl);\n        }\n    }\n\n    static processConfigForD2(config, d2) {\n        const api = d2.Api.getApi();\n        d2.model.ModelDefinition.prototype.api = api; // eslint-disable-line no-param-reassign\n        d2.models = d2.model.ModelDefinitions.getModelDefinitions(); // eslint-disable-line no-param-reassign\n\n        if (isString(config.baseUrl)) {\n            api.setBaseUrl(config.baseUrl);\n        } else {\n            // default to the current version of the `/api`\n            api.setBaseUrl('/api');\n        }\n\n        if (config.headers) {\n            api.setDefaultHeaders(config.headers);\n        }\n\n        if (config.unauthorizedCb) {\n            api.setUnauthorizedCallback(config.unauthorizedCb);\n        }\n\n        if (config.i18n && config.i18n.sources) {\n            Array.from(config.i18n.sources)\n                .forEach(source => d2.i18n.addSource(source));\n        }\n\n        if (config.i18n && config.i18n.strings) {\n            d2.i18n.addStrings(Array.from(config.i18n.strings));\n        }\n    }\n}\n"]}