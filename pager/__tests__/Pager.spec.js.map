{"version":3,"sources":["../../../src/pager/__tests__/Pager.spec.js"],"names":["describe","pagerFixtureOne","pageFixtureTwo","it","expect","toThrowErrorMatchingSnapshot","pager","beforeEach","Pager","page","toBe","pageCount","total","toBeUndefined","nextPage","prevPage","modelDefinition","ModelDefinition","prototype","list","jest","fn","mockReturnValue","Promise","resolve","toBeInstanceOf","hasNextPage","Function","hasPreviousPage","getNextPage","toBeCalled","catch","not","toHaveBeenCalled","message","toBeCalledWith","getPreviousPage","goToPage","toThrowError","done","then","query","fields"],"mappings":"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","sourcesContent":["import Pager from '../Pager';\n\ndescribe('Pager', () => {\n    let pagerFixtureOne;\n    let pageFixtureTwo;\n\n    it('should not be allowed to be called without new', () => {\n        expect(() => Pager()).toThrowErrorMatchingSnapshot();\n    });\n\n    describe('instance without data', () => {\n        let pager;\n\n        beforeEach(() => {\n            pager = new Pager();\n        });\n\n        it('should set the page to first', () => {\n            expect(pager.page).toBe(1);\n        });\n\n        it('should set the total page count to 1', () => {\n            expect(pager.pageCount).toBe(1);\n        });\n\n        it('should set the total item count to undefined', () => {\n            expect(pager.total).toBeUndefined();\n        });\n\n        it('should not set the nextPage', () => {\n            expect(pager.nextPage).toBeUndefined();\n        });\n\n        it('should not set the prevPage', () => {\n            expect(pager.prevPage).toBeUndefined();\n        });\n    });\n\n    describe('instance with data', () => {\n        let pager;\n        let modelDefinition;\n\n        beforeEach(() => {\n            pagerFixtureOne = {\n                page: 1,\n                pageCount: 37,\n                total: 1844,\n                nextPage: 'http://localhost:8080/dhis/api/dataElements?page=2',\n            };\n            pageFixtureTwo = {\n                page: 3,\n                pageCount: 37,\n                total: 1844,\n                nextPage: 'http://localhost:8080/dhis/api/dataElements?page=4',\n                prevPage: 'http://localhost:8080/dhis/api/dataElements?page=2',\n            };\n\n            class ModelDefinition {}\n            ModelDefinition.prototype.list = jest.fn().mockReturnValue(Promise.resolve());\n            modelDefinition = new ModelDefinition();\n\n            pager = new Pager(pagerFixtureOne, modelDefinition);\n        });\n\n        it('should be an instance of Pager', () => {\n            expect(pager).toBeInstanceOf(Pager);\n        });\n\n        it('should have a total item count', () => {\n            expect(pager.total).toBe(1844);\n        });\n\n        it('should have the current page number', () => {\n            expect(pager.page).toBe(1);\n        });\n\n        it('should have a pageCount', () => {\n            expect(pager.pageCount).toBe(37);\n        });\n\n        it('should have a nextPage url', () => {\n            expect(pager.nextPage).toBe('http://localhost:8080/dhis/api/dataElements?page=2');\n        });\n\n        it('should have previous page', () => {\n            pager = new Pager(pageFixtureTwo);\n\n            expect(pager.prevPage).toBe('http://localhost:8080/dhis/api/dataElements?page=2');\n        });\n\n        describe('hasNextPage', () => {\n            it('should be a function', () => {\n                expect(pager.hasNextPage).toBeInstanceOf(Function);\n            });\n\n            it('should return true if there is a next page', () => {\n                expect(pager.hasNextPage()).toBe(true);\n            });\n\n            it('should return false if there is no next page', () => {\n                delete pager.nextPage;\n\n                expect(pager.hasNextPage()).toBe(false);\n            });\n        });\n\n        describe('hasPreviousPage', () => {\n            it('should be a function', () => {\n                expect(pager.hasPreviousPage).toBeInstanceOf(Function);\n            });\n\n            it('should return true if there is a previous page', () => {\n                pager.prevPage = 'some link to a page';\n\n                expect(pager.hasPreviousPage()).toBe(true);\n            });\n\n            it('should return false if there is no previous page', () => {\n                expect(pager.hasPreviousPage()).toBe(false);\n            });\n        });\n\n        describe('nextPage', () => {\n            it('should be a method on the collection', () => {\n                expect(pager.getNextPage).toBeInstanceOf(Function);\n            });\n\n            it('should return a promise', () => {\n                expect(pager.getNextPage()).toBeInstanceOf(Promise);\n            });\n\n            it('should call the model definition for a new list', () => {\n                pager.getNextPage();\n\n                expect(modelDefinition.list).toBeCalled();\n            });\n\n            it('should only ask for a new list if the pager has a nextPage property', () => {\n                delete pager.nextPage;\n\n                return pager.getNextPage()\n                    .catch(() => {\n                        expect(modelDefinition.list).not.toHaveBeenCalled();\n                    });\n            });\n\n            it('should return a rejected promise if there are no more new pages', () => {\n                delete pager.nextPage;\n\n                return pager.getNextPage()\n                    .catch((message) => {\n                        expect(message).toBe('There is no next page for this collection');\n                    });\n            });\n\n            it('should call next page with the current page number + 1', () => {\n                pager.getNextPage();\n\n                expect(modelDefinition.list).toBeCalledWith({ page: 2 });\n            });\n        });\n\n        describe('previousPage', () => {\n            it('should be a method on the collection', () => {\n                expect(pager.getPreviousPage).toBeInstanceOf(Function);\n            });\n\n            it('should return a promise', () => {\n                expect(pager.getPreviousPage()).toBeInstanceOf(Promise);\n            });\n\n            it('should ask for the previous page if the prevPage property is set', () => {\n                pager.page = 2;\n                pager.prevPage = 'http://url.to.the.next.page';\n\n                pager.getPreviousPage();\n\n                expect(modelDefinition.list).toBeCalled();\n            });\n\n            it('should not ask for a new list if there is no previous page', () => {\n                expect(modelDefinition.list).not.toHaveBeenCalled();\n            });\n\n            it('should return a rejected promise if there are no more previous pages', () => pager.getPreviousPage()\n                .catch((message) => {\n                    expect(message).toBe('There is no previous page for this collection');\n                }));\n\n            it('should call the list method with the current page number - 1', () => {\n                pager.page = 3;\n                pager.prevPage = 'http://url.to.the.next.page';\n\n                pager.getPreviousPage();\n\n                expect(modelDefinition.list).toBeCalledWith({ page: 2 });\n            });\n        });\n\n        describe('goToPage', () => {\n            it('should call the list method with the passed page number', () => {\n                pager.goToPage(2);\n\n                expect(modelDefinition.list).toBeCalledWith({ page: 2 });\n            });\n\n            it('should throw an error when the page is less than 1', () => {\n                expect(() => pager.goToPage(0)).toThrowError('PageNr can not be less than 1');\n                expect(() => pager.goToPage(-1)).toThrowError('PageNr can not be less than 1');\n            });\n\n            it('should throw an error when the page is larger than the pagecount', () => {\n                expect(() => pager.goToPage(38))\n                    .toThrowError('PageNr can not be larger than the total page count of 37');\n                expect(() => pager.goToPage(100))\n                    .toThrowError('PageNr can not be larger than the total page count of 37');\n            });\n        });\n\n        describe('should throw error when there is no page handler', () => {\n            it('should throw an error when no handler is specified', (done) => {\n                pager = new Pager(pagerFixtureOne);\n\n                pager.getNextPage()\n                    .then(done)\n                    .catch(() => {\n                        done();\n                    });\n            });\n        });\n    });\n\n    describe('instance with data and query parameters', () => {\n        let pager;\n        let modelDefinition;\n\n        beforeEach(() => {\n            pagerFixtureOne = {\n                page: 1,\n                pageCount: 37,\n                query: { fields: ':all' },\n                total: 1844,\n                nextPage: 'http://localhost:8080/dhis/api/dataElements?page=2l',\n            };\n            pageFixtureTwo = {\n                page: 3,\n                pageCount: 37,\n                total: 1844,\n                nextPage: 'http://localhost:8080/dhis/api/dataElements?page=4',\n                prevPage: 'http://localhost:8080/dhis/api/dataElements?page=2',\n            };\n\n            class ModelDefinition {}\n            ModelDefinition.prototype.list = jest.fn().mockReturnValue(Promise.resolve());\n            modelDefinition = new ModelDefinition();\n\n            pager = new Pager(pagerFixtureOne, modelDefinition, { fields: ':all' });\n        });\n\n        describe('nextPage', () => {\n            it('should include the current query parameters', () => {\n                pager.getNextPage();\n\n                expect(modelDefinition.list).toBeCalledWith({ page: 2, fields: ':all' });\n            });\n        });\n\n        describe('previousPage', () => {\n            it('should include the current query parameters', () => {\n                pager.page = 3;\n                pager.prevPage = 'http://url.to.the.next.page';\n\n                pager.getPreviousPage();\n\n                expect(modelDefinition.list).toBeCalledWith({ page: 2, fields: ':all' });\n            });\n        });\n\n        describe('goToPage', () => {\n            it('should call the list method with the current query parameters', () => {\n                pager.goToPage(2);\n\n                expect(modelDefinition.list).toBeCalledWith({ page: 2, fields: ':all' });\n            });\n        });\n    });\n});\n"],"file":"Pager.spec.js"}