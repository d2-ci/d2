{"version":3,"sources":["../../../src/model/__tests__/ModelDefinitions.spec.js"],"names":["describe","skip","models","ModelDefinition","name","plural","beforeEach","ModelDefinitions","it","expect","toBeInstanceOf","Object","toThrowError","dataElementModelDefinition","add","Function","dataElement","shouldThrow","apiEndPoint","indicatorDefinition","indicator","toBe","indicators","mapThroughDefinitions","expectedArray","returnValue","item","toEqual","iterator","jest","fn","toHaveBeenCalledTimes"],"mappings":"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","sourcesContent":["import ModelDefinitions from '../ModelDefinitions';\n\ndescribe.skip('D2 models', () => {\n    let models;\n\n    class ModelDefinition {\n        constructor(name, plural) {\n            this.name = name;\n            this.plural = plural;\n        }\n    }\n\n    beforeEach(() => {\n        models = new ModelDefinitions();\n    });\n\n    it('should be an object', () => {\n        expect(models).toBeInstanceOf(Object);\n    });\n\n    it('should not be allowed to be called without new', () => {\n        expect(() => ModelDefinitions()).toThrowError('Cannot call a class as a function');\n    });\n\n    describe('add method', () => {\n        let dataElementModelDefinition;\n\n        beforeEach(() => {\n            dataElementModelDefinition = new ModelDefinition('dataElement');\n        });\n\n        it('should be a function', () => {\n            expect(models.add).toBeInstanceOf(Function);\n        });\n\n        it('should add a property to the models object', () => {\n            models.add(dataElementModelDefinition);\n\n            expect(models.dataElement).toBeInstanceOf(ModelDefinition);\n        });\n\n        it('should throw an error when trying to add something that already exists', () => {\n            function shouldThrow() {\n                models.add(dataElementModelDefinition);\n            }\n            models.add(dataElementModelDefinition);\n\n            expect(shouldThrow).toThrowError('Model dataElement already exists');\n        });\n\n        it('should reject a ModelDefinition that does not have a name property', () => {\n            function shouldThrow() {\n                models.add({ apiEndPoint: '/dataElement' });\n            }\n            models.add(dataElementModelDefinition);\n\n            expect(shouldThrow).toThrowError('Name should be set on the passed ModelDefinition to add one');\n        });\n\n        it('should add the plural version to the object', () => {\n            const indicatorDefinition = new ModelDefinition('indicator', 'indicators');\n\n            models.add(indicatorDefinition);\n\n            expect(models.indicator).toBeInstanceOf(ModelDefinition);\n            expect(models.indicator).toBe(models.indicators);\n        });\n    });\n\n    describe('mapThroughDefinitions method', () => {\n        beforeEach(() => {\n            models.add({ name: 'dataElement' });\n            models.add({ name: 'dataValue' });\n            models.add({ name: 'user' });\n            models.add({ name: 'userGroup' });\n        });\n\n        it('should should be a function', () => {\n            expect(models.mapThroughDefinitions).toBeInstanceOf(Function);\n        });\n\n        it('should return an array of ModelDefinitions', () => {\n            const expectedArray = [\n                { name: 'dataElement' },\n                { name: 'dataValue' },\n                { name: 'user' },\n                { name: 'userGroup' },\n            ];\n            function returnValue(item) {\n                return item;\n            }\n\n            expect(models.mapThroughDefinitions(returnValue)).toEqual(expectedArray);\n        });\n\n        it('should throw if the transformer passed is not a function', () => {\n            expect(() => models.mapThroughDefinitions('')).toThrowError('Expected transformer to have type function');\n            expect(() => models.mapThroughDefinitions({})).toThrowError('Expected transformer to have type function');\n        });\n\n        it('should not map through properties that are the plural versions', () => {\n            const iterator = jest.fn();\n\n            models.add({ name: 'indicator', plural: 'indicators' });\n\n            models.mapThroughDefinitions(iterator);\n\n            expect(iterator).toHaveBeenCalledTimes(5);\n        });\n    });\n});\n"],"file":"ModelDefinitions.spec.js"}