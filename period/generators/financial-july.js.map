{"version":3,"sources":["../../../src/period/generators/financial-july.js"],"names":["generateFinancialJulyPeriodsUpToYear","year","numberOfYears","locale","Error","periods","date","Date","monthNames","i","period","endDate","setYear","getFullYear","setDate","getDate","startDate","name","id","push","reverse"],"mappings":";;;;;;;AAAA;;AACA;;AAOO,SAASA,oCAAT,GAIL;AAAA,MAHEC,IAGF,uEAHS,8BAGT;AAAA,MAFEC,aAEF,uEAFkB,EAElB;AAAA,MADEC,MACF,uEADW,IACX;AACE;AACA,yCAAyBF,IAAzB;;AACA,MAAI,CAAC,sBAAUC,aAAV,CAAD,IAA6BA,aAAa,GAAG,CAAjD,EAAoD;AAChD,UAAM,IAAIE,KAAJ,CACF,uFADE,CAAN;AAGH;;AAED,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,IAAI,GAAG,IAAIC,IAAJ,kBAAmBN,IAAI,GAAG,CAA1B,EAAb;AACA,MAAMO,UAAU,GAAG,qCAAuBL,MAAvB,CAAnB;;AAEA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,aAApB,EAAmCO,CAAC,EAApC,EAAwC;AACpC,QAAMC,MAAM,GAAG,EAAf;AACAA,IAAAA,MAAM,CAACC,OAAP,GAAiB,8BAAgBL,IAAhB,CAAjB;AACAA,IAAAA,IAAI,CAACM,OAAL,CAAaN,IAAI,CAACO,WAAL,KAAqB,CAAlC;AACAP,IAAAA,IAAI,CAACQ,OAAL,CAAaR,IAAI,CAACS,OAAL,KAAiB,CAA9B;AACAL,IAAAA,MAAM,CAACM,SAAP,GAAmB,8BAAgBV,IAAhB,CAAnB;AACAI,IAAAA,MAAM,CAACO,IAAP,aAAiBT,UAAU,CAAC,CAAD,CAA3B,cAAkCF,IAAI,CAACO,WAAL,EAAlC,gBACIL,UAAU,CAAC,CAAD,CADd,cAEIF,IAAI,CAACO,WAAL,KAAqB,CAFzB;AAGAH,IAAAA,MAAM,CAACQ,EAAP,aAAeZ,IAAI,CAACO,WAAL,EAAf;AACAR,IAAAA,OAAO,CAACc,IAAR,CAAaT,MAAb;AACAJ,IAAAA,IAAI,CAACQ,OAAL,CAAaR,IAAI,CAACS,OAAL,KAAiB,CAA9B;AACH,GAzBH,CA2BE;;;AACA,SAAOV,OAAO,CAACe,OAAR,EAAP;AACH","sourcesContent":["import { isInteger } from '../../lib/check'\nimport {\n    validateIfValueIsInteger,\n    formatAsISODate,\n    getCurrentYear,\n    getMonthNamesForLocale,\n} from '../helpers'\n\nexport function generateFinancialJulyPeriodsUpToYear(\n    year = getCurrentYear(),\n    numberOfYears = 10,\n    locale = 'en'\n) {\n    // eslint-disable-line import/prefer-default-export\n    validateIfValueIsInteger(year)\n    if (!isInteger(numberOfYears) || numberOfYears < 1) {\n        throw new Error(\n            'FinancialJuly generator parameter `numberOfYears` should be an integer larger than 0.'\n        )\n    }\n\n    const periods = []\n    const date = new Date(`30 Jun ${year + 1}`)\n    const monthNames = getMonthNamesForLocale(locale)\n\n    for (let i = 0; i < numberOfYears; i++) {\n        const period = {}\n        period.endDate = formatAsISODate(date)\n        date.setYear(date.getFullYear() - 1)\n        date.setDate(date.getDate() + 1)\n        period.startDate = formatAsISODate(date)\n        period.name = `${monthNames[6]} ${date.getFullYear()} - ${\n            monthNames[5]\n        } ${date.getFullYear() + 1}`\n        period.id = `${date.getFullYear()}July`\n        periods.push(period)\n        date.setDate(date.getDate() - 1)\n    }\n\n    // FinancialJuly periods are collected backwards.\n    return periods.reverse()\n}\n"],"file":"financial-july.js"}