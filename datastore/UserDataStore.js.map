{"version":3,"sources":["../../src/datastore/UserDataStore.js"],"names":["UserDataStore","api","Api","getApi","endPoint","UserDataStoreNamespace","namespace","autoLoad","getUserDataStore","dataStore","BaseStore"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+BMA,a;;;;;AACF,2BAA4D;AAAA,QAAhDC,GAAgD,uEAA1CC,aAAIC,MAAJ,EAA0C;AAAA,QAA5BC,QAA4B,uEAAjB,eAAiB;;AAAA;;AAAA,sFAClDH,GADkD,EAC7CG,QAD6C,EACnCC,+BADmC;AAE3D;AAED;;;;;;;;;;;;;;;;;;;;wBAgBIC,S,EAA4B;AAAA,UAAjBC,QAAiB,uEAAN,IAAM;AAC5B,oFAAiBD,SAAjB,EAA4BC,QAA5B;AACH;AAED;;;;;;;;;;;;;;;2BAYOD,S,EAAW;AACd,uFAAoBA,SAApB;AACH;AAED;;;;;;;;;;;;uCAU0B;AACtB,UAAI,CAACN,aAAa,CAACQ,gBAAd,CAA+BC,SAApC,EAA+C;AAC3CT,QAAAA,aAAa,CAACQ,gBAAd,CAA+BC,SAA/B,GAA2C,IAAIT,aAAJ,CAAkBE,aAAIC,MAAJ,EAAlB,EAAgC,eAAhC,CAA3C;AACH;;AAED,aAAOH,aAAa,CAACQ,gBAAd,CAA+BC,SAAtC;AACH;;;;EAzDuBC,mB;;eA4DbV,a","sourcesContent":["import BaseStore from './BaseStore';\nimport UserDataStoreNamespace from './UserDataStoreNamespace';\nimport Api from '../api/Api';\n\n/**\n * @augments module:datastore.BaseStore\n * @description\n * Represents the UserDataStore that can be interacted with. This can be used to get instances of UserDataStoreNamespace, which\n * can be used to interact with the {@link module:current-user.UserDataStoreNamespace namespace API}.\n *\n * The store is a key-value store, where a namespace contains a list of keys, and\n * a key corresponds to an arbitrary JSON-object. The store is per-user, and only the currently logged-in user\n * has access to the namespaces.\n *\n * Note that a namespace cannot exist without at least one key-value pair, for this reason\n * you need to call {@link module:current-user.UserDataStoreNamespace#set set()} after {@link module:current-user.UserDataStore#create create()} to save a namespace\n * with a key and a value.\n *\n * @example <caption>Getting a value with promise-syntax</caption>\n * import { init } from 'd2';\n *\n * init({baseUrl: 'https://play.dhis2.org/demo/api'})\n *   .then((d2) => {\n *     d2.currentUser.dataStore.get('namespace').then(namespace => {\n *          namespace.get('key').then(value => console.log(value))\n *      });\n *   });\n *\n * @example <caption>Creation of namespace with async-syntax</caption>\n * const namespace = await d2.currentUser.dataStore.create('new namespace', false);\n * // The namespace is not actually created on the server before 'set' is called\n * await namespace.set('new key', value);\n *\n * @memberof module:current-user\n */\nclass UserDataStore extends BaseStore {\n    constructor(api = Api.getApi(), endPoint = 'userDataStore') {\n        super(api, endPoint, UserDataStoreNamespace);\n    }\n\n    /**\n     * @description\n     * Tries to get the given namespace from the server, and returns an instance of 'UserDataStore' that\n     * may be used to interact with this namespace. See {@link module:current-user.UserDataStoreNamespace UserDataStoreNamespace}.\n     *\n     * @example <caption>Getting a namespace</caption>\n     * d2.currentUser.dataStore.get('namespace').then(namespace => {\n     *     namespace.set('new key', value);\n     *});\n     *\n     * @param {string} namespace - Namespace to get.\n     * @param {boolean} [autoLoad=true] - If true, autoloads the keys of the namespace from the server.\n     * If false, an instance of the namespace is returned without any keys (no request is sent to the server).\n     *\n     * @returns {Promise<UserDataStoreNamespace>} An instance of a UserDataStoreNamespace representing the namespace that can be interacted with.\n     */\n    get(namespace, autoLoad = true) {\n        return super.get(namespace, autoLoad);\n    }\n\n    /**\n     * Creates a namespace. Ensures that the namespace does not exists on the server.\n     * Note that for the namespace to be saved on the server, you need to call {@link module:current-user.UserDataStoreNamespace#set set}.\n     *\n     * @example <caption>Creating a namespace</caption>\n     * d2.currentUser.dataStore.create('new namespace').then(namespace => {\n     *     namespace.set('new key', value);\n     * });\n     * @param {string} namespace The namespace to create.\n     * @returns {Promise<UserDataStoreNamespace>} An instance of the current store-Namespace-instance representing the namespace that can be interacted with, or\n     * an error if namespace exists.\n     */\n    create(namespace) {\n        return super.create(namespace);\n    }\n\n    /**\n     * @static\n     *\n     * @returns {UserDataStore} Object with the userDataStore interaction properties\n     *\n     * @description\n     * Get a new instance of the userDataStore object. This will function as a singleton - when a UserDataStore object has been created\n     * when requesting getUserDataStore again, the original version will be returned.\n     */\n\n    static getUserDataStore() {\n        if (!UserDataStore.getUserDataStore.dataStore) {\n            UserDataStore.getUserDataStore.dataStore = new UserDataStore(Api.getApi(), 'userDataStore');\n        }\n\n        return UserDataStore.getUserDataStore.dataStore;\n    }\n}\n\nexport default UserDataStore;\n"],"file":"UserDataStore.js"}