{"version":3,"sources":["../../../src/model/__tests__/ModelCollection.spec.js"],"names":["jest","mock","describe","mockSchema","singular","plural","mockModelDefinition","ModelDefinition","pagerObject","beforeEach","page","pageCount","total","nextPage","Pager","mockReset","mockReturnValueOnce","firstValue","modelCollection","Model","id","ModelCollection","create","add","it","clear","expect","size","toBe","Array","from","values","keys","entries","next","value","toEqual","forEachFunc","fn","forEach","toBeCalledWith","valuesContainerMap","delete","has","get","toThrowError","toBeInstanceOf","Function","length","collection","pager","toBeDefined","toThrowErrorMatchingSnapshot","throwIfContainsOtherThanModelObjects","not","throwIfContainsModelWithoutUid","model","modelDefinition","mockyModel1","mockyModel2","mockyModel3","firstModel","MyModel","myModel","modelArray","toArray"],"mappings":"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","sourcesContent":["import Model from '../Model';\nimport ModelDefinition from '../ModelDefinition';\nimport Pager from '../../../src/pager/Pager';\nimport ModelCollection from '../ModelCollection';\n\njest.mock('../Model');\njest.mock('../../../src/pager/Pager');\n\ndescribe('ModelCollection', () => {\n    const mockSchema = { singular: 'mock', plural: 'mocks' };\n    const mockModelDefinition = new ModelDefinition(mockSchema, []);\n    let pagerObject;\n\n    beforeEach(() => {\n        pagerObject = {\n            page: 1,\n            pageCount: 10,\n            total: 482,\n            nextPage: 'http://localhost:8080/dhis/api/dataElements?page=2',\n        };\n\n        Pager.mockReset();\n        Pager.mockReturnValueOnce(pagerObject);\n    });\n\n    describe('extension of Map', () => {\n        let firstValue;\n        let modelCollection;\n\n        beforeEach(() => {\n            firstValue = new Model(mockModelDefinition);\n            firstValue.id = 'q2egwkkrfco';\n\n            modelCollection = ModelCollection.create(mockModelDefinition, [], pagerObject);\n            modelCollection.add(firstValue);\n        });\n\n        it('should have a clear method that clears the list', () => {\n            modelCollection.clear();\n\n            expect(modelCollection.size).toBe(0);\n        });\n\n        it('should get the values', () => {\n            expect(Array.from(modelCollection.values())[0]).toBe(firstValue);\n        });\n\n        it('should get the keys', () => {\n            expect(Array.from(modelCollection.keys())[0]).toBe('q2egwkkrfco');\n        });\n\n        it('should get the entries', () => {\n            expect(modelCollection.entries().next().value).toEqual([firstValue.id, firstValue]);\n        });\n\n        it('should run the forEach with the correct values', () => {\n            const forEachFunc = jest.fn();\n\n            modelCollection.forEach(forEachFunc);\n\n            expect(forEachFunc).toBeCalledWith(firstValue, 'q2egwkkrfco', modelCollection.valuesContainerMap);\n        });\n\n        it('should remove the correct value', () => {\n            modelCollection.delete('q2egwkkrfco');\n\n            expect(modelCollection.size).toBe(0);\n        });\n\n        it('should get the entries', () => {\n            expect(Array.from(modelCollection)[0]).toEqual(['q2egwkkrfco', firstValue]);\n        });\n\n        it('should return true when the entry is in the collection', () => {\n            expect(modelCollection.has('q2egwkkrfco')).toBe(true);\n        });\n\n        it('should return the correct value on get', () => {\n            expect(modelCollection.get('q2egwkkrfco')).toBe(firstValue);\n        });\n\n        it('should throw error when trying to set the size', () => {\n            expect(() => { modelCollection.size = 0; }).toThrowError();\n        });\n    });\n\n    it('should be an object', () => {\n        expect(ModelCollection).toBeInstanceOf(Function);\n    });\n\n    it('should accept 3 arguments', () => {\n        expect(ModelCollection.length).toBe(3);\n    });\n\n    describe('class', () => {\n        describe('create method', () => {\n            it('should be a function', () => {\n                expect(ModelCollection.create).toBeInstanceOf(Function);\n            });\n\n            it('should return an instance of the class', () => {\n                expect(ModelCollection.create(mockModelDefinition)).toBeInstanceOf(ModelCollection);\n            });\n\n            it('should instantiate a new pager', () => {\n                const collection = ModelCollection.create(mockModelDefinition);\n\n                expect(collection.pager).toBeDefined();\n            });\n\n            it('should not be allowed to be called without new', () => {\n                expect(() => ModelCollection()).toThrowErrorMatchingSnapshot();\n            });\n        });\n\n        describe('throwIfContainsOtherThanModelObjects', () => {\n            it('should throw when one of the the passed values in the array is not a Model', () => {\n                expect(() => ModelCollection.throwIfContainsOtherThanModelObjects([{}]))\n                    .toThrowError('Values of a ModelCollection must be instances of Model');\n            });\n\n            it('should not throw when the passed value is a model', () => {\n                expect(() => ModelCollection.throwIfContainsOtherThanModelObjects([new Model(mockModelDefinition)]))\n                    .not.toThrowError();\n            });\n        });\n\n        describe('throwIfContainsModelWithoutUid', () => {\n            it('should throw when the passed array contains a modelWithoutId', () => {\n                expect(() => ModelCollection.throwIfContainsModelWithoutUid([new Model(mockModelDefinition)]))\n                    .toThrowError('Can not add a Model without id to a ModelCollection');\n            });\n\n            it('should accept models with valid UIDs', () => {\n                const model = new Model(mockModelDefinition);\n\n                model.id = 'FQ2o8UBlcrS';\n\n                expect(() => ModelCollection.throwIfContainsModelWithoutUid([model])).not.toThrowError();\n            });\n        });\n    });\n\n    describe('instance', () => {\n        let modelDefinition;\n        let modelCollection;\n        let mockyModel1;\n        let mockyModel2;\n        let mockyModel3;\n\n        beforeEach(() => {\n            modelDefinition = new ModelDefinition(mockSchema, []);\n            modelCollection = new ModelCollection(modelDefinition);\n            mockyModel1 = new Model(mockModelDefinition);\n            mockyModel1.id = 'q2egwkkrfc1';\n            mockyModel2 = new Model(mockModelDefinition);\n            mockyModel2.id = 'q2egwkkrfc2';\n            mockyModel3 = new Model(mockModelDefinition);\n            mockyModel3.id = 'q2egwkkrfc3';\n        });\n\n        it('should throw if being constructed with non Model values', () => {\n            expect(() => new ModelCollection(modelDefinition, [\n                1,\n                2,\n                3,\n            ])).toThrowError('Values of a ModelCollection must be instances of Model');\n        });\n\n        it('should accept an array of Model objects', () => {\n            modelCollection = new ModelCollection(modelDefinition, [\n                mockyModel1,\n                mockyModel2,\n                mockyModel3,\n            ]);\n\n            expect(modelCollection.size).toBe(3);\n        });\n\n        it('should not add the same model twice', () => {\n            modelCollection = new ModelCollection(modelDefinition, [\n                mockyModel1,\n                mockyModel1,\n            ]);\n\n            expect(modelCollection.size).toBe(1);\n        });\n\n        it('should return the first Model', () => {\n            const firstModel = mockyModel1;\n            mockyModel2.id = firstModel.id;\n\n            modelCollection = new ModelCollection(modelDefinition, [firstModel, mockyModel2]);\n\n            const firstValue = modelCollection.get('q2egwkkrfc1');\n\n            expect(modelCollection.size).toBe(1);\n            expect(firstValue.id).toBe('q2egwkkrfc1');\n            expect(firstValue).toBeInstanceOf(Model);\n        });\n\n        it('should set the modelDefinition onto the modelCollection', () => {\n            expect(modelCollection.modelDefinition).toBe(modelDefinition);\n        });\n\n        describe('add', () => {\n            it('should accept Model as a value', () => {\n                modelCollection.add(mockyModel1);\n            });\n\n            it('should not accept a number', () => {\n                expect(() => modelCollection.add(1))\n                    .toThrowError('Values of a ModelCollection must be instances of Model');\n            });\n\n            it('should not accept an empty object', () => {\n                expect(() => modelCollection.add({}))\n                    .toThrowError('Values of a ModelCollection must be instances of Model');\n            });\n\n            it('should not accept an object that was created based on a local class', () => {\n                class Model { // eslint-disable-line no-shadow\n                    constructor(id) {\n                        this.id = id;\n                    }\n                }\n\n                expect(() => modelCollection.add(new Model('q2egwkkrfco')))\n                    .toThrowError('Values of a ModelCollection must be instances of Model');\n            });\n\n            it('should accept an object that was create with Model as subclass', () => {\n                class MyModel extends Model {\n                }\n                const myModel = new MyModel(mockModelDefinition);\n                myModel.id = 'q2egwkkrfco';\n\n                expect(() => modelCollection.add(myModel))\n                    .not.toThrowError('Values of a ModelCollection must be instances of Model');\n                expect(modelCollection.size).toBe(1);\n            });\n\n            it('should throw if the id is not available', () => {\n                expect(() => modelCollection.add(new Model(mockModelDefinition)))\n                    .toThrowError('Can not add a Model without id to a ModelCollection');\n            });\n        });\n\n        describe('toArray', () => {\n            it('should return an array of the items', () => {\n                const modelArray = [mockyModel1, mockyModel2];\n\n                modelCollection = new ModelCollection(modelDefinition, modelArray);\n\n                expect(modelCollection.toArray()).toEqual(modelArray);\n            });\n        });\n    });\n});\n"],"file":"ModelCollection.spec.js"}