{"version":3,"sources":["../../../../src/period/generators/__tests__/financial-april_spec.js"],"names":["describe","it","expect","toThrowError","Date","toHaveLength","tenYearlyPeriods","toEqual","endDate","startDate","name","id","fiveYearlyPeriods","Infinity","getFullYear"],"mappings":"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","sourcesContent":["import { generateFinancialAprilPeriodsUpToYear } from '../financial-april';\n\ndescribe('Financial April period', () => {\n    describe('generateFinancialAprilPeriodsUpToYear()', () => {\n        it('should not allow years before the year zero', () => {\n            expect(() => generateFinancialAprilPeriodsUpToYear(-10)).toThrowError();\n        });\n\n        it('should throw an error when passing a Date object', () => {\n            expect(() => generateFinancialAprilPeriodsUpToYear(new Date())).toThrowError();\n        });\n\n        it('should generate 10 yearly periods when no numberOfYears was passed', () => {\n            expect(generateFinancialAprilPeriodsUpToYear(2017)).toHaveLength(10);\n        });\n\n        it('should generate periods for 10 years with the last one being the current year', () => {\n            const tenYearlyPeriods = generateFinancialAprilPeriodsUpToYear(2017);\n\n            expect(tenYearlyPeriods).toEqual([\n                {\n                    endDate: '2009-03-31',\n                    startDate: '2008-04-01',\n                    name: 'April 2008 - March 2009',\n                    id: '2008April',\n                }, {\n                    endDate: '2010-03-31',\n                    startDate: '2009-04-01',\n                    name: 'April 2009 - March 2010',\n                    id: '2009April',\n                }, {\n                    endDate: '2011-03-31',\n                    startDate: '2010-04-01',\n                    name: 'April 2010 - March 2011',\n                    id: '2010April',\n                }, {\n                    endDate: '2012-03-31',\n                    startDate: '2011-04-01',\n                    name: 'April 2011 - March 2012',\n                    id: '2011April',\n                }, {\n                    endDate: '2013-03-31',\n                    startDate: '2012-04-01',\n                    name: 'April 2012 - March 2013',\n                    id: '2012April',\n                }, {\n                    endDate: '2014-03-31',\n                    startDate: '2013-04-01',\n                    name: 'April 2013 - March 2014',\n                    id: '2013April',\n                }, {\n                    endDate: '2015-03-31',\n                    startDate: '2014-04-01',\n                    name: 'April 2014 - March 2015',\n                    id: '2014April',\n                }, {\n                    endDate: '2016-03-31',\n                    startDate: '2015-04-01',\n                    name: 'April 2015 - March 2016',\n                    id: '2015April',\n                }, {\n                    endDate: '2017-03-31',\n                    startDate: '2016-04-01',\n                    name: 'April 2016 - March 2017',\n                    id: '2016April',\n                }, {\n                    endDate: '2018-03-31',\n                    startDate: '2017-04-01',\n                    name: 'April 2017 - March 2018',\n                    id: '2017April',\n                },\n            ]);\n        });\n\n        it('should respect the number of years parameter and generate the correct number of years', () => {\n            const fiveYearlyPeriods = generateFinancialAprilPeriodsUpToYear(2017, 5);\n\n            expect(fiveYearlyPeriods).toEqual([\n                {\n                    endDate: '2014-03-31',\n                    startDate: '2013-04-01',\n                    name: 'April 2013 - March 2014',\n                    id: '2013April',\n                }, {\n                    endDate: '2015-03-31',\n                    startDate: '2014-04-01',\n                    name: 'April 2014 - March 2015',\n                    id: '2014April',\n                }, {\n                    endDate: '2016-03-31',\n                    startDate: '2015-04-01',\n                    name: 'April 2015 - March 2016',\n                    id: '2015April',\n                }, {\n                    endDate: '2017-03-31',\n                    startDate: '2016-04-01',\n                    name: 'April 2016 - March 2017',\n                    id: '2016April',\n                }, {\n                    endDate: '2018-03-31',\n                    startDate: '2017-04-01',\n                    name: 'April 2017 - March 2018',\n                    id: '2017April',\n                },\n            ]);\n        });\n\n        it('should throw an error when the numberOfYears is not a positive integer', () => {\n            expect(() => generateFinancialAprilPeriodsUpToYear(2017, 'a')).toThrowError();\n            expect(() => generateFinancialAprilPeriodsUpToYear(2017, 1.2)).toThrowError();\n            expect(() => generateFinancialAprilPeriodsUpToYear(2017, true)).toThrowError();\n            expect(() => generateFinancialAprilPeriodsUpToYear(2017, -1)).toThrowError();\n            expect(() => generateFinancialAprilPeriodsUpToYear(2017, 0)).toThrowError();\n            expect(() => generateFinancialAprilPeriodsUpToYear(2017, Infinity)).toThrowError();\n        });\n\n        it('should generate the yearly periods for 2021 and 2022', () => {\n            const fiveYearlyPeriods = generateFinancialAprilPeriodsUpToYear(2022, 2);\n\n            expect(fiveYearlyPeriods).toEqual([\n                {\n                    endDate: '2022-03-31',\n                    startDate: '2021-04-01',\n                    name: 'April 2021 - March 2022',\n                    id: '2021April',\n                }, {\n                    endDate: '2023-03-31',\n                    startDate: '2022-04-01',\n                    name: 'April 2022 - March 2023',\n                    id: '2022April',\n                },\n            ]);\n        });\n\n        it('should generate use the current year when no year has been given', () => {\n            expect(generateFinancialAprilPeriodsUpToYear()).toEqual(generateFinancialAprilPeriodsUpToYear(new Date().getFullYear()));\n        });\n    });\n});\n"],"file":"financial-april_spec.js"}