{"version":3,"sources":["../src/d2.js"],"names":["getManifest","getUserSettings","init","getInstance","setInstance","firstRun","deferredD2Init","create","preInitConfig","url","ApiClass","api","getApi","setBaseUrl","manifestUtilities","getBaseUrl","activities","dhis","href","get","then","Object","assign","manifest","processPreInitConfig","getModelRequests","schemaNames","modelRequests","loadSchemaForName","schemaName","fields","Array","isArray","individualSchemaRequests","map","concat","schemasPromise","Promise","all","schemas","push","length","paging","attributes","initConfig","logger","getLogger","config","d2","models","undefined","model","Api","system","getSystem","i18n","getI18n","dataStore","getDataStore","analytics","getAnalytics","geoFeatures","getGeoFeatures","processConfigForD2","userRequests","systemRequests","load","res","responses","currentUser","authorities","userSettings","systemInfo","apps","filter","schema","metadata","apiEndpoint","baseUrl","forEach","schemaAttributes","attributeDescriptor","attributeNameFilter","singular","join","prototype","hasOwnProperty","call","add","ModelDefinition","createFromSchema","setSystemInfo","setInstalledApps","resolve","promise","catch","error","JSON","stringify","reject","console","warn"],"mappings":"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","file":"d2.js","sourcesContent":["/**\n * @module d2\n *\n * @description\n * Module that contains the entry points for working with the d2 instance. Most of the api related functionality will be available through this package.\n *\n * The most important functions from the module are {@link module:d2.init|init} and {@link module:d2.init|getInstance} these are used to create and to get\n * a hold of the initialized instance of {@link module:d2.init~d2|d2}. The initialized instance is the object that allows you access most of d2's functionality.\n *\n * @example\n * import { init } from 'd2/lib/d2';\n *\n * init({ baseUrl: 'https://play.dhis2.org/demo/api/27/' })\n *  .then(d2 => console.log(d2.currentUser.name));\n */\nimport 'whatwg-fetch';\nimport { pick, Deferred, updateAPIUrlWithBaseUrlVersionNumber } from './lib/utils';\nimport Logger from './logger/Logger';\nimport model from './model';\nimport Api from './api/Api';\nimport System from './system/System';\nimport I18n from './i18n/I18n';\nimport Config from './config';\nimport CurrentUser from './current-user/CurrentUser';\nimport { fieldsForSchemas } from './model/config';\nimport DataStore from './datastore/DataStore';\nimport Analytics from './analytics/Analytics';\nimport GeoFeatures from './geofeatures/GeoFeatures';\n\nlet firstRun = true;\nlet deferredD2Init = Deferred.create();\n\nconst preInitConfig = Config.create();\n\n/**\n * Utility function to load the app manifest.\n *\n * The manifest well be enhanced with a `getBaseUrl()` utility function that will return the base url of the DHIS2 instance.\n * This is a simple getter for the `activities.dhis.href` property on the manifest.\n *\n * @example\n * import { getManifest } from 'd2/lib/d2';\n *\n * getManifest()\n *   .then(manifest => {\n *      console.log(manifest.getBaseUrl());\n *   });\n *\n * @param {string} url The location of the manifest. Generally this is located in the root of your app folder. (e.g. './manifest.webapp)\n * @param {Api} [ApiClass] An implementation of the Api class that will be used to fetch the manifest.\n *\n * @returns {Promise} Returns a Promise to  the DHIS2 app manifest with the added `getBaseUrl` method.\n */\nexport function getManifest(url, ApiClass = Api) {\n    const api = ApiClass.getApi();\n    api.setBaseUrl('');\n\n    const manifestUtilities = {\n        getBaseUrl() {\n            return this.activities.dhis.href;\n        },\n    };\n\n    return api.get(`${url}`)\n        .then(manifest => Object.assign({}, manifest, manifestUtilities));\n}\n\n\n/**\n * @function getUserSettings\n *\n * @returns {Promise} A promise to the current user settings\n *\n * @description\n * The object that is the result of the promise will have the following properties\n *\n * @example\n * import {getUserSettings} from 'd2/lib/d2';\n *\n * getUserSettings()\n *  .then(userSettings => {\n *      console.log(userSettings);\n *  });\n */\nexport function getUserSettings(ApiClass = Api) {\n    const api = ApiClass.getApi();\n\n    if (firstRun) {\n        Config.processPreInitConfig(preInitConfig, api);\n    }\n\n    return api.get('userSettings');\n}\n\nfunction getModelRequests(api, schemaNames) {\n    const modelRequests = [];\n    const loadSchemaForName = schemaName => api.get(`schemas/${schemaName}`, { fields: fieldsForSchemas });\n\n    if (Array.isArray(schemaNames)) {\n        const individualSchemaRequests = schemaNames.map(loadSchemaForName).concat([]);\n\n        const schemasPromise = Promise\n            .all(individualSchemaRequests)\n            .then(schemas => ({ schemas }));\n\n        modelRequests.push(schemasPromise);\n\n        if (schemaNames.length > 0) {\n            // If schemas are loaded, attributes should be as well\n            modelRequests.push(api.get('attributes', { fields: ':all,optionSet[:all,options[:all]]', paging: false }));\n        } else {\n            // Otherwise, just return an empty list of attributes\n            modelRequests.push({ attributes: [] });\n        }\n    } else {\n        // If no schemas are specified, load all schemas and attributes\n        modelRequests.push(api.get('schemas', { fields: fieldsForSchemas }));\n        modelRequests.push(api.get('attributes', { fields: ':all,optionSet[:all,options[:all]]', paging: false }));\n    }\n\n\n    return modelRequests;\n}\n\n/**\n * Init function that used to initialise {@link module:d2.init~d2|d2}. This will load the schemas from the DHIS2 api and configure your {@link module:d2.init~d2|d2} instance.\n *\n * The `config` object that can be passed into init can have the following properties:\n *\n * baseUrl: Set this when the url is something different then `/api`. If you are running your dhis instance in a subdirectory of the actual domain\n * for example http://localhost/dhis/ you should set the base url to `/dhis/api`\n *\n * unauthorizedCb: A callback function that is called whenever a API-request encounters a 401 - Unauthorized response.\n *  The function is called with (request, response) - the request object that failed, and the parsed response from the server.\n *\n * @param {Object} initConfig Configuration object that will be used to configure to define D2 Setting.\n * See the description for more information on the available settings.\n * @returns {Promise.<D2>} A promise that resolves with the intialized {@link init~d2|d2} object.\n *\n * @example\n * import init from 'd2';\n *\n * init({baseUrl: '/dhis/api'})\n *   .then((d2) => {\n *     console.log(d2.model.dataElement.list());\n *   });\n */\nexport function init(initConfig, ApiClass = Api, logger = Logger.getLogger()) {\n    const api = ApiClass.getApi();\n\n    const config = Config.create(preInitConfig, initConfig);\n\n    /**\n     * @namespace\n     */\n    const d2 = {\n        /**\n         * @description\n         * This is the entry point for the modelDefinitions that were loaded. To start interacting with the metadata api\n         * you would pick a modelDefinition from this object to interact with.\n         *\n         * @type {Object.<string, ModelDefinition>}\n         * @instance\n         */\n        models: undefined,\n        /**\n         * Collection of the {@link module:model} classes\n         *\n         * @deprecated There is probably no point to expose this.\n         * @instance\n         */\n        model, // TODO: Remove (Breaking)\n        /**\n         * Api class that is used throughout the api interaction. This can be used to get hold of the module:Api singleton.\n         *\n         * @example\n         * d2.Api.getApi()      // Returns the api object\n         *  .get('resources')   // Do a get request for /api/resources\n         *  .then(resources => {\n         *      console.log(resources);\n         *  });\n         *\n         * @see {@link module:api~Api#getApi}\n         *\n         * @instance\n         */\n        Api: ApiClass,\n        /**\n         * System instance to interact with system information like system settings, system info etc.\n         *\n         * @example\n         * console.log(d2.system.version.major); // 2 for DHIS 2.27\n         *\n         * @see {@link module:system/System~System|System}\n         * @instance\n         */\n        system: System.getSystem(),\n        /**\n         * I18n instance with the loaded translations.\n         *\n         * Usually used for retrieving translations for a given key using `getTranslation(key: string)`\n         *\n         * @example\n         * d2.i18n.getTranslation('success'); // Returns \"Success\" for the english locale\n         *\n         * @see {@link module:i18n~I18n#getTranslation|getTranslation}\n         *\n         * @instance\n         */\n        i18n: I18n.getI18n(),\n        /**\n         * Instance of the DataStore class for interaction with the dataStore api.\n         *\n         * @see {@link module:datastore.DataStore DataStore}\n         *\n         * @instance\n         */\n        dataStore: DataStore.getDataStore(),\n\n        /**\n         * Analytics instance for requesting analytics data from various endpoints.\n         *\n         * @example\n         * d2.analytics.aggregate\n         *  .addDimensions([\n         *   'dx:Uvn6LCg7dVU;OdiHJayrsKo',\n         *   'pe:LAST_4_QUARTERS',\n         *   'ou:lc3eMKXaEfw;PMa2VCrupOd',\n         *  ])\n         *  .addFilter('pe:2016Q1;2016Q2')\n         *  .getRawData({\n         *    startDate: '2017-10-01',\n         *    endDate: '2017-10-31'\n         *  })\n         *  .then(console.log)\n         *\n         * @see {@link module:analytics.Analytics Analytics}\n         * @instance\n         */\n        analytics: Analytics.getAnalytics(),\n\n        /*\n         * GeoFeatures instance\n         *\n         * @see {@link module:geoFeatures.GeoFeatures GeoFeatures}\n         * @instance\n         */\n        geoFeatures: GeoFeatures.getGeoFeatures(),\n    };\n\n    // Process the config in a the config class to keep all config calls together.\n    Config.processConfigForD2(config, d2);\n\n    // Because when importing the getInstance method in dependencies the getInstance could run before\n    // init we have to resolve the current promise on first run and for consecutive ones replace the\n    // old one with a fresh promise.\n    if (firstRun) {\n        firstRun = false;\n    } else {\n        deferredD2Init = Deferred.create();\n    }\n\n    const modelRequests = getModelRequests(api, config.schemas);\n\n    const userRequests = [\n        api.get('me', { fields: ':all,organisationUnits[id],userGroups[id],userCredentials[:all,!user,userRoles[id]' }),\n        api.get('me/authorization'),\n        getUserSettings(ApiClass),\n    ];\n\n    const systemRequests = [\n        api.get('system/info'),\n        api.get('apps'),\n    ];\n\n    return Promise.all([\n        ...modelRequests,\n        ...userRequests,\n        ...systemRequests,\n        d2.i18n.load(),\n    ])\n        .then((res) => {\n            const responses = {\n                schemas: pick('schemas')(res[0]),\n                attributes: pick('attributes')(res[1]),\n                currentUser: res[2],\n                authorities: res[3],\n                userSettings: res[4],\n                systemInfo: res[5],\n                apps: res[6],\n            };\n\n            responses.schemas\n                // We only deal with metadata schemas\n                .filter(schema => schema.metadata)\n                // TODO: Remove this when the schemas endpoint is versioned or shows the correct urls for the requested version\n                // The schemas endpoint is not versioned which will result into the modelDefinitions always using the\n                // \"default\" endpoint, we therefore modify the endpoint url based on the given baseUrl.\n                .map((schema) => {\n                    schema.apiEndpoint = updateAPIUrlWithBaseUrlVersionNumber(schema.apiEndpoint, config.baseUrl); // eslint-disable-line no-param-reassign\n\n                    return schema;\n                })\n                .forEach((schema) => {\n                    // Attributes that do not have values do not by default get returned with the data,\n                    // therefore we need to grab the attributes that are attached to this particular schema to be able to know about them\n                    const schemaAttributes = responses.attributes\n                        .filter((attributeDescriptor) => {\n                            const attributeNameFilter = [schema.singular, 'Attribute'].join('');\n                            return attributeDescriptor[attributeNameFilter] === true;\n                        });\n\n                    if (!Object.prototype.hasOwnProperty.call(d2.models, schema.singular)) {\n                        d2.models.add(model.ModelDefinition.createFromSchema(schema, schemaAttributes));\n                    }\n                });\n\n            /**\n             * An instance of {@link module:current-user/CurrentUser~CurrentUser|CurrentUser}\n             *\n             * The currentUser can be used to retrieve data related to the currentUser.\n             *\n             * These things primarily include:\n             * - currentUser properties retrieved from `/api/me`\n             * - Lazily request collections related to the user such as\n             *      - userRoles\n             *      - userGroups\n             *      - organisationUnits\n             *      - dataViewOrganisationUnits\n             * - authorities\n             * - userSettings\n             * - utility methods for ACL\n             *\n             * @example\n             * d2.currentUser.canCreate(d2.models.dataElement); // Returns true when the user can create either a private/public dataElement\n             * d2.currentUser.canCreate(d2.models.organisationUnit); // Returns true the user can create an organisationUnit\n             *\n             * @see {@link module:current-user/CurrentUser~CurrentUser|CurrentUser}\n             * @instance\n             */\n            d2.currentUser = CurrentUser.create(\n                responses.currentUser,\n                responses.authorities,\n                d2.models,\n                responses.userSettings,\n            );\n            d2.system.setSystemInfo(responses.systemInfo);\n            d2.system.setInstalledApps(responses.apps);\n\n            deferredD2Init.resolve(d2);\n            return deferredD2Init.promise;\n        })\n        .catch((error) => {\n            logger.error('Unable to get schemas from the api', JSON.stringify(error), error);\n\n            deferredD2Init.reject('Unable to get schemas from the DHIS2 API');\n            return deferredD2Init.promise;\n        });\n}\n\n/**\n * This function can be used to retrieve the `singleton` instance of d2. The instance is being created by calling\n * the `init` method.\n *\n * @returns {Promise.<D2>} A promise to the initialized {@link module:d2.init~d2|d2} instance.\n *\n * @example\n * import {init, getInstance} from 'd2';\n *\n * init({baseUrl: '/dhis2/api/'});\n * getInstance()\n *   .then(d2 => {\n *      d2.models.dataElement.list();\n *      // and all your other d2 magic.\n *   });\n */\nexport function getInstance() {\n    return deferredD2Init.promise;\n}\n\nexport function setInstance(d2) {\n    console.warn('[d2] Overriding d2 instance; you better be sure about this.');\n    deferredD2Init.resolve(d2);\n}\n\n/**\n * Can be used to set config options before initialisation of d2.\n *\n * @example\n * import {config, init} from 'd2';\n *\n * config.baseUrl = '/demo/api';\n * config.i18n.sources.add('i18n/systemsettingstranslations.properties');\n *\n * init()\n *   .then(d2 => {\n *     d2.system.settings.all()\n *       .then(systemSettings => Object.keys())\n *       .then(systemSettingsKey => {\n *         d2.i18n.getTranslation(systemSettingsKey);\n *       });\n *   });\n *   @type Config\n */\nexport const config = preInitConfig; // Alias preInitConfig to be able to `import {config} from 'd2';`\n\nexport default {\n    init,\n    config,\n    getInstance,\n    getUserSettings,\n    getManifest,\n};\n"]}