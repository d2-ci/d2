{"version":3,"sources":["../../../src/logger/__tests__/Logger.spec.js"],"names":["describe","logger","consoleMock","beforeEach","log","jest","fn","debug","error","warn","Logger","it","expect","toThrowErrorMatchingSnapshot","toBeInstanceOf","toBeDefined","Function","toBeCalledWith","toBe","getLogger"],"mappings":"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","sourcesContent":["import Logger from '../Logger';\n\ndescribe('Logger', () => {\n    let logger;\n    let consoleMock;\n\n    beforeEach(() => {\n        consoleMock = {\n            log: jest.fn(),\n            debug: jest.fn(),\n            error: jest.fn(),\n            warn: jest.fn(),\n        };\n\n        logger = new Logger(consoleMock);\n    });\n\n    it('should not be allowed to be called without new', () => {\n        expect(() => Logger()).toThrowErrorMatchingSnapshot();\n    });\n\n    it('should get the correct Logger instance from the namespace', () => {\n        expect(logger).toBeInstanceOf(Logger);\n    });\n\n    it('should have a log function', () => {\n        expect(logger.log).toBeDefined();\n        expect(logger.log).toBeInstanceOf(Function);\n    });\n\n    it('should log to the console', () => {\n        logger.log('my message');\n\n        expect(consoleMock.log).toBeCalledWith('my message');\n    });\n\n    it('should return true after successful logging', () => {\n        expect(logger.log('my message')).toBe(true);\n    });\n\n    it('should not log when it does not exist', () => {\n        delete consoleMock.log;\n\n        expect(logger.log('my message')).toBe(false);\n    });\n\n    it('should not log if the method does not exist', () => {\n        delete consoleMock.warn;\n\n        expect(logger.warn('my message')).toBe(false);\n    });\n\n    it('should log a warning', () => {\n        expect(logger.warn('my message')).toBe(true);\n        expect(consoleMock.warn).toBeCalledWith('my message');\n    });\n\n    it('should log a debug request', () => {\n        expect(logger.debug('my message')).toBe(true);\n        expect(consoleMock.debug).toBeCalledWith('my message');\n    });\n\n    it('should not log when it does not exist', () => {\n        delete consoleMock.debug;\n\n        expect(logger.debug('my message')).toBe(false);\n    });\n\n    it('should log an error request', () => {\n        expect(logger.error('my message')).toBe(true);\n        expect(consoleMock.error).toBeCalledWith('my message');\n    });\n\n    it('should not log when error does not exist', () => {\n        delete consoleMock.error;\n\n        expect(logger.error('my message')).toBe(false);\n    });\n\n    describe('getLogger', () => {\n        it('should return a logger', () => {\n            expect(Logger.getLogger()).toBeInstanceOf(Logger);\n        });\n\n        it('should create a singleton and return that', () => {\n            expect(Logger.getLogger()).toBe(Logger.getLogger());\n        });\n    });\n});\n"],"file":"Logger.spec.js"}