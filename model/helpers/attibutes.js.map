{"version":3,"sources":["../../../src/model/helpers/attibutes.js"],"names":["getValue","getAttributeValueAttributeName","createPropertyDefinitionsForAttributes","attributeProperties","getAttributeValues","setAttributeValues","setDirty","Object","keys","reduce","propertyDefinitions","attributeName","enumerable","get","attributeValues","filter","attributeValue","current","value","undefined","set","av","attribute","name","remainingAttributeValues","concat","id"],"mappings":";;;;;;AAAA;;AACA;;AAEA,IAAMA,WAAW,iBAAK,OAAL,CAAjB;AACA,IAAMC,iCAAiC,iBAAK,gBAAL,CAAvC;;AAEA,SAASC,sCAAT,CAAgDC,mBAAhD,EAAqEC,kBAArE,EAAyFC,kBAAzF,EAA6GC,QAA7G,EAAuH;AACnH,WAAOC,OACFC,IADE,CACGL,mBADH,EAEFM,MAFE,CAEK,UAACC,mBAAD,EAAsBC,aAAtB,EAAwC;AAC5CD,4BAAoBC,aAApB,IAAqC,EAAE;AACnCC,wBAAY,IADqB;AAEjCC,eAFiC,iBAE3B;AACF,oBAAMC,kBAAkBV,oBAAxB;;AAEA,uBAAOU,gBACFC,MADE,CACK;AAAA,2BAAkBd,+BAA+Be,cAA/B,MAAmDL,aAArE;AAAA,iBADL,EAEFF,MAFE,CAEK,UAACQ,OAAD,EAAUD,cAAV;AAAA,2BAA6BA,eAAeE,KAA5C;AAAA,iBAFL,EAEwDC,SAFxD,CAAP;AAGH,aARgC;AASjCC,eATiC,eAS7BF,KAT6B,EAStB;AACP,oBAAMF,iBAAiBZ,qBAClBW,MADkB,CACX;AAAA,2BAAMM,GAAGC,SAAH,CAAaC,IAAb,KAAsBZ,aAA5B;AAAA,iBADW,EAElBF,MAFkB,CAEX,UAACQ,OAAD,EAAUI,EAAV;AAAA,2BAAiBA,EAAjB;AAAA,iBAFW,EAEUF,SAFV,CAAvB;;AAIA,oBAAI,+BAAmBnB,SAASgB,cAAT,CAAnB,EAA6CE,KAA7C,CAAJ,EAAyD;AACrD,2BADqD,CAC7C;AACX;;AAED,oBAAIF,cAAJ,EAAoB;AAChB;AACA;AACA;AACA;AACA,wBAAI,yCAA6BE,KAA7B,CAAJ,EAAyC;AACrC,4BAAMM,2BAA2BpB,qBAAqBW,MAArB,CAA4B;AAAA,mCAAMM,OAAOL,cAAb;AAAA,yBAA5B,CAAjC;AACAX,2CAAmBmB,wBAAnB;AACH;;AAEDR,mCAAeE,KAAf,GAAuBA,KAAvB;AACH,iBAXD,MAWO;AACH;AACAb,uCAAmBD,qBAAqBqB,MAArB,CAA4B;AAC3CP,oCAD2C;AAE3CI,mCAAW;AACPI,gCAAIvB,oBAAoBQ,aAApB,EAAmCe,EADhC;AAEPH,kCAAMpB,oBAAoBQ,aAApB,EAAmCY;AAFlC;AAFgC,qBAA5B,CAAnB;AAOH;;AAED;AACAjB;AACH;AA1CgC,SAArC;;AA6CA,eAAOI,mBAAP;AACH,KAjDE,EAiDA,EAjDA,CAAP;AAkDH;;kBAEcR,sC","file":"attibutes.js","sourcesContent":["import { areDefinedAndEqual, isNullUndefinedOrEmptyString } from '../../lib/check';\nimport { pick } from '../../lib/utils';\n\nconst getValue = pick('value');\nconst getAttributeValueAttributeName = pick('attribute.name');\n\nfunction createPropertyDefinitionsForAttributes(attributeProperties, getAttributeValues, setAttributeValues, setDirty) {\n    return Object\n        .keys(attributeProperties)\n        .reduce((propertyDefinitions, attributeName) => {\n            propertyDefinitions[attributeName] = { // eslint-disable-line no-param-reassign\n                enumerable: true,\n                get() {\n                    const attributeValues = getAttributeValues();\n\n                    return attributeValues\n                        .filter(attributeValue => getAttributeValueAttributeName(attributeValue) === attributeName)\n                        .reduce((current, attributeValue) => attributeValue.value, undefined);\n                },\n                set(value) {\n                    const attributeValue = getAttributeValues()\n                        .filter(av => av.attribute.name === attributeName)\n                        .reduce((current, av) => av, undefined);\n\n                    if (areDefinedAndEqual(getValue(attributeValue), value)) {\n                        return; // Don't do anything if the value stayed the same\n                    }\n\n                    if (attributeValue) {\n                        // Remove the attributeValue from the array of attributeValues on the object\n                        // This is done because the server can not handle them properly when empty strings\n                        // as values are sent. It will properly remove the attributeValue\n                        // on the server side when they are not being send to the server at all.\n                        if (isNullUndefinedOrEmptyString(value)) {\n                            const remainingAttributeValues = getAttributeValues().filter(av => av !== attributeValue);\n                            setAttributeValues(remainingAttributeValues);\n                        }\n\n                        attributeValue.value = value;\n                    } else {\n                        // Add the new attribute value to the attributeValues collection\n                        setAttributeValues(getAttributeValues().concat({\n                            value,\n                            attribute: {\n                                id: attributeProperties[attributeName].id,\n                                name: attributeProperties[attributeName].name,\n                            },\n                        }));\n                    }\n\n                    // Set the model to be dirty\n                    setDirty();\n                },\n            };\n\n            return propertyDefinitions;\n        }, {});\n}\n\nexport default createPropertyDefinitionsForAttributes;\n"]}