{"version":3,"sources":["../../src/current-user/UserAuthorities.js"],"names":["auths","Symbol","UserAuthorities","authorities","Set","authority","has"],"mappings":";;;;;;;;;;;;;AAAA,IAAMA,KAAK,GAAGC,MAAM,CAAC,aAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;;IACMC,e;AACF;AACJ;AACA;AACA;AACA;AACI,6BAA8B;AAAA,QAAlBC,WAAkB,uEAAJ,EAAI;;AAAA;;AAC1B,SAAKH,KAAL,IAAc,IAAII,GAAJ,CAAQD,WAAR,CAAd;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;;wBACQE,S,EAAW;AACX,UAAI,KAAKL,KAAL,EAAYM,GAAZ,CAAgB,KAAhB,CAAJ,EAA4B;AACxB,eAAO,IAAP;AACH;;AACD,aAAO,KAAKN,KAAL,EAAYM,GAAZ,CAAgBD,SAAhB,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;;2BACkBF,W,EAAa;AACvB,aAAO,IAAID,eAAJ,CAAoBC,WAApB,CAAP;AACH;;;;;;eAGUD,e","sourcesContent":["const auths = Symbol('authorities')\n\n/**\n * Simple wrapper class for the user authorities list\n *\n * @memberof module:current-user\n */\nclass UserAuthorities {\n    /**\n     * Creates the UserAuthorities object based off the given set of the user's authorities.\n     *\n     * @param {string[]} authorities A set of the user's authorities.\n     */\n    constructor(authorities = []) {\n        this[auths] = new Set(authorities)\n    }\n\n    /**\n     * Checks if the given authority is in the user's authority list.\n     *\n     * If the user has the 'ALL' authority any request for a authority will return `true`.\n     *\n     * @param {string} authority The authority to check for\n     */\n    has(authority) {\n        if (this[auths].has('ALL')) {\n            return true\n        }\n        return this[auths].has(authority)\n    }\n\n    /**\n     * Factory method for a UserAuthorities instance\n     *\n     * @param {string[]} authorities A set of the user's authorities as recieved from the api.\n     */\n    static create(authorities) {\n        return new UserAuthorities(authorities)\n    }\n}\n\nexport default UserAuthorities\n"],"file":"UserAuthorities.js"}