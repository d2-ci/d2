{"version":3,"sources":["../../src/api/Api.js"],"names":["getMergeStrategyParam","mergeType","system","System","getSystem","version","Number","minor","getUrl","baseUrl","url","RegExp","test","urlParts","push","join","replace","Api","fetchImpl","fetch","bind","window","global","Error","defaultFetchOptions","mode","credentials","cache","defaultHeaders","unauthorizedCallback","headers","cb","data","options","request","requestUrl","payload","Headers","undefined","constructor","name","delete","has","get","toLocaleLowerCase","startsWith","String","set","JSON","stringify","useMergeStrategy","urlForUpdate","method","api","query","indexOf","substr","decodedURL","decodeURIComponent","err","Promise","reject","isEncoded","Array","isArray","filter","encodedFilters","map","split","encodeURIComponent","length","Object","keys","forEach","key","getOptions","mergeOptions","requestData","resultOptions","assign","header","body","requestOptions","parseResponseData","value","parse","e","resolve","then","response","ok","text","parsedResponseData","status","process","env","npm_lifecycle_event","console","warn","statusText","catch","error","getApi"],"mappings":"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","sourcesContent":["/**\n * @module api\n */\nimport 'isomorphic-fetch'\nimport { checkType } from '../lib/check'\nimport { customEncodeURIComponent } from '../lib/utils'\nimport System from '../system/System'\n\nfunction getMergeStrategyParam(mergeType = 'REPLACE') {\n    const system = System.getSystem()\n\n    if (system.version && Number(system.version.minor) <= 22) {\n        return `mergeStrategy=${mergeType}`\n    }\n\n    return `mergeMode=${mergeType}`\n}\n\nfunction getUrl(baseUrl, url) {\n    // If we are dealing with an absolute url use that instead\n    if (new RegExp('^(:?https?:)?//').test(url)) {\n        return url\n    }\n\n    const urlParts = []\n\n    if (baseUrl) {\n        urlParts.push(baseUrl)\n    }\n    urlParts.push(url)\n\n    return urlParts\n        .join('/')\n        .replace(new RegExp('(.(?:[^:]))//+', 'g'), '$1/')\n        .replace(new RegExp('/$'), '')\n}\n\n/**\n * @description\n * Used for interaction with the dhis2 api.\n *\n * This class is used as the backbone for d2 and handles all the interaction with the server. There is a singleton\n * available to be reused across your applications. The singleton can be grabbed from the d2 instance. The api methods all handle URL-encoding for you, so you can just pass them unencoded strings\n *\n * ```js\n * import { getInstance } from 'd2/lib/d2';\n *\n * getInstance()\n *  .then(d2 => {\n *      const api = d2.Api.getApi() // Returns the Api singleton.\n *\n *      api.get('resources');\n *  });\n * ```\n *\n * Uses {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API|Fetch} to do network requests.\n *\n * @memberof module:api\n */\nclass Api {\n    /**\n     * @constructor\n     *\n     * @param {Fetch} [fetchImpl] The fetch implementation to use. Can be used to pass a different implementation\n     * similar to the fetch Api. Will default to `window.fetch` in a browser context.\n     */\n    constructor(fetchImpl) {\n        // Optionally provide fetch to the constructor so it can be mocked during testing\n        if (typeof fetchImpl === 'function') {\n            this.fetch = fetchImpl.bind(\n                typeof window !== 'undefined' ? window : global\n            )\n        } else if (typeof fetch !== 'undefined') {\n            this.fetch = fetch.bind(\n                typeof window !== 'undefined' ? window : global\n            )\n        } else {\n            throw new Error(\n                'Failed to initialise D2 Api: No fetch implementation is available'\n            )\n        }\n\n        this.baseUrl = '/api'\n        this.defaultFetchOptions = {\n            mode: 'cors', // requests to different origins fail\n            credentials: 'include', // include cookies with same-origin requests\n            cache: 'default', // See https://fetch.spec.whatwg.org/#concept-request-cache-mode\n        }\n        this.defaultHeaders = {\n            'X-Requested-With': 'XMLHttpRequest',\n        }\n\n        this.unauthorizedCallback = null\n    }\n\n    /**\n     * Used for setting default headers that should be send with every request.\n     *\n     * @example\n     * const api = Api.getApi();\n     *\n     * api.setDefaultHeaders({\n     *  'x-requested-with': 'XMLHttpRequest', // Make sure the Api does not redirect when authorization is expired.\n     * });\n     *\n     * @param {Object.<string, string>} headers Default headers that should be set on every request.\n     */\n    setDefaultHeaders(headers) {\n        this.defaultHeaders = headers\n    }\n\n    /**\n     * When any request encounters a 401 - Unauthorized. This callback is called.\n     * Useful for when you want an session expiration-handler API-wide.\n     *\n     * @param {*} cb - Function to call when any request recieves a 401. Called with the response from the server.\n     */\n    setUnauthorizedCallback(cb) {\n        if (typeof cb !== 'function') {\n            throw new Error('Callback must be a function.')\n        }\n        this.unauthorizedCallback = cb\n    }\n\n    /**\n     * Performs a GET request.\n     *\n     * @param {string} url The url for the request, should be unencoded. Will return a rejected promise for malformed urls and urls that contain encoded query strings.\n     * @param {*} data Any data that should be sent with the request. For a GET request these are encoded and turned into\n     * query parameters. For POST and PUT requests it becomes the body.\n     * @param {Object.<string, any>} options The request options are passed as options to the fetch request.\n     * These options are passed as the {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * parameter to the fetch request.\n     *\n     * @returns {Promise.<*>} The response body.\n     */\n    get(url, data, options) {\n        return this.request('GET', getUrl(this.baseUrl, url), data, options)\n    }\n\n    /* eslint-disable complexity */\n    /**\n     * Performs a POST request.\n     *\n     * @param {string} url The url for the request\n     * @param {*} data Any data that should be send with the request this becomes the body for the POST request\n     * @param {Object.<string, any>} options The request options are passed as options to the fetch request.\n     * These options are passed as the {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * parameter to the fetch request.\n     *\n     * @returns {Promise.<*>} The response body.\n     */\n    post(url, data, options = {}) {\n        const requestUrl = getUrl(this.baseUrl, url)\n        let payload = data\n\n        // Ensure that headers are defined and are treated without case sensitivity\n        options.headers = new Headers(options.headers || {})\n\n        if (data !== undefined) {\n            if (data.constructor.name === 'FormData') {\n                // Ensure that the browser will set the correct Content-Type header for FormData, including boundary\n                options.headers.delete('Content-Type')\n                payload = data\n            } else if (\n                options.headers.has('Content-Type') &&\n                options.headers\n                    .get('Content-Type')\n                    .toLocaleLowerCase()\n                    .startsWith('text/')\n            ) {\n                payload = String(data)\n            } else {\n                // Send JSON data by default\n                options.headers.set('Content-Type', 'application/json')\n                payload = JSON.stringify(data)\n            }\n        }\n\n        return this.request('POST', requestUrl, payload, options)\n    }\n\n    /**\n     * Performs a DELETE request.\n     *\n     * @param {string} url The url for the request\n     * @param {Object.<string, any>} options The request options are passed as options to the fetch request.\n     * These options are passed as the {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * parameter to the fetch request.\n     *\n     * @returns {Promise.<*>} The response body.\n     */\n    /* eslint-enable complexity */\n    delete(url, options) {\n        return this.request(\n            'DELETE',\n            getUrl(this.baseUrl, url),\n            undefined,\n            options\n        )\n    }\n\n    /**\n     * Perform a PUT request.\n     *\n     * @param {string} url The url for the request\n     * @param {*} data Any data that should be send with the request. This becomes the body of the PUT request.\n     * @param {boolean} [useMergeStrategy=false]\n     *\n     * @returns {Promise.<*>} The response body.\n     */\n    update(url, data, useMergeStrategy = false) {\n        // Since we are currently using PUT to save the full state back, we have to use mergeMode=REPLACE\n        // to clear out existing values\n        const urlForUpdate =\n            useMergeStrategy === true\n                ? `${url}?${getMergeStrategyParam()}`\n                : url\n        if (typeof data === 'string') {\n            return this.request(\n                'PUT',\n                getUrl(this.baseUrl, urlForUpdate),\n                String(data),\n                { headers: new Headers({ 'Content-Type': 'text/plain' }) }\n            )\n        }\n\n        return this.request(\n            'PUT',\n            getUrl(this.baseUrl, urlForUpdate),\n            JSON.stringify(data)\n        )\n    }\n\n    /**\n     * Perform a PATCH request.\n     *\n     * @param {string} url The url for the request\n     * @param {*} data Any data that should be send with the request. This becomes the body of the PATCH request.\n     *\n     * @returns {Promise.<*>} The response body.\n     */\n    patch(url, data) {\n        return this.request(\n            'PATCH',\n            getUrl(this.baseUrl, url),\n            JSON.stringify(data)\n        )\n    }\n\n    /**\n     * General purpose request function for making http requests.\n     *\n     * The more specific functions like `delete`, `post` and `get`, utilize this function to make the requests.\n     *\n     * @param {string} method The HTTP request method (e.g. POST/GET/PATCH)\n     * @param {string} url The url for the request\n     * @param {*} data Any data that should be send with the request. For a GET request these are turned into\n     * query parameters. For POST and PUT requests it becomes the body.\n     * @param {Object.<string, any>} options The request options are passed as options to the fetch request.\n     * These options are passed as the {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * parameter to the fetch request.\n     *\n     * @returns {Promise.<*>} The response body.\n     */\n    /* eslint-disable complexity */\n    request(method, url, data, options = {}) {\n        checkType(method, 'string', 'Request type')\n        checkType(url, 'string', 'Url')\n        const api = this\n        let requestUrl = url\n        let query = ''\n\n        if (requestUrl.indexOf('?') !== -1) {\n            query = requestUrl.substr(requestUrl.indexOf('?') + 1)\n            requestUrl = requestUrl.substr(0, requestUrl.indexOf('?'))\n        }\n\n        // Encode existing query parameters, since tomcat does not accept unencoded brackets. Throw\n        // an error if they're already encoded to prevent double encoding.\n        if (query) {\n            let decodedURL\n\n            try {\n                decodedURL = decodeURIComponent(query)\n            } catch (err) {\n                return Promise.reject(\n                    new Error('Query parameters in URL are invalid')\n                )\n            }\n\n            const isEncoded = query !== decodedURL\n\n            if (isEncoded) {\n                return Promise.reject(\n                    new Error(\n                        'Cannot process URL-encoded URLs, pass an unencoded URL'\n                    )\n                )\n            }\n\n            query = customEncodeURIComponent(query)\n        }\n\n        // Transfer filter properties from the data object to the query string\n        if (data && Array.isArray(data.filter)) {\n            const encodedFilters = data.filter.map(filter =>\n                filter.split(':').map(encodeURIComponent).join(':')\n            )\n\n            query = `${query}${\n                query.length ? '&' : ''\n            }filter=${encodedFilters.join('&filter=')}`\n            delete data.filter\n        }\n\n        // When using the GET method, transform the data object to query parameters\n        if (data && method === 'GET') {\n            Object.keys(data).forEach(key => {\n                query =\n                    `${query}${query.length > 0 ? '&' : ''}` +\n                    `${encodeURIComponent(key)}=${encodeURIComponent(\n                        data[key]\n                    )}`\n            })\n        }\n\n        function getOptions(defaultHeaders, mergeOptions, requestData) {\n            const resultOptions = Object.assign(\n                {},\n                api.defaultFetchOptions,\n                mergeOptions\n            )\n            const headers = new Headers(mergeOptions.headers || {})\n\n            Object.keys(defaultHeaders)\n                .filter(header => !headers.get(header))\n                .forEach(header => headers.set(header, defaultHeaders[header]))\n\n            resultOptions.method = method\n\n            // Only set content type when there is data to send\n            // GET requests and requests without data do not need a Content-Type header\n            // 0 and false are valid requestData values and therefore should have a content type\n            if (\n                resultOptions.method === 'GET' ||\n                (!requestData && requestData !== 0 && requestData !== false)\n            ) {\n                headers.delete('Content-Type')\n            } else if (requestData) {\n                if (data.constructor.name === 'FormData') {\n                    headers.delete('Content-Type')\n                } else if (!headers.get('Content-Type')) {\n                    headers.set('Content-Type', 'application/json')\n                }\n                resultOptions.body = requestData\n            }\n\n            resultOptions.headers = headers\n            return resultOptions\n        }\n\n        if (query.length) {\n            requestUrl = `${requestUrl}?${query}`\n        }\n        const requestOptions = getOptions(this.defaultHeaders, options, data)\n\n        // If the provided value is valid JSON, return the parsed JSON object. If not, return the raw value as is.\n        function parseResponseData(value) {\n            try {\n                return JSON.parse(value)\n            } catch (e) {\n                return value\n            }\n        }\n\n        return new Promise((resolve, reject) => {\n            // fetch returns a promise that will resolve with any response received from the server\n            // It will be rejected ONLY if no response is received from the server, i.e. because there's no internet\n            this.fetch(requestUrl, requestOptions)\n                .then(response => {\n                    // If the request failed, response.ok will be false and response.status will be the status code\n                    if (response.ok) {\n                        response\n                            .text()\n                            .then(text => resolve(parseResponseData(text)))\n                    } else {\n                        response.text().then(text => {\n                            const parsedResponseData = parseResponseData(text)\n                            if (response.status === 401) {\n                                const request = {\n                                    method,\n                                    url,\n                                    data,\n                                    options,\n                                }\n                                if (this.unauthorizedCallback) {\n                                    this.unauthorizedCallback(\n                                        request,\n                                        parsedResponseData\n                                    )\n                                }\n                            }\n                            if (\n                                !process.env ||\n                                process.env.npm_lifecycle_event !== 'test'\n                            ) {\n                                // eslint-disable-next-line\n                                console.warn(\n                                    `API request failed with status ${response.status} ${response.statusText}\\n`,\n                                    `Request: ${requestOptions.method} ${requestUrl}`\n                                )\n                            }\n                            reject(parsedResponseData)\n                        })\n                    }\n                })\n                .catch(err => {\n                    // It's not usually possible to get much info about the cause of the error programmatically, but\n                    // the user can check the browser console for more info\n                    if (\n                        !process.env ||\n                        process.env.npm_lifecycle_event !== 'test'\n                    ) {\n                        console.error('Server connection error:', err) // eslint-disable-line\n                    }\n\n                    reject(\n                        `Server connection failed for API request: ${requestOptions.method} ${requestUrl}`\n                    )\n                })\n        })\n    }\n    /* eslint-enable complexity */\n\n    /**\n     * Sets the baseUrl that should be used for the api.\n     *\n     * When working against the dhis2 demo instance at {@link https://play.dhis2.org/demo} the\n     * baseUrl would be set as `https://play.dhis2.org/demo/api`.\n     *\n     * This method is used when calling the `d2.init` method with the `baseUrl` config property\n     * to configure the Api singleton.\n     *\n     * @param {string} baseUrl The base url to be used for the API.\n     *\n     * @returns {this} Itself for chaining purposes\n     */\n    setBaseUrl(baseUrl) {\n        checkType(baseUrl, 'string', 'Base url')\n\n        this.baseUrl = baseUrl\n\n        return this\n    }\n}\n\n/**\n * Retrieve the Api singleton or create one.\n *\n * When called for the first time it creates and Api singleton object.\n * Any subsequent calls will return the previously created singleton.\n *\n * @returns {Api} The Api singleton.\n * @memberof module:api~Api\n */\nfunction getApi() {\n    if (getApi.api) {\n        return getApi.api\n    }\n    return (getApi.api = new Api())\n}\n\nApi.getApi = getApi\n\nexport default Api\n"],"file":"Api.js"}