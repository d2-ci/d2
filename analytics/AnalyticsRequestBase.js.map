{"version":3,"sources":["../../src/analytics/AnalyticsRequestBase.js"],"names":["AnalyticsRequestBase","endPoint","format","path","program","dimensions","filters","parameters","toLowerCase","options","sorted","sort","a","b","dimension","encodedDimensions","map","items","Array","isArray","length","join","filter","e","encodedFilters"],"mappings":"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","file":"AnalyticsRequestBase.js","sourcesContent":["import { cloneDeep } from 'lodash';\nimport { customEncodeURIComponent } from '../lib/utils';\n\n/**\n * @private\n * @description\n * Class for constructing a request object to use for communicating with the analytics API endpoint.\n *\n * @param {!Object} options Object with analytics request options\n *\n * @requires module:lib/utils\n *\n * @memberof module:analytics\n * @abstract\n */\nclass AnalyticsRequestBase {\n    constructor({\n        endPoint = 'analytics',\n        format = 'json',\n        path,\n        program,\n        dimensions = [],\n        filters = [],\n        parameters = {},\n    } = {}) {\n        this.endPoint = endPoint;\n        this.format = format.toLowerCase();\n        this.path = path;\n        this.program = program;\n\n        this.dimensions = dimensions;\n        this.filters = filters;\n        this.parameters = { ...parameters };\n    }\n\n    /**\n     * @private\n     * @description\n     * Builds the URL to pass to the Api object.\n     * The URL includes the dimension(s) parameters.\n     * Used internally.\n     *\n     * @param {Object} options Optional configurations\n     *\n     * @returns {String} URL URL for the request with dimensions included\n     */\n    buildUrl(options) {\n        // at least 1 dimension is required\n        let dimensions = this.dimensions;\n\n        if (options && options.sorted) {\n            dimensions = cloneDeep(dimensions);\n\n            dimensions.sort((a, b) => {\n                if (a.dimension < b.dimension) {\n                    return -1;\n                }\n                return a.dimension === b.dimension ? 0 : 1;\n            });\n        }\n\n        const encodedDimensions = dimensions.map(({ dimension, items }) => {\n            if (Array.isArray(items) && items.length) {\n                if (options && options.sorted) {\n                    items.sort();\n                }\n\n                return `${dimension}:${items.map(customEncodeURIComponent).join(';')}`;\n            }\n\n            return dimension;\n        });\n\n        const endPoint = [this.endPoint, this.path, this.program].filter(e => !!e).join('/');\n\n        return (\n            `${endPoint}.${this.format}?dimension=${encodedDimensions.join('&dimension=')}`\n        );\n    }\n\n    /**\n     * @private\n     * @description\n     * Builds the query object passed to the API instance.\n     * The object includes all the parameters added via with*() methods\n     * and the filters added via addDataFilter(), addPeriodFilter(), addOrgUnitFilter(), addFilter().\n     * The filters are handled by the API instance when building the final URL.\n     * Used internally.\n     *\n     * @param {Object} options Optional configurations\n     *\n     * @returns {Object} Query parameters\n     */\n    buildQuery(options) {\n        let filters = this.filters;\n\n        if (options && options.sorted) {\n            filters = cloneDeep(filters);\n\n            filters.sort((a, b) => {\n                if (a.dimension < b.dimension) {\n                    return -1;\n                }\n                return a.dimension === b.dimension ? 0 : 1;\n            });\n        }\n\n        const encodedFilters = filters.map(({ dimension, items }) => {\n            if (Array.isArray(items) && items.length) {\n                if (options && options.sorted) {\n                    items.sort();\n                }\n\n                return `${dimension}:${items.map(customEncodeURIComponent).join(';')}`;\n            }\n\n            return dimension;\n        });\n\n        if (filters.length) {\n            this.parameters.filter = encodedFilters;\n        }\n\n        return this.parameters;\n    }\n}\n\nexport default AnalyticsRequestBase;\n"]}