{"version":3,"sources":["../../../../src/period/generators/__tests__/financial-july_spec.js"],"names":["describe","it","expect","toThrowError","Date","toHaveLength","tenYearlyPeriods","toEqual","endDate","startDate","name","id","fiveYearlyPeriods","Infinity","getFullYear"],"mappings":"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","sourcesContent":["import { generateFinancialJulyPeriodsUpToYear } from '../financial-july';\n\ndescribe('Financial July period', () => {\n    describe('generateFinancialJulyPeriodsUpToYear()', () => {\n        it('should not allow years before the year zero', () => {\n            expect(() => generateFinancialJulyPeriodsUpToYear(-10)).toThrowError();\n        });\n\n        it('should throw an error when passing a Date object', () => {\n            expect(() => generateFinancialJulyPeriodsUpToYear(new Date())).toThrowError();\n        });\n\n        it('should generate 10 yearly periods when no numberOfYears was passed', () => {\n            expect(generateFinancialJulyPeriodsUpToYear(2017)).toHaveLength(10);\n        });\n\n        it('should generate periods for 10 years with the last one being the current year', () => {\n            const tenYearlyPeriods = generateFinancialJulyPeriodsUpToYear(2017);\n\n            expect(tenYearlyPeriods).toEqual([\n                {\n                    endDate: '2009-06-30',\n                    startDate: '2008-07-01',\n                    name: 'July 2008 - June 2009',\n                    id: '2008July',\n                }, {\n                    endDate: '2010-06-30',\n                    startDate: '2009-07-01',\n                    name: 'July 2009 - June 2010',\n                    id: '2009July',\n                }, {\n                    endDate: '2011-06-30',\n                    startDate: '2010-07-01',\n                    name: 'July 2010 - June 2011',\n                    id: '2010July',\n                }, {\n                    endDate: '2012-06-30',\n                    startDate: '2011-07-01',\n                    name: 'July 2011 - June 2012',\n                    id: '2011July',\n                }, {\n                    endDate: '2013-06-30',\n                    startDate: '2012-07-01',\n                    name: 'July 2012 - June 2013',\n                    id: '2012July',\n                }, {\n                    endDate: '2014-06-30',\n                    startDate: '2013-07-01',\n                    name: 'July 2013 - June 2014',\n                    id: '2013July',\n                }, {\n                    endDate: '2015-06-30',\n                    startDate: '2014-07-01',\n                    name: 'July 2014 - June 2015',\n                    id: '2014July',\n                }, {\n                    endDate: '2016-06-30',\n                    startDate: '2015-07-01',\n                    name: 'July 2015 - June 2016',\n                    id: '2015July',\n                }, {\n                    endDate: '2017-06-30',\n                    startDate: '2016-07-01',\n                    name: 'July 2016 - June 2017',\n                    id: '2016July',\n                }, {\n                    endDate: '2018-06-30',\n                    startDate: '2017-07-01',\n                    name: 'July 2017 - June 2018',\n                    id: '2017July',\n                },\n            ]);\n        });\n\n        it('should respect the number of years parameter and generate the correct number of years', () => {\n            const fiveYearlyPeriods = generateFinancialJulyPeriodsUpToYear(2017, 5);\n\n            expect(fiveYearlyPeriods).toEqual([\n                {\n                    endDate: '2014-06-30',\n                    startDate: '2013-07-01',\n                    name: 'July 2013 - June 2014',\n                    id: '2013July',\n                }, {\n                    endDate: '2015-06-30',\n                    startDate: '2014-07-01',\n                    name: 'July 2014 - June 2015',\n                    id: '2014July',\n                }, {\n                    endDate: '2016-06-30',\n                    startDate: '2015-07-01',\n                    name: 'July 2015 - June 2016',\n                    id: '2015July',\n                }, {\n                    endDate: '2017-06-30',\n                    startDate: '2016-07-01',\n                    name: 'July 2016 - June 2017',\n                    id: '2016July',\n                }, {\n                    endDate: '2018-06-30',\n                    startDate: '2017-07-01',\n                    name: 'July 2017 - June 2018',\n                    id: '2017July',\n                },\n            ]);\n        });\n\n        it('should throw an error when the numberOfYears is not a positive integer', () => {\n            expect(() => generateFinancialJulyPeriodsUpToYear(2017, 'a')).toThrowError();\n            expect(() => generateFinancialJulyPeriodsUpToYear(2017, 1.2)).toThrowError();\n            expect(() => generateFinancialJulyPeriodsUpToYear(2017, true)).toThrowError();\n            expect(() => generateFinancialJulyPeriodsUpToYear(2017, -1)).toThrowError();\n            expect(() => generateFinancialJulyPeriodsUpToYear(2017, 0)).toThrowError();\n            expect(() => generateFinancialJulyPeriodsUpToYear(2017, Infinity)).toThrowError();\n        });\n\n        it('should generate the yearly periods for 2021 and 2022', () => {\n            const fiveYearlyPeriods = generateFinancialJulyPeriodsUpToYear(2022, 2);\n\n            expect(fiveYearlyPeriods).toEqual([\n                {\n                    endDate: '2022-06-30',\n                    startDate: '2021-07-01',\n                    name: 'July 2021 - June 2022',\n                    id: '2021July',\n                }, {\n                    endDate: '2023-06-30',\n                    startDate: '2022-07-01',\n                    name: 'July 2022 - June 2023',\n                    id: '2022July',\n                },\n            ]);\n        });\n\n        it('should generate use the current year when no year has been given', () => {\n            expect(generateFinancialJulyPeriodsUpToYear()).toEqual(generateFinancialJulyPeriodsUpToYear(new Date().getFullYear()));\n        });\n    });\n});\n"],"file":"financial-july_spec.js"}