{"version":3,"sources":["../../../src/model/__tests__/Filter.spec.js"],"names":["describe","it","expect","Filter","getFilter","toBeInstanceOf","mockModelDefinition","filter","addFilterCallback","beforeEach","jest","fn","mockReturnValue","comparator","toBeDefined","toBe","propertyName","like","Function","ilike","equals","token","nToken","filterValue","toThrowError","on","toHaveBeenCalled","getQueryParamFormat"],"mappings":"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","sourcesContent":["import Filter from '../Filter';\n\ndescribe('Filter', () => {\n    describe('getFilter', () => {\n        it('should create an instance of filter', () => {\n            expect(Filter.getFilter()).toBeInstanceOf(Filter);\n        });\n    });\n\n    describe('instance', () => {\n        let mockModelDefinition;\n        let filter;\n        let addFilterCallback;\n\n        beforeEach(() => {\n            mockModelDefinition = {};\n\n            addFilterCallback = jest.fn()\n                .mockReturnValue(mockModelDefinition);\n            filter = new Filter(addFilterCallback);\n        });\n\n        it('should have a comparator', () => {\n            expect(filter.comparator).toBeDefined();\n        });\n\n        it('the comparator should default to like', () => {\n            expect(filter.comparator).toBe('like');\n        });\n\n        it('should set the default properyName to name', () => {\n            expect(filter.propertyName).toBe('name');\n        });\n\n        describe('comparators', () => {\n            it('should have an like  method', () => {\n                expect(filter.like).toBeInstanceOf(Function);\n            });\n\n            it('should have an ilike method', () => {\n                expect(filter.ilike).toBeInstanceOf(Function);\n            });\n\n            it('should have an equals method', () => {\n                expect(filter.equals).toBeInstanceOf(Function);\n            });\n\n            it('should have a token method', () => {\n                expect(filter.token).toBeInstanceOf(Function);\n            });\n\n            it('should have a nToken method', () => {\n                expect(filter.nToken).toBeInstanceOf(Function);\n            });\n\n            it('should set the correct comparator', () => {\n                filter.equals('ANC');\n\n                expect(filter.comparator).toBe('eq');\n            });\n\n            it('should set the passed filterValue onto the filter', () => {\n                filter.equals('ANC');\n\n                expect(filter.filterValue).toBe('ANC');\n            });\n\n            it('should throw an error when no filterValue is provided', () => {\n                expect(() => filter.equals()).toThrowError('filterValue should be provided');\n            });\n\n            it('should return the modelDefinition', () => {\n                expect(filter.equals('ANC')).toBe(mockModelDefinition);\n            });\n\n            it('should call the filter callback with the new filter', () => {\n                filter.on('year').equals('2013');\n\n                expect(addFilterCallback).toHaveBeenCalled();\n            });\n        });\n\n        describe('on', () => {\n            it('should be a function', () => {\n                expect(filter.on).toBeInstanceOf(Function);\n            });\n\n            it('should return itself for chaining', () => {\n                expect(filter.on('name')).toBe(filter);\n            });\n\n            it('should throw an error when the propertyName is undefined', () => {\n                expect(() => filter.on()).toThrowError('Property name to filter on should be provided');\n            });\n\n            it('should set the propertyName onto the filter', () => {\n                filter.on('year');\n\n                expect(filter.propertyName).toBe('year');\n            });\n        });\n\n        describe('getQueryParamFormat', () => {\n            beforeEach(() => {\n                filter.on('code').equals('Partner_343');\n            });\n\n            it('should be a function', () => {\n                expect(filter.getQueryParamFormat).toBeInstanceOf(Function);\n            });\n\n            it('should return the filter value in the expected query format', () => {\n                expect(filter.getQueryParamFormat()).toBe('code:eq:Partner_343');\n            });\n        });\n    });\n});\n"],"file":"Filter.spec.js"}