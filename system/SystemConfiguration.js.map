{"version":3,"sources":["../../src/system/SystemConfiguration.js"],"names":["SystemConfiguration","api","Api","getApi","configuration","undefined","configPromise","ignoreCache","get","then","key","all","config","hasOwnProperty","Promise","resolve","reject","value","that","req","delete","join","post","trim","split","dataType","contentType","catch"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;IACMA,mB;AACF,iCAAgC;AAAA,QAApBC,GAAoB,uEAAdC,aAAIC,MAAJ,EAAc;;AAAA;;AAC5B,SAAKF,GAAL,GAAWA,GAAX;AAEA,SAAKG,aAAL,GAAqBC,SAArB;AACA,SAAKC,aAAL,GAAqB,IAArB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;;wBACQC,W,EAAa;AAAA;;AACb,UAAI,KAAKD,aAAL,KAAuB,IAAvB,IAA+BC,WAAW,KAAK,IAAnD,EAAyD;AACrD,aAAKD,aAAL,GAAqB,KAAKL,GAAL,CAChBO,GADgB,CACZ,eADY,EAEhBC,IAFgB,CAEX,UAAAL,aAAa,EAAI;AACnB,UAAA,KAAI,CAACA,aAAL,GAAqBA,aAArB;AACA,iBAAO,KAAI,CAACA,aAAZ;AACH,SALgB,CAArB;AAMH;;AAED,aAAO,KAAKE,aAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;wBACQI,G,EAAKH,W,EAAa;AAClB,aAAO,KAAKI,GAAL,CAASJ,WAAT,EAAsBE,IAAtB,CAA2B,UAAAG,MAAM,EAAI;AACxC,YAAIA,MAAM,CAACC,cAAP,CAAsBH,GAAtB,CAAJ,EAAgC;AAC5B,iBAAOI,OAAO,CAACC,OAAR,CAAgBH,MAAM,CAACF,GAAD,CAAtB,CAAP;AACH;;AAED,eAAOI,OAAO,CAACE,MAAR,kCAAyCN,GAAzC,EAAP;AACH,OANM,CAAP;AAOH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI;;;;wBACIA,G,EAAKO,K,EAAO;AACZ,UAAMC,IAAI,GAAG,IAAb;AACA,UAAIC,GAAJ;;AAEA,UAAIT,GAAG,KAAK,UAAZ,EAAwB;AACpB,eAAOI,OAAO,CAACE,MAAR,CAAe,gCAAf,CAAP;AACH;;AACD,UACI,CAACN,GAAG,KAAK,oBAAR,IACGA,GAAG,KAAK,yBADX,IAEGA,GAAG,KAAK,sBAFZ,MAGCO,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,IAH/B,CADJ,EAKE;AACE;AACAE,QAAAA,GAAG,GAAG,KAAKlB,GAAL,CAASmB,MAAT,CAAgB,CAAC,eAAD,EAAkBV,GAAlB,EAAuBW,IAAvB,CAA4B,GAA5B,CAAhB,CAAN;AACH,OARD,MAQO,IAAIX,GAAG,KAAK,eAAZ,EAA6B;AAChC;AACAS,QAAAA,GAAG,GAAG,KAAKlB,GAAL,CAASqB,IAAT,CACF,CAAC,eAAD,EAAkBZ,GAAlB,EAAuBW,IAAvB,CAA4B,GAA5B,CADE,EAEFJ,KAAK,CAACM,IAAN,GAAaC,KAAb,CAAmB,IAAnB,CAFE,CAAN;AAIH,OANM,MAMA;AACHL,QAAAA,GAAG,GAAG,KAAKlB,GAAL,CAASqB,IAAT,CAAc,CAAC,eAAD,EAAkBZ,GAAlB,EAAuBW,IAAvB,CAA4B,GAA5B,CAAd,EAAgDJ,KAAhD,EAAuD;AACzDQ,UAAAA,QAAQ,EAAE,MAD+C;AAEzDC,UAAAA,WAAW,EAAE;AAF4C,SAAvD,CAAN;AAIH;;AAED,aAAOP,GAAG,CACLV,IADE,CACG,YAAM;AACR;AACA;AACAS,QAAAA,IAAI,CAACd,aAAL,GAAqBC,SAArB;AACA,eAAOS,OAAO,CAACC,OAAR,EAAP;AACH,OANE,EAOFY,KAPE,CAOI;AAAA,eAAMb,OAAO,CAACE,MAAR,sCAA6CN,GAA7C,EAAN;AAAA,OAPJ,CAAP;AAQH;AACD;;;;;;;eAGWV,mB","sourcesContent":["import Api from '../api/Api'\n\n/**\n * Handles communication with the configuration endpoint. Can be used to get or set configuration options.\n *\n * @memberof module:system\n */\nclass SystemConfiguration {\n    constructor(api = Api.getApi()) {\n        this.api = api\n\n        this.configuration = undefined\n        this.configPromise = null\n    }\n\n    /**\n     * Fetches all system configuration settings from the API and caches them so that future\n     * calls to this function won't call the API again.\n     *\n     * @param {boolean} [ignoreCache=false] If set to true, calls the API regardless of cache status\n     * @returns {Promise} Promise that resolves with all the individual configuration options from the api.\n     */\n    all(ignoreCache) {\n        if (this.configPromise === null || ignoreCache === true) {\n            this.configPromise = this.api\n                .get('configuration')\n                .then(configuration => {\n                    this.configuration = configuration\n                    return this.configuration\n                })\n        }\n\n        return this.configPromise\n    }\n\n    /**\n     * Returns the value of the specified configuration option.\n     *\n     * This is a convenience method that works exactly the same as calling `configuration.all()[name]`.\n     *\n     * @param key {String}\n     * @param {boolean} [ignoreCache=false] If set to true, calls the API regardless of cache status\n     * @returns {Promise}\n     */\n    get(key, ignoreCache) {\n        return this.all(ignoreCache).then(config => {\n            if (config.hasOwnProperty(key)) {\n                return Promise.resolve(config[key])\n            }\n\n            return Promise.reject(`Unknown config option: ${key}`)\n        })\n    }\n\n    /**\n     * Send a query to the API to change the value of a configuration key to the specified value.\n     *\n     * @param key {String}\n     * @param value {String|null}\n     * @returns {Promise}\n     */\n    /* eslint-disable complexity */\n    set(key, value) {\n        const that = this\n        let req\n\n        if (key === 'systemId') {\n            return Promise.reject(\"The system ID can't be changed\")\n        }\n        if (\n            (key === 'feedbackRecipients' ||\n                key === 'selfRegistrationOrgUnit' ||\n                key === 'selfRegistrationRole') &&\n            (value === 'null' || value === null)\n        ) {\n            // Only valid UIDs are accepted when POST'ing, so we have to use DELETE in stead of POST'ing a null value.\n            req = this.api.delete(['configuration', key].join('/'))\n        } else if (key === 'corsWhitelist') {\n            // The corsWhitelist endpoint expects a JSON array (of URLs), while here value is expected to be a string.\n            req = this.api.post(\n                ['configuration', key].join('/'),\n                value.trim().split('\\n')\n            )\n        } else {\n            req = this.api.post(['configuration', key].join('/'), value, {\n                dataType: 'text',\n                contentType: 'text/plain',\n            })\n        }\n\n        return req\n            .then(() => {\n                // Ideally we'd update the cache here, but doing so requires another trip to the server\n                // For now, just bust the cache to ensure it's not incorrect\n                that.configuration = undefined\n                return Promise.resolve()\n            })\n            .catch(() => Promise.reject(`No configuration found for ${key}`))\n    }\n    /* eslint-enable complexity */\n}\n\nexport default SystemConfiguration\n"],"file":"SystemConfiguration.js"}