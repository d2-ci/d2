{"version":3,"sources":["../../src/__tests__/Config_spec.js"],"names":["describe","mockD2","mockApi","beforeEach","setBaseUrl","jest","fn","setUnauthorizedCallback","setDefaultHeaders","model","ModelDefinition","ModelDefinitions","getModelDefinitions","Api","getApi","mockReturnValue","it","expect","toThrowError","Config","processConfigForD2","baseUrl","toBeCalledWith","unauthorizedCb","headers","processPreInitConfig"],"mappings":";;AAAA;;;;AAEAA,QAAQ,CAAC,QAAD,EAAW,YAAM;AACrB,MAAIC,MAAJ;AACA,MAAIC,OAAJ;AAEAC,EAAAA,UAAU,CAAC,YAAM;AACbD,IAAAA,OAAO,GAAG;AACNE,MAAAA,UAAU,EAAEC,IAAI,CAACC,EAAL,EADN;AAENC,MAAAA,uBAAuB,EAAEF,IAAI,CAACC,EAAL,EAFnB;AAGNE,MAAAA,iBAAiB,EAAEH,IAAI,CAACC,EAAL;AAHb,KAAV;AAKAL,IAAAA,MAAM,GAAG;AACLQ,MAAAA,KAAK,EAAE;AACHC,QAAAA,eAAe,EAAE,SAASA,eAAT,GAA2B,CAAE,CAD3C;AAEHC,QAAAA,gBAAgB,EAAE;AACdC,UAAAA,mBAAmB,EAAEP,IAAI,CAACC,EAAL;AADP;AAFf,OADF;AAOLO,MAAAA,GAAG,EAAE;AACDC,QAAAA,MAAM,EAAET,IAAI,CAACC,EAAL,GAAUS,eAAV,CAA0Bb,OAA1B;AADP;AAPA,KAAT;AAWH,GAjBS,CAAV;AAmBAc,EAAAA,EAAE,CAAC,2CAAD,EAA8C,YAAM;AAClDC,IAAAA,MAAM,CAAC;AAAA,aAAM,sBAAN;AAAA,KAAD,CAAN,CAAuBC,YAAvB,GADkD,CACV;AAC3C,GAFC,CAAF;AAIAlB,EAAAA,QAAQ,CAAC,oBAAD,EAAuB,YAAM;AACjCgB,IAAAA,EAAE,CAAC,0CAAD,EAA6C,YAAM;AACjDG,sBAAOC,kBAAP,CAA0B;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAA1B,EAAqDpB,MAArD;;AAEAgB,MAAAA,MAAM,CAACf,OAAO,CAACE,UAAT,CAAN,CAA2BkB,cAA3B,CAA0C,YAA1C;AACH,KAJC,CAAF;AAMAN,IAAAA,EAAE,CAAC,sDAAD,EAAyD,YAAM;AAC7DG,sBAAOC,kBAAP,CAA0B,EAA1B,EAA8BnB,MAA9B;;AAEAgB,MAAAA,MAAM,CAACf,OAAO,CAACE,UAAT,CAAN,CAA2BkB,cAA3B,CAA0C,MAA1C;AACH,KAJC,CAAF;AAMAN,IAAAA,EAAE,CAAC,kDAAD,EAAqD,YAAM;AACzD,UAAMO,cAAc,GAAG,SAAjBA,cAAiB,GAAM,CAAE,CAA/B;;AACAJ,sBAAOC,kBAAP,CAA0B;AAAEG,QAAAA,cAAc,EAAdA;AAAF,OAA1B,EAA8CtB,MAA9C;;AACAgB,MAAAA,MAAM,CAACf,OAAO,CAACK,uBAAT,CAAN,CAAwCe,cAAxC,CAAuDC,cAAvD;AACH,KAJC,CAAF;AAKH,GAlBO,CAAR;AAoBAvB,EAAAA,QAAQ,CAAC,sBAAD,EAAyB,YAAM;AACnCgB,IAAAA,EAAE,CAAC,oBAAD,EAAuB,YAAM;AAC3B,UAAMQ,OAAO,GAAG;AAAE,4BAAoB;AAAtB,OAAhB;;AACAL,sBAAOM,oBAAP,CAA4B;AAAED,QAAAA,OAAO,EAAPA;AAAF,OAA5B,EAAyCtB,OAAzC;;AACAe,MAAAA,MAAM,CAACf,OAAO,CAACM,iBAAT,CAAN,CAAkCc,cAAlC,CAAiDE,OAAjD;AACH,KAJC,CAAF;AAMAR,IAAAA,EAAE,CAAC,oBAAD,EAAuB,YAAM;AAC3BG,sBAAOM,oBAAP,CAA4B;AAAEJ,QAAAA,OAAO,EAAE;AAAX,OAA5B,EAAuDnB,OAAvD;;AACAe,MAAAA,MAAM,CAACf,OAAO,CAACE,UAAT,CAAN,CAA2BkB,cAA3B,CAA0C,YAA1C;AACH,KAHC,CAAF;AAIH,GAXO,CAAR;AAYH,CA3DO,CAAR","sourcesContent":["import Config from '../../src/config';\n\ndescribe('Config', () => {\n    let mockD2;\n    let mockApi;\n\n    beforeEach(() => {\n        mockApi = {\n            setBaseUrl: jest.fn(),\n            setUnauthorizedCallback: jest.fn(),\n            setDefaultHeaders: jest.fn(),\n        };\n        mockD2 = {\n            model: {\n                ModelDefinition: function ModelDefinition() {},\n                ModelDefinitions: {\n                    getModelDefinitions: jest.fn(),\n                },\n            },\n            Api: {\n                getApi: jest.fn().mockReturnValue(mockApi),\n            },\n        };\n    });\n\n    it('should not be allowed to call as function', () => {\n        expect(() => Config()).toThrowError();  // eslint-disable-line\n    });\n\n    describe('processConfigForD2', () => {\n        it('should set the baseUrl on the api object', () => {\n            Config.processConfigForD2({ baseUrl: '/api/dhis2' }, mockD2);\n\n            expect(mockApi.setBaseUrl).toBeCalledWith('/api/dhis2');\n        });\n\n        it('should call setBaseUrl with the default api location', () => {\n            Config.processConfigForD2({}, mockD2);\n\n            expect(mockApi.setBaseUrl).toBeCalledWith('/api');\n        });\n\n        it('should set the unauthorized function if provided', () => {\n            const unauthorizedCb = () => {};\n            Config.processConfigForD2({ unauthorizedCb }, mockD2);\n            expect(mockApi.setUnauthorizedCallback).toBeCalledWith(unauthorizedCb);\n        });\n    });\n\n    describe('processPreInitConfig', () => {\n        it('should set headers', () => {\n            const headers = { 'x-requested-with': 'XMLHttpRequest' };\n            Config.processPreInitConfig({ headers }, mockApi);\n            expect(mockApi.setDefaultHeaders).toBeCalledWith(headers);\n        });\n\n        it('should set baseurl', () => {\n            Config.processPreInitConfig({ baseUrl: '/api/dhis2' }, mockApi);\n            expect(mockApi.setBaseUrl).toBeCalledWith('/api/dhis2');\n        });\n    });\n});\n"],"file":"Config_spec.js"}