{"version":3,"sources":["../../../src/system/__tests__/SystemConfiguration_spec.js"],"names":["jest","mock","describe","configuration","mockApi","mockConfiguration","systemId","feedbackRecipients","name","created","lastUpdated","externalAccess","user","id","offlineOrganisationUnitLevel","infrastructuralIndicators","publicAccess","infrastructuralDataElements","infrastructuralPeriodType","selfRegistrationRole","selfRegistrationOrgUnit","code","corsWhitelist","remoteServerUrl","remoteServerUsername","mockCorsWhitelistText","beforeEach","MockApi","getApi","mockClear","SystemConfiguration","it","expect","toThrowErrorMatchingSnapshot","api","toBe","all","toBeInstanceOf","Function","get","apiMockObject","mockImplementation","url","Promise","resolve","reject","post","mockReturnValue","delete","afterEach","done","then","res","toEqual","err","toHaveBeenCalledTimes","calls","catch","e","res1","res2","Error","set","mockReset","message"],"mappings":"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","sourcesContent":["import MockApi from '../../api/Api';\nimport SystemConfiguration from '../SystemConfiguration';\n\njest.mock('../../api/Api');\n\ndescribe('System.configuration', () => {\n    let configuration;\n    let mockApi;\n\n    const mockConfiguration = {\n        systemId: 'eed3d451-4ff5-4193-b951-ffcc68954299',\n        feedbackRecipients: {\n            name: 'Feedback Message Recipients',\n            created: '2011-12-25T16:52:04.409+0000',\n            lastUpdated: '2015-10-19T10:27:27.636+0000',\n            externalAccess: false,\n            user: {\n                name: 'John Traore',\n                created: '2013-04-18T17:15:08.407+0000',\n                lastUpdated: '2015-09-14T20:18:28.355+0000',\n                externalAccess: false,\n                id: 'xE7jOejl9FI',\n            },\n            id: 'QYrzIjSfI8z',\n        },\n        offlineOrganisationUnitLevel: {\n            name: 'Chiefdom',\n            created: '2011-12-24T12:24:22.935+0000',\n            lastUpdated: '2015-08-09T12:58:05.001+0000',\n            externalAccess: false,\n            id: 'tTUf91fCytl',\n        },\n        infrastructuralIndicators: {\n            name: 'Staffing',\n            created: '2013-04-18T14:36:27.000+0000',\n            lastUpdated: '2013-04-18T14:36:27.000+0000',\n            externalAccess: false,\n            publicAccess: 'rw------',\n            id: 'EdDc97EJUdd',\n        },\n        infrastructuralDataElements: {\n            name: 'Population Estimates',\n            created: '2011-12-24T12:24:24.298+0000',\n            lastUpdated: '2013-03-15T16:08:56.135+0000',\n            externalAccess: false,\n            publicAccess: 'rw------',\n            id: 'sP7jTt3YGBb',\n        },\n        infrastructuralPeriodType: 'Yearly',\n        selfRegistrationRole: {\n            name: 'Guest',\n            created: '2012-11-13T15:56:23.510+0000',\n            lastUpdated: '2015-01-20T11:32:40.188+0000',\n            externalAccess: false,\n            id: 'XS0dNzuZmfH',\n        },\n        selfRegistrationOrgUnit: {\n            code: 'OU_525',\n            name: 'Sierra Leone',\n            created: '2012-11-13T12:20:53.028+0000',\n            lastUpdated: '2015-04-24T11:21:00.090+0000',\n            externalAccess: false,\n            user: {\n                name: 'Tom Wakiki',\n                created: '2012-11-21T12:02:04.303+0000',\n                lastUpdated: '2015-10-19T10:27:27.567+0000',\n                externalAccess: false,\n                id: 'GOLswS44mh8',\n            },\n            id: 'ImspTQPwCqd',\n        },\n        corsWhitelist: [\n            'http://cors1.example.com',\n            'https://cors2.example.com',\n        ],\n        remoteServerUrl: 'https://apps.dhis2.org/demo',\n        remoteServerUsername: 'admin',\n    };\n\n    const mockCorsWhitelistText = 'http://cors1.example.com\\nhttps://cors2.example.com';\n\n    beforeEach(() => {\n        mockApi = MockApi.getApi();\n        MockApi.mockClear();\n        configuration = new SystemConfiguration();\n    });\n\n    it('should not be allowed to be called without new', () => {\n        expect(() => SystemConfiguration()).toThrowErrorMatchingSnapshot(); // eslint-disable-line new-cap\n    });\n\n    it('should add the mockApi onto the SystemConfiguration instance', () => {\n        expect(configuration.api).toBe(mockApi);\n    });\n\n    it('all() should be a function', () => {\n        expect(configuration.all).toBeInstanceOf(Function);\n    });\n\n    it('get() should be a function', () => {\n        expect(configuration.get).toBeInstanceOf(Function);\n    });\n\n    it('should use the api object when it is passed', () => {\n        const apiMockObject = {};\n\n        configuration = new SystemConfiguration(apiMockObject);\n\n        expect(configuration.api).toBe(apiMockObject);\n    });\n\n    describe('API call', () => {\n        beforeEach(() => {\n            mockApi.get.mockImplementation((url) => {\n                if (url === 'configuration') {\n                    return Promise.resolve(mockConfiguration);\n                }\n                return Promise.reject();\n            });\n            mockApi.post.mockReturnValue(Promise.resolve());\n            mockApi.delete.mockReturnValue(Promise.resolve());\n        });\n\n        afterEach(() => {\n            configuration = new SystemConfiguration();\n        });\n\n        describe('.all()', () => {\n            it('should return the entire config', (done) => {\n                configuration.all().then((res) => {\n                    expect(res).toEqual(mockConfiguration);\n                    done();\n                }, (err) => {\n                    done(err);\n                });\n            });\n\n            it('should query the API for all configuration endpoints', () => {\n                configuration.all();\n\n                expect(mockApi.get).toHaveBeenCalledTimes(1);\n                expect(mockApi.get.mock.calls[0][0]).toBe('configuration');\n            });\n\n            it('should only call the API once', (done) => {\n                configuration.all().then(() => {\n                    configuration.all().then(() => {\n                        expect(mockApi.get).toHaveBeenCalledTimes(1);\n                        expect(mockApi.get.mock.calls[0][0]).toBe('configuration');\n                        done();\n                    });\n                    expect(mockApi.get).toHaveBeenCalledTimes(1);\n                    expect(mockApi.get.mock.calls[0][0]).toBe('configuration');\n                });\n            });\n\n            it('should call the API again if ignoreCache is true', (done) => {\n                configuration.all(true).then(() => {\n                    expect(mockApi.get).toHaveBeenCalledTimes(1);\n                    expect(mockApi.get.mock.calls[0][0]).toBe('configuration');\n\n                    return configuration.all(true).then(() => {\n                        expect(mockApi.get).toHaveBeenCalledTimes(2);\n                        expect(mockApi.get.mock.calls[0][0]).toBe('configuration');\n                        expect(mockApi.get.mock.calls[1][0]).toBe('configuration');\n                        done();\n                    }).catch(e => done(e));\n                }).catch(e => done(e));\n            });\n        });\n\n        describe('.get()', () => {\n            it('should return the correct systemId', (done) => {\n                configuration.get('systemId').then((res) => {\n                    expect(res).toBe(mockConfiguration.systemId);\n                    done();\n                }, (err) => {\n                    done(err);\n                });\n            });\n\n            it('should return the correct feedback recipient user group', () => {\n                return configuration.get('feedbackRecipients').then((res) => {\n                    expect(res).toBe(mockConfiguration.feedbackRecipients);\n                });\n            });\n\n            it('should only query the API once', (done) => {\n                configuration.get('systemId').then((res1) => {\n                    expect(res1).toBe(mockConfiguration.systemId);\n                    expect(mockApi.get.mock.calls[0][0]).toBe('configuration');\n\n                    configuration.get('systemId').then((res2) => {\n                        expect(res2).toBe(mockConfiguration.systemId);\n                        expect(mockApi.get.mock.calls[0][0]).toBe('configuration');\n                        done();\n                    }, (err) => {\n                        done(err);\n                    });\n                }, (err) => {\n                    done(err);\n                });\n            });\n\n            it('should query the API twice if ignoreCache is true', (done) => {\n                configuration.get('systemId', true).then((res1) => {\n                    expect(res1).toBe(mockConfiguration.systemId);\n                    expect(mockApi.get.mock.calls[0][0]).toBe('configuration');\n\n                    configuration.get('systemId', true).then((res2) => {\n                        expect(res2).toBe(mockConfiguration.systemId);\n                        expect(mockApi.get.mock.calls[1][0]).toBe('configuration');\n                        done();\n                    }, (err) => {\n                        done(err);\n                    });\n                }, (err) => {\n                    done(err);\n                });\n            });\n\n            it('should throw an error when asked for an unknown config option', (done) => {\n                try {\n                    configuration.get('someRandomOptionThatDoesntExist').then(() => {\n                        done(new Error('No error thrown'));\n                    }, () => {\n                        done();\n                    });\n                } catch (e) {\n                    done();\n                }\n            });\n        });\n\n        describe('.set()', () => {\n            it('should not be able to change the systemId', (done) => {\n                configuration.set('systemId', 'my-random-system-id')\n                    .then(() => {\n                        done('Attempting to change systemId didn\\'t result in an error');\n                    })\n                    .catch(() => {\n                        done();\n                    });\n            });\n\n            it('should not attempt to change unknown settings', (done) => {\n                configuration.set('completelyCrazyConfigurationOption', 'totally rediculous value')\n                    .then(() => {\n                        done();\n                    }).catch(() => {\n                        done('Invalid error failure');\n                    });\n            });\n\n            it('should call DELETE to remove feedback recipients', (done) => {\n                configuration.set('feedbackRecipients', 'null')\n                    .then(() => {\n                        expect(mockApi.post).toHaveBeenCalledTimes(0);\n                        expect(mockApi.delete).toHaveBeenCalledTimes(1);\n                        expect(mockApi.delete.mock.calls[0][0]).toBe('configuration/feedbackRecipients');\n                        done();\n                    })\n                    .catch((err) => {\n                        done(err);\n                    });\n            });\n\n            it('should call DELETE to remove self registration role', (done) => {\n                configuration.set('selfRegistrationRole', null)\n                    .then(() => {\n                        expect(mockApi.post).toHaveBeenCalledTimes(0);\n                        expect(mockApi.delete.mock.calls[0][0]).toBe('configuration/selfRegistrationRole');\n                        done();\n                    })\n                    .catch((err) => {\n                        done(err);\n                    });\n            });\n\n            it('should call DELETE to remove self registration organisation unit', (done) => {\n                configuration.set('selfRegistrationOrgUnit', 'null')\n                    .then(() => {\n                        expect(mockApi.post).toHaveBeenCalledTimes(0);\n                        expect(mockApi.delete.mock.calls[0][0]).toBe('configuration/selfRegistrationOrgUnit');\n                        done();\n                    })\n                    .catch((err) => {\n                        done(err);\n                    });\n            });\n\n            it('should convert CORS string to an array', () => configuration.set('corsWhitelist', mockCorsWhitelistText)\n                .then(() => {\n                    expect(mockApi.post.mock.calls[0][0]).toBe('configuration/corsWhitelist');\n                    expect(mockApi.post.mock.calls[0][1]).toEqual(mockConfiguration.corsWhitelist);\n                }));\n\n            it('should post new settings to the API', () => {\n                mockApi.post.mockClear();\n\n                return configuration.set('infrastructuralPeriodType', 'Monthly')\n                    .then(() => {\n                        expect(mockApi.post.mock.calls[0][0]).toBe('configuration/infrastructuralPeriodType');\n                        expect(mockApi.post.mock.calls[0][1]).toBe('Monthly');\n                    });\n            });\n\n            it('should reject a promise when no configuration can be found for the key', () => {\n                mockApi.post.mockReset();\n                mockApi.post.mockReturnValue(Promise.reject('StackTrace!'));\n\n                return configuration.set('thisKeyDoesNotExist', 'Some value')\n                    .catch(message => message)\n                    .then((message) => {\n                        expect(message).toBe('No configuration found for thisKeyDoesNotExist');\n                    });\n            });\n        });\n    });\n});\n"],"file":"SystemConfiguration_spec.js"}