{"version":3,"sources":["../src/uid.js"],"names":["abc","letters","concat","toUpperCase","ALLOWED_CHARS","NUMBER_OF_CODEPOINTS","length","CODESIZE","CODE_PATTERN","randomWithMax","max","Math","floor","random","generateUid","randomChars","charAt","i","isValidUid","code","test"],"mappings":";;;;;;;;AAAA;;;;;;;;;AAUA,IAAMA,GAAG,GAAG,4BAAZ;AACA,IAAMC,OAAO,GAAGD,GAAG,CAACE,MAAJ,CAAWF,GAAG,CAACG,WAAJ,EAAX,CAAhB;AAEA,IAAMC,aAAa,uBAAgBH,OAAhB,CAAnB;AAEA,IAAMI,oBAAoB,GAAGD,aAAa,CAACE,MAA3C;AACA,IAAMC,QAAQ,GAAG,EAAjB;AAEA,IAAMC,YAAY,GAAG,8BAArB;;AAEA,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AACxB,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,GAA3B,CAAP;AACH;AAED;;;;;;;;;;;;AAUO,SAASI,WAAT,GAAuB;AAC1B;AACA,MAAIC,WAAW,GAAGd,OAAO,CAACe,MAAR,CAAeP,aAAa,CAACR,OAAO,CAACK,MAAT,CAA5B,CAAlB;;AAEA,OAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,QAApB,EAA8BU,CAAC,IAAI,CAAnC,EAAsC;AAClCF,IAAAA,WAAW,IAAIX,aAAa,CAACY,MAAd,CAAqBP,aAAa,CAACJ,oBAAD,CAAlC,CAAf;AACH,GANyB,CAQ1B;;;AACA,SAAOU,WAAP;AACH;AAED;;;;;;;;;;;;;;;AAaO,SAASG,UAAT,CAAoBC,IAApB,EAA0B;AAC7B,MAAIA,IAAI,IAAI,IAAZ,EAAkB;AACd;AACA,WAAO,KAAP;AACH;;AAED,SAAOX,YAAY,CAACY,IAAb,CAAkBD,IAAlB,CAAP;AACH","sourcesContent":["/**\n * @module uid\n *\n * @description\n * Client side implementation of the DHIS2 code (uid) generator.\n * ({@link https://github.com/dhis2/dhis2-core/blob/ad2d5dea959aff3146d8fe5796cf0b75eb6ee5d8/dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/CodeGenerator.java|CodeGenerator.java})\n *\n * This module is used to generate and validate DHIS2 uids. A valid DHIS2 uid is a 11 character string which starts with a letter from the ISO basic Latin alphabet.\n */\n\nconst abc = 'abcdefghijklmnopqrstuvwxyz'\nconst letters = abc.concat(abc.toUpperCase())\n\nconst ALLOWED_CHARS = `0123456789${letters}`\n\nconst NUMBER_OF_CODEPOINTS = ALLOWED_CHARS.length\nconst CODESIZE = 11\n\nconst CODE_PATTERN = /^[a-zA-Z]{1}[a-zA-Z0-9]{10}$/\n\nfunction randomWithMax(max) {\n    return Math.floor(Math.random() * max)\n}\n\n/**\n * Generate a valid DHIS2 uid. A valid DHIS2 uid is a 11 character string which starts with a letter from the ISO basic Latin alphabet.\n *\n * @return {string} A 11 character uid that always starts with a letter.\n *\n * @example\n * import { generateUid } from 'd2/lib/uid';\n *\n * generateUid();\n */\nexport function generateUid() {\n    // First char should be a letter\n    let randomChars = letters.charAt(randomWithMax(letters.length))\n\n    for (let i = 1; i < CODESIZE; i += 1) {\n        randomChars += ALLOWED_CHARS.charAt(randomWithMax(NUMBER_OF_CODEPOINTS))\n    }\n\n    // return new String( randomChars );\n    return randomChars\n}\n\n/**\n * Tests whether the given code is valid.\n *\n * @param {string} code The code to validate.\n * @return {boolean} Returns true if the code is valid, false otherwise.\n *\n * @example\n * import { isValidUid } from 'd2/lib/uid';\n *\n * isValidUid('JkWynlWMjJR'); // true\n * isValidUid('0kWynlWMjJR'); // false (Uid can not start with a number)\n * isValidUid('AkWy$lWMjJR'); // false (Uid can only contain alphanumeric characters.\n */\nexport function isValidUid(code) {\n    if (code == null) {\n        // eslint-disable-line eqeqeq\n        return false\n    }\n\n    return CODE_PATTERN.test(code)\n}\n"],"file":"uid.js"}