{"version":3,"sources":["../../src/system/System.js"],"names":["System","settings","configuration","systemInfo","undefined","version","installedApps","parseVersionString","apps","api","getApi","get","then","setInstalledApps","zipFile","onProgress","data","FormData","xhr","append","XMLHttpRequest","upload","onprogress","progress","lengthComputable","loaded","total","post","contentType","processData","compatibleOnly","Promise","resolve","reject","appStoreData","map","appData","app","Object","assign","versions","filter","isVersionCompatible","versionData","length","catch","err","uid","join","dataType","appKey","delete","update","loadInstalledApps","major","Number","parseInt","minor","substring","indexOf","snapshot","a","b","from","String","to","systemVersion","appVersion","minVersion","minDhisVersion","min_platform_version","maxVersion","maxDhisVersion","max_platform_version","isNewEnough","compareVersions","isNotTooOld","getSystem","system"],"mappings":"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","file":"System.js","sourcesContent":["/**\n * @module system\n *\n * @requires module:api/Api\n */\n\nimport Api from '../api/Api';\nimport SystemSettings from './SystemSettings';\nimport SystemConfiguration from './SystemConfiguration';\n\n/**\n * @description\n * Represents the system that can be interacted with. There is a single instance of this pre-defined onto the d2\n * object after initialisation. This can be interacted with using its property objects to among other be used\n * to get and save systemSettings.\n *\n * @memberof module:system\n */\nclass System {\n    constructor(settings, configuration) {\n        /**\n         * Contains a reference to a `SystemSettings` instance that can be used\n         * to retrieve and save system settings.\n         *\n         * ```js\n         * d2.system.settings.get('keyLastSuccessfulResourceTablesUpdate')\n         *  .then(systemSettingsValue => {\n         *    console.log('Analytics was last updated on: ' + systemSettingsValue);\n         *  });\n         * ```\n         * @type {SystemSettings}\n         *\n         */\n        this.settings = settings;\n\n        /**\n         * A representation of the system configuration,\n         * that can be used to retrieve and change system configuration options.\n         * @type {SystemConfiguration}\n         */\n        this.configuration = configuration;\n\n        /**\n         * An object containing system information about the DHIS2 instance\n         * @type {Object}\n         */\n        this.systemInfo = undefined;\n\n        /**\n         * An object containing version information about the DHIS2 instance\n         * @type {Object}\n         */\n        this.version = undefined;\n\n        /**\n         * An array of all the webapps that are installed on the current DHIS2 instance\n         * @type {Array}\n         */\n        this.installedApps = undefined;\n    }\n\n    /**\n     * Sets the systemInfo and version properties\n     *\n     * @param systemInfo\n     */\n    setSystemInfo(systemInfo) {\n        this.version = System.parseVersionString(systemInfo.version);\n        this.systemInfo = systemInfo;\n    }\n\n    /**\n     * Sets the list of currently installed webapps\n     *\n     * @param apps\n     */\n    setInstalledApps(apps) {\n        this.installedApps = apps;\n    }\n\n    /**\n     * Refreshes the list of currently installed webapps\n     *\n     * @returns {Promise} A promise that resolves to the list of installed apps\n     */\n    loadInstalledApps() {\n        const api = Api.getApi();\n\n        return api.get('apps')\n            .then((apps) => {\n                this.setInstalledApps(apps);\n\n                return apps;\n            });\n    }\n\n    /**\n     * Upload and install a zip file containing a new webapp\n     *\n     * @param zipFile Zip file data from a file input form field\n     * @param onProgress An optional callback that will be called whenever file upload progress info is available\n     * @returns {Promise}\n     */\n    uploadApp(zipFile, onProgress) { // eslint-disable-line class-methods-use-this\n        const api = Api.getApi();\n        const data = new FormData();\n        let xhr;\n        data.append('file', zipFile);\n\n        if (onProgress !== undefined) {\n            xhr = new XMLHttpRequest();\n            xhr.upload.onprogress = (progress) => {\n                if (progress.lengthComputable) {\n                    onProgress(progress.loaded / progress.total);\n                }\n            };\n        }\n\n        return api.post('apps', data, {\n            contentType: false,\n            processData: false,\n            xhr: xhr !== undefined ? () => xhr : undefined,\n        });\n    }\n\n    /**\n     * Load the list of apps available in the DHIS 2 app store\n     *\n     * @param compatibleOnly If true, apps that are incompatible with the current system will be filtered out\n     * @returns {Promise}\n     */\n    loadAppStore(compatibleOnly = true) {\n        return new Promise((resolve, reject) => {\n            const api = Api.getApi();\n            api.get('appStore')\n                .then(appStoreData => resolve(appStoreData\n                    .map((appData) => {\n                        const app = Object.assign({}, appData);\n\n                        if (compatibleOnly) {\n                            app.versions = app.versions\n                                .filter(versionData => System.isVersionCompatible(this.version, versionData));\n                        }\n\n                        return app;\n                    })\n                    .filter(appData => appData.versions.length > 0)),\n                )\n                .catch(err => reject(err));\n        });\n    }\n\n    /**\n     * Install the specified app version from the DHIS 2 app store\n     *\n     * @param uid The uid of the app version to install\n     * @returns {Promise}\n     */\n    installAppVersion(uid) { // eslint-disable-line class-methods-use-this\n        const api = Api.getApi();\n        return new Promise((resolve, reject) => {\n            api.post(['appStore', uid].join('/'), '', { dataType: 'text' }).then(() => {\n                resolve();\n            }).catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n    /**\n     * Remove the specified app from the system\n     *\n     * @param appKey The key of the app to remove\n     * @returns {Promise}\n     */\n    uninstallApp(appKey) { // eslint-disable-line class-methods-use-this\n        const api = Api.getApi();\n\n        return api.delete(['apps', appKey].join('/'))\n            // TODO: Stop jQuery from rejecting successful promises\n            .catch(() => undefined);\n    }\n\n    /**\n     * Refresh the list of apps that are installed on the server\n     *\n     * @returns {Promise} A promise that resolves to the updated list of installed apps\n     */\n    reloadApps() {\n        const api = Api.getApi();\n        return api.update('apps').then(() => this.loadInstalledApps());\n    }\n\n    /**\n     * @static\n     * @typedef {Object} ParsedVersion\n     * @property {number} major - Major version of the parsed-string (before .)\n     * @property {number} minor - Minor version of the parsed-string (after .)\n     * @property {boolean} snapshot - If it's a snapshot-version\n     */\n    // TODO: Validate string\n    // TODO: Handle valid version objects too\n    /**\n     * Parses a version string into an object describing the version.\n     * @param {string} version Version-string to parse\n     * @returns {module:system.ParsedVersion}\n     */\n    static parseVersionString(version) {\n        return {\n            major: Number.parseInt(version, 10),\n            minor: Number.parseInt(version.substring(version.indexOf('.') + 1), 10),\n            snapshot: version.indexOf('-SNAPSHOT') >= 0,\n        };\n    }\n\n    // Disable eslint complexity warning\n    /* eslint-disable complexity */\n    /**\n     * Compares version a to version b.\n     * @param a {string|module:system.ParsedVersion}\n     * @param b {string|module:system.ParsedVersion}\n     * @returns {number} 0 if same version, else a - b.\n     */\n    static compareVersions(a, b) {\n        const from = (typeof a === 'string' || a instanceof String) ? System.parseVersionString(a) : a;\n        const to = (typeof b === 'string' || b instanceof String) ? System.parseVersionString(b) : b;\n\n        if (from.major !== to.major) {\n            return from.major - to.major;\n        } else if (from.minor !== to.minor) {\n            return from.minor - to.minor;\n        }\n\n        return (from.snapshot ? 0 : 1) - (to.snapshot ? 0 : 1);\n    }\n\n    /**\n     * Checks if systemVersion is compatible with appVersion.\n     * Versions are compatible if appVersion.minDhisVersion <= parsed systemVersion and\n     * if appVersion.maxDhisVersion >= parsed systemVersion.\n     * @param systemVersion {string|module:system.ParsedVersion} systemVersion to check\n     * @param {Object} appVersion - AppVersion object to check\n     * @returns {boolean} true if compatible, false otherwise.\n     */\n    static isVersionCompatible(systemVersion, appVersion) {\n        const minVersion = appVersion.minDhisVersion || appVersion.min_platform_version || null;\n        const maxVersion = appVersion.maxDhisVersion || appVersion.max_platform_version || null;\n\n        const isNewEnough = (minVersion ? System.compareVersions(systemVersion, minVersion) >= 0 : true);\n        const isNotTooOld = (maxVersion ? System.compareVersions(systemVersion, maxVersion) <= 0 : true);\n\n        return isNewEnough && isNotTooOld;\n    }\n    /* eslint-enable */\n\n    /**\n     * Get a new instance of the system object. This will function as a singleton, when a System object has been created\n     * when requesting getSystem again the original version will be returned.\n     *\n     * @returns {System} Object with the system interaction properties\n     */\n    static getSystem() {\n        if (!System.getSystem.system) {\n            System.getSystem.system = new System(new SystemSettings(), new SystemConfiguration());\n        }\n\n        return System.getSystem.system;\n    }\n}\n\nexport default System;\n"]}