{"version":3,"sources":["../../src/analytics/AnalyticsRequestDimensionsMixin.js"],"names":["AnalyticsRequestDimensionsMixin","base","items","addDimension","dimension","dimensionIndex","existingDimension","dimensions","find","item","index","updatedItems","existingItems","Set","Array","isArray","splice","push","AnalyticsRequest"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;AAQA;;;;;;;AAOA,IAAMA,+BAA+B,GAAG,SAAlCA,+BAAkC,CAAAC,IAAI;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAEpC;;;;;;;;;;;;;;;AAFoC,yCAiBnBC,KAjBmB,EAiBZ;AACpB,iBAAO,KAAKC,YAAL,CAAkB,IAAlB,EAAwBD,KAAxB,CAAP;AACH;AAED;;;;;;;;;;;;;;;AArBoC;AAAA;AAAA,2CAmCjBA,KAnCiB,EAmCV;AACtB,iBAAO,KAAKC,YAAL,CAAkB,IAAlB,EAAwBD,KAAxB,CAAP;AACH;AAED;;;;;;;;;;;;;;;AAvCoC;AAAA;AAAA,4CAqDhBA,KArDgB,EAqDT;AACvB,iBAAO,KAAKC,YAAL,CAAkB,IAAlB,EAAwBD,KAAxB,CAAP;AACH;AAED;;;;;;;;;;;;;;;AAeA;;AAxEoC;AAAA;AAAA,qCAyEvBE,SAzEuB,EAyEZF,KAzEY,EAyEL;AAC3B,cAAIG,cAAc,GAAG,CAArB;AAEA,cAAMC,iBAAiB,GAAG,KAAKC,UAAL,CAAgBC,IAAhB,CAAqB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC5D,gBAAID,IAAI,CAACL,SAAL,KAAmBA,SAAvB,EAAkC;AAC9BC,cAAAA,cAAc,GAAGK,KAAjB;AAEA,qBAAOD,IAAP;AACH;;AAED,mBAAO,KAAP;AACH,WARyB,CAA1B;AAUA,cAAIE,YAAY,GAAG,EAAnB;AACA,cAAIC,aAAa,GAAG,EAApB;;AAEA,cAAIN,iBAAJ,EAAuB;AACnBM,YAAAA,aAAa,GAAGN,iBAAiB,CAACJ,KAAlB,IAA2B,EAA3C;AACH;;AAED,cAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3BS,YAAAA,YAAY,sBAAO,IAAIE,GAAJ,8BAAYD,aAAZ,IAA2BV,KAA3B,GAAP,CAAZ;AACH,WAFD,MAEO,IAAIY,KAAK,CAACC,OAAN,CAAcb,KAAd,CAAJ,EAA0B;AAC7BS,YAAAA,YAAY,sBAAO,IAAIE,GAAJ,8BAAYD,aAAZ,sBAA8BV,KAA9B,GAAP,CAAZ;AACH;;AAED,cAAII,iBAAJ,EAAuB;AACnB,iBAAKC,UAAL,CAAgBS,MAAhB,CAAuBX,cAAvB,EAAuC,CAAvC,EAA0C;AACtCD,cAAAA,SAAS,EAATA,SADsC;AAEtCF,cAAAA,KAAK,EAAES;AAF+B,aAA1C;AAIH,WALD,MAKO;AACH,iBAAKJ,UAAL,CAAgBU,IAAhB,CAAqB;AAAEb,cAAAA,SAAS,EAATA,SAAF;AAAaF,cAAAA,KAAK,EAAES;AAApB,aAArB;AACH;;AAED,iBAAO,IAAIO,yBAAJ,CAAqB,IAArB,CAAP;AACH;AA7GmC;;AAAA;AAAA,MAC1BjB,IAD0B;AAAA;AAAA,CAA5C;;eAgHeD,+B","sourcesContent":["import AnalyticsRequest from './AnalyticsRequest'\n\n/**\n * @private\n * @description\n * AnalyticsRequest dimensions mixin function\n *\n * @param {*} base The base class to mix onto\n * @return {module:analytics.AnalyticsRequestDimensionsMixin} The mixin class\n */\n/**\n * @private\n * @description\n * AnalyticsRequest dimensions mixin class\n *\n * @alias module:analytics.AnalyticsRequestDimensionsMixin\n */\nconst AnalyticsRequestDimensionsMixin = base =>\n    class extends base {\n        /**\n         * Adds/updates the dx dimension to use in the request.\n         *\n         * @param {!(String|Array)} items The dimension items to add to the dx dimension\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .addDataDimension(['fbfJHSPpUQD', 'cYeuwXTCPkU'])\n         *    .addDataDimension('BfMAe6Itzgt.REPORTING_RATE');\n         *\n         * // dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU;BfMAe6Itzgt.REPORTING_RATE\n         *\n         */\n        addDataDimension(items) {\n            return this.addDimension('dx', items)\n        }\n\n        /**\n         * Adds/updates the pe dimension to use in the request.\n         *\n         * @param {!(String|Array)} items The dimension items to add to the pe dimension\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .addPeriodDimension(['201701', '201702'])\n         *    .addPeriodDimension('LAST_4_QUARTERS');\n         *\n         * // dimension=pe:201701;201702;LAST_4_QUARTERS\n         */\n        addPeriodDimension(items) {\n            return this.addDimension('pe', items)\n        }\n\n        /**\n         * Adds/updates the ou dimension to use in the request.\n         *\n         * @param {!(String|Array)} items The dimension items to add to the ou dimension\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .addOrgUnitDimension(['O6uvpzGd5pu', 'lc3eMKXaEfw'])\n         *    .addOrgUnitDimension('OU_GROUP-w0gFTTmsUcF');\n         *\n         * // dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw;OU_GROUP-w0gFTTmsUcF\n         */\n        addOrgUnitDimension(items) {\n            return this.addDimension('ou', items)\n        }\n\n        /**\n         * Adds a new dimension or updates an existing one to use in the request.\n         *\n         * @param {!String} dimension The dimension to add to the request\n         * @param {(String|Array)} items The dimension items to add to the dimension\n         *\n         * @returns {AnalyticsRequest} A new instance of the class for chaining purposes\n         *\n         * @example\n         * const req = new d2.analytics.request()\n         *    .addDimension('Bpx0589u8y0', ['oRVt7g429ZO', 'MAs88nJc9nL'])\n         *    .addDimension('qrur9Dvnyt5-Yf6UHoPkdS6');\n         *\n         * // dimension=Bpx0589u8y0:oRVt7g429ZO;MAs88nJc9nL&dimension=qrur9Dvnyt5-Yf6UHoPkdS6\n         */\n        // eslint-disable-next-line complexity\n        addDimension(dimension, items) {\n            let dimensionIndex = 0\n\n            const existingDimension = this.dimensions.find((item, index) => {\n                if (item.dimension === dimension) {\n                    dimensionIndex = index\n\n                    return item\n                }\n\n                return false\n            })\n\n            let updatedItems = []\n            let existingItems = []\n\n            if (existingDimension) {\n                existingItems = existingDimension.items || []\n            }\n\n            if (typeof items === 'string') {\n                updatedItems = [...new Set([...existingItems, items])]\n            } else if (Array.isArray(items)) {\n                updatedItems = [...new Set([...existingItems, ...items])]\n            }\n\n            if (existingDimension) {\n                this.dimensions.splice(dimensionIndex, 1, {\n                    dimension,\n                    items: updatedItems,\n                })\n            } else {\n                this.dimensions.push({ dimension, items: updatedItems })\n            }\n\n            return new AnalyticsRequest(this)\n        }\n    }\n\nexport default AnalyticsRequestDimensionsMixin\n"],"file":"AnalyticsRequestDimensionsMixin.js"}