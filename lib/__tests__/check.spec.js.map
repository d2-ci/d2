{"version":3,"sources":["../../../src/lib/__tests__/check.spec.js"],"names":["describe","it","expect","check","isDefined","toBe","undefined","isType","Object","isString","isEmpty","isInteger","NaN","Infinity","isNumeric","beforeEach","jest","spyOn","Array","afterEach","isArray","mockRestore","toHaveBeenCalledTimes","contains","toBeInstanceOf","Function","list","isValidUid","toBeAny","isNullUndefinedOrEmptyString","name"],"mappings":"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","sourcesContent":["import * as check from '../check';\n\ndescribe('Check', () => {\n    describe('isDefined', () => {\n        it('should return when the parameter is defined', () => {\n            expect(check.isDefined({})).toBe(true);\n        });\n\n        it('should return false when the parameter is not defined', () => {\n            expect(check.isDefined(undefined)).toBe(false);\n        });\n    });\n\n    describe('isType', () => {\n        it('should return true if the value is of the correct type', () => {\n            expect(check.isType('Mark', 'string')).toBe(true);\n        });\n\n        it('should return false when the value is not of the right type', () => {\n            expect(check.isType({}, 'string')).toBe(false);\n        });\n\n        it('should return true when the value is an instance of', () => {\n            expect(check.isType([], Object)).toBe(true);\n        });\n\n        it('should return false when the object is not an instance', () => {\n            expect(check.isType('', Object)).toBe(false);\n        });\n    });\n\n    describe('isString', () => {\n        it('should return true for a string', () => {\n            expect(check.isString('Mark')).toBe(true);\n        });\n\n        it('should return false for an array', () => {\n            expect(check.isString([])).toBe(false);\n        });\n    });\n\n    describe('isEmpty', () => {\n        it('should return true if array is empty', () => {\n            expect(check.isEmpty([])).toBe(true);\n        });\n\n        it('should return false if array has element', () => {\n            expect(check.isEmpty([1, 2, 3])).toBe(false);\n        });\n    });\n\n    describe('isInteger', () => {\n        it('should return for 1', () => {\n            expect(check.isInteger(1)).toBe(true);\n        });\n\n        it('should return false for 0.1', () => {\n            expect(check.isInteger(0.1)).toBe(false);\n        });\n\n        it('should return false for NaN', () => {\n            expect(check.isInteger(NaN)).toBe(false);\n        });\n\n        it('should return false for an array', () => {\n            expect(check.isInteger([])).toBe(false);\n        });\n\n        it('should return false for an object', () => {\n            expect(check.isInteger({})).toBe(false);\n        });\n\n        it('should return false for Infinity', () => {\n            expect(check.isInteger(Infinity)).toBe(false);\n        });\n\n        it('should return false for empty string', () => {\n            expect(check.isInteger('')).toBe(false);\n        });\n\n        it('should return false for white space strings', () => {\n            expect(check.isInteger(' ')).toBe(false);\n            expect(check.isInteger('\\t')).toBe(false);\n            expect(check.isInteger('\\n')).toBe(false);\n            expect(check.isInteger('\\n\\r')).toBe(false);\n        });\n    });\n\n    describe('isNumeric', () => {\n        it('should return true for 1', () => {\n            expect(check.isNumeric(1)).toBe(true);\n        });\n\n        it('should return true for 1.1', () => {\n            expect(check.isNumeric(1.1)).toBe(true);\n        });\n\n        it('should return true for negative 1', () => {\n            expect(check.isNumeric(-1)).toBe(true);\n        });\n\n        it('should return true for negative 1.1', () => {\n            expect(check.isNumeric(-1.1)).toBe(true);\n        });\n\n        it('should return true for 0', () => {\n            expect(check.isNumeric(0)).toBe(true);\n        });\n\n        it('should return false for NaN', () => {\n            expect(check.isNumeric(NaN)).toBe(false);\n        });\n\n        it('should return false for an array', () => {\n            expect(check.isNumeric([])).toBe(false);\n        });\n\n        it('should return false for an object', () => {\n            expect(check.isNumeric({})).toBe(false);\n        });\n\n        it('should return false for Infinity', () => {\n            expect(check.isNumeric(Infinity)).toBe(false);\n        });\n\n        it('should return false for empty string', () => {\n            expect(check.isNumeric('')).toBe(false);\n        });\n\n        it('should return false for white space strings', () => {\n            expect(check.isNumeric(' ')).toBe(false);\n            expect(check.isNumeric('\\t')).toBe(false);\n            expect(check.isNumeric('\\n')).toBe(false);\n            expect(check.isNumeric('\\n\\r')).toBe(false);\n        });\n\n        it('should concider Infinity not to be numeric', () => {\n            expect(check.isNumeric(Infinity)).toBe(false);\n        });\n    });\n\n    describe('isArray', () => {\n        beforeEach(() => {\n            jest.spyOn(Array, 'isArray');\n        });\n\n        afterEach(() => {\n            Array.isArray.mockRestore();\n        });\n\n        it('should call Array.isArray', () => {\n            check.isArray([]);\n\n            expect(Array.isArray).toHaveBeenCalledTimes(1);\n        });\n    });\n\n    describe('contains', () => {\n        it('should be a function', () => {\n            expect(check.contains).toBeInstanceOf(Function);\n        });\n\n        it('should return true when an item is contained in the array', () => {\n            const list = [3, 4, 2, 6, 7];\n\n            expect(check.contains(2, list)).toBe(true);\n        });\n\n        it('should return false when an item is not in the list', () => {\n            const list = [3, 4, 2, 6, 7];\n\n            expect(check.contains(9, list)).toBe(false);\n        });\n\n        it('should return false if the list is not an array', () => {\n            expect(check.contains(1, 'two')).toBe(false);\n        });\n\n        it('should return false when the item is undefined', () => {\n            expect(check.contains(undefined, [])).toBe(false);\n        });\n\n        it('should return true when undefined is in the list', () => {\n            expect(check.contains(undefined, [undefined])).toBe(true);\n        });\n    });\n\n    describe('isValidUid', () => {\n        it('should return true when the value is a valid uid', () => {\n            expect(check.isValidUid('q2egwkkrfco')).toBe(true);\n        });\n    });\n\n    describe('toBe', () => {\n        it('should do strict equals', () => {\n            expect(check.toBe(undefined, undefined)).toBe(true);\n            expect(check.toBe(null, null)).toBe(true);\n            expect(check.toBe(null, undefined)).toBe(false);\n            expect(check.toBe({}, {})).toBe(false);\n            expect(check.toBe(expect, expect)).toBe(true);\n            expect(check.toBe('q2egwkkrfco', 'q2egwkkrfco')).toBe(true);\n        });\n    });\n\n    describe('toBeAny', () => {\n        it('should return true when the value exists in the values', () => {\n            expect(check.toBeAny([undefined, null, ''])(null)).toBe(true);\n            expect(check.toBeAny(['A', 'B', 'C'])('C')).toBe(true);\n        });\n\n        it('should return false when the value does not exist in the values', () => {\n            expect(check.toBeAny([undefined, null, ''])(0)).toBe(false);\n            expect(check.toBeAny(['A', 'B', 'C'])('D')).toBe(false);\n            expect(check.toBeAny(['A', 'B', 'C'])()).toBe(false);\n        });\n    });\n\n    describe('isNullUndefinedOrEmptyString', () => {\n        it('should return true when the passed value is either undefined, null, or empty string', () => {\n            expect(check.isNullUndefinedOrEmptyString(null)).toBe(true);\n            expect(check.isNullUndefinedOrEmptyString(undefined)).toBe(true);\n            expect(check.isNullUndefinedOrEmptyString('')).toBe(true);\n        });\n\n        it('should return false when the passed value that is not undefined, null, or empty string', () => {\n            expect(check.isNullUndefinedOrEmptyString('A')).toBe(false);\n            expect(check.isNullUndefinedOrEmptyString({ name: 'Stuff' })).toBe(false);\n            expect(check.isNullUndefinedOrEmptyString(' ')).toBe(false);\n            expect(check.isNullUndefinedOrEmptyString([])).toBe(false);\n        });\n    });\n});\n"],"file":"check.spec.js"}