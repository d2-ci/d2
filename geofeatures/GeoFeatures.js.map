{"version":3,"sources":["../../src/geofeatures/GeoFeatures.js"],"names":["GeoFeatures","orgUnits","displayName","orgUnitsArray","concat","every","isValidOrgUnit","Error","isValidDisplayName","params","api","Api","getApi","urlParams","length","ou","join","displayProperty","get","orgUnit","isValidOrgUnitLevel","isValidOrgUnitGroup","isValidUserOrgUnit","level","match","Array","isArray","test","group","USER_ORGUNIT","USER_ORGUNIT_CHILDREN","USER_ORGUNIT_GRANDCHILDREN","DISPLAY_PROPERTY_NAME","DISPLAY_PROPERTY_SHORTNAME","args"],"mappings":"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","sourcesContent":["import Api from '../api/Api'\nimport { isValidUid } from '../uid'\n\n/**\n * @class GeoFeatures\n * @description\n * GeoFeatures class used to request organisation unit coordinates from the Web API.\n */\nclass GeoFeatures {\n    /**\n     * @constructor\n     *\n     * @param {Array} orgUnits Organisation units (UID, level, group, user org. unit) to include in the response.\n     * @param {String} displayName The name property to display (NAME|SHORTNAME).\n     */\n    constructor(orgUnits = [], displayName) {\n        this.orgUnits = orgUnits\n        this.displayName = displayName\n    }\n\n    /**\n     * @method byOrgUnit\n     *\n     * @param {Array} orgUnits Organisation units (UID, level, group, user org. unit) to include in the response.\n     *\n     * @returns {GeoFeatures}\n     */\n    byOrgUnit(orgUnits) {\n        if (!orgUnits) {\n            return this\n        }\n\n        const orgUnitsArray = [].concat(orgUnits)\n\n        if (!orgUnitsArray.every(GeoFeatures.isValidOrgUnit)) {\n            throw new Error(`Invalid organisation unit: ${orgUnits}`)\n        }\n\n        return new GeoFeatures(orgUnitsArray, this.displayName)\n    }\n\n    /**\n     * @method byOrgUnit\n     *\n     * @param {String} displayName The name property to display (NAME|SHORTNAME).\n     *\n     * @returns {GeoFeatures}\n     */\n    displayProperty(displayName) {\n        if (!displayName) {\n            return this\n        }\n\n        if (!GeoFeatures.isValidDisplayName(displayName)) {\n            throw new Error(`Invalid display property: ${displayName}`)\n        }\n\n        return new GeoFeatures(this.orgUnits, displayName)\n    }\n\n    /**\n     * @method getAll\n     *\n     * @param {Object} params Extra URL params to pass to the Web API endpoint.\n     *\n     * @returns {Promise} with an array of geofeatures.\n     */\n    getAll(params = {}) {\n        const api = Api.getApi()\n        const urlParams = params\n\n        if (this.orgUnits.length) {\n            urlParams.ou = `ou:${this.orgUnits.join(';')}`\n        }\n\n        if (this.displayName) {\n            urlParams.displayProperty = this.displayName\n        }\n\n        return api.get('geoFeatures', urlParams)\n    }\n\n    /**\n     * @method isValidOrgUnit\n     * @static\n     *\n     * @returns {boolean} True if the org. unit is valid\n     *\n     * @description\n     * Checks if the org. unit is valid (UID, level, group, user org. unit)\n     */\n    static isValidOrgUnit(orgUnit) {\n        return (\n            isValidUid(orgUnit) ||\n            GeoFeatures.isValidOrgUnitLevel(orgUnit) ||\n            GeoFeatures.isValidOrgUnitGroup(orgUnit) ||\n            GeoFeatures.isValidUserOrgUnit(orgUnit)\n        )\n    }\n\n    /**\n     * @method isValidOrgUnitLevel\n     * @static\n     *\n     * @returns {boolean} True if the org. unit level is valid\n     *\n     * @description\n     * Checks if the org. unit level is valid.\n     */\n    static isValidOrgUnitLevel(level) {\n        const match = level.match(/LEVEL-(.*)$/)\n        return (\n            Array.isArray(match) &&\n            (/^[0-9]+$/.test(match[1]) || isValidUid(match[1]))\n        )\n    }\n\n    /**\n     * @method isValidOrgUnitGroup\n     * @static\n     *\n     * @returns {boolean} True if the org. unit group is valid\n     *\n     * @description\n     * Checks if the org. unit group is valid.\n     */\n    static isValidOrgUnitGroup(group) {\n        const match = group.match(/OU_GROUP-(.*)$/)\n        return Array.isArray(match) && isValidUid(match[1])\n    }\n\n    /**\n     * @method isValidUserOrgUnit\n     * @static\n     *\n     * @returns {boolean} True if the user org. unit is valid\n     *\n     * @description\n     * Checks if the user org. unit is valid.\n     */\n    static isValidUserOrgUnit(orgUnit) {\n        return (\n            orgUnit === GeoFeatures.USER_ORGUNIT ||\n            orgUnit === GeoFeatures.USER_ORGUNIT_CHILDREN ||\n            orgUnit === GeoFeatures.USER_ORGUNIT_GRANDCHILDREN\n        )\n    }\n\n    /**\n     * @method isValidDisplayName\n     * @static\n     *\n     * @returns {boolean} True if display name is valid\n     *\n     * @description\n     * Checks if the display name is valid.\n     */\n    static isValidDisplayName(displayName) {\n        return (\n            displayName === GeoFeatures.DISPLAY_PROPERTY_NAME ||\n            displayName === GeoFeatures.DISPLAY_PROPERTY_SHORTNAME\n        )\n    }\n\n    /**\n     * @method getGeoFeatures\n     * @static\n     *\n     * @returns {GeoFeatures} Object with interaction properties\n     *\n     * @description\n     * Get a new instance of the GeoFeatures object.\n     */\n    static getGeoFeatures(...args) {\n        return new GeoFeatures(...args)\n    }\n\n    static DISPLAY_PROPERTY_NAME = 'NAME'\n\n    static DISPLAY_PROPERTY_SHORTNAME = 'SHORTNAME'\n\n    static USER_ORGUNIT = 'USER_ORGUNIT'\n\n    static USER_ORGUNIT_CHILDREN = 'USER_ORGUNIT_CHILDREN'\n\n    static USER_ORGUNIT_GRANDCHILDREN = 'USER_ORGUNIT_GRANDCHILDREN'\n}\n\nexport default GeoFeatures\n"],"file":"GeoFeatures.js"}