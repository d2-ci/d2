{"version":3,"sources":["../../src/logger/Logger.js"],"names":["Logger","logging","logger","type","console","canLog","rest","logMessage","global","e","window"],"mappings":";;;;;;;AAAA;;;;;;;;IAEMA,M;;;AACF,kBAAYC,OAAZ,EAAqB;AAAA;;AACjB,0BAAUA,OAAV,EAAmB,QAAnB,EAA6B,SAA7B;AACA,SAAKC,MAAL,GAAcD,OAAd;AACH;;;;2BAEME,I,EAAM;AACT,aAAO,CAAC,EAAEA,IAAI,IAAIC,OAAR,IAAmB,mBAAO,KAAKF,MAAL,CAAYC,IAAZ,CAAP,EAA0B,UAA1B,CAArB,CAAR;AACH;;;iCAEiC;AAAA,UAAvBA,IAAuB,uEAAhB,KAAgB;;AAC9B,UAAI,KAAKE,MAAL,CAAYF,IAAZ,KAAqB,KAAKD,MAAL,CAAYC,IAAZ,CAAzB,EAA4C;AAAA;;AAAA,0CADpBG,IACoB;AADpBA,UAAAA,IACoB;AAAA;;AACxC,6BAAKJ,MAAL,EAAYC,IAAZ,sBAAqBG,IAArB;;AACA,eAAO,IAAP;AACH;;AACD,aAAO,KAAP;AACH;;;4BAEc;AAAA,yCAANA,IAAM;AAANA,QAAAA,IAAM;AAAA;;AACX,aAAO,KAAKC,UAAL,cAAgB,OAAhB,SAA4BD,IAA5B,EAAP;AACH;;;4BAEc;AAAA,yCAANA,IAAM;AAANA,QAAAA,IAAM;AAAA;;AACX,aAAO,KAAKC,UAAL,cAAgB,OAAhB,SAA4BD,IAA5B,EAAP;AACH;;;0BAEY;AAAA,yCAANA,IAAM;AAANA,QAAAA,IAAM;AAAA;;AACT,aAAO,KAAKC,UAAL,cAAgB,KAAhB,SAA0BD,IAA1B,EAAP;AACH;;;2BAEa;AAAA,yCAANA,IAAM;AAANA,QAAAA,IAAM;AAAA;;AACV,aAAO,KAAKC,UAAL,cAAgB,MAAhB,SAA2BD,IAA3B,EAAP;AACH;;;gCAEkB;AACf,UAAIJ,MAAJ,CADe,CAGf;;AACA,UAAI;AACA;AACAA,QAAAA,MAAM,GAAGM,MAAM,CAACJ,OAAhB;AACH,OAHD,CAGE,OAAOK,CAAP,EAAU;AACR;;AACA;AACAP,QAAAA,MAAM,GAAGQ,MAAM,CAACN,OAAhB;AACH;;AAED,UAAI,KAAKF,MAAT,EAAiB;AACb,eAAO,KAAKA,MAAZ;AACH;;AACD,aAAQ,KAAKA,MAAL,GAAc,IAAIF,MAAJ,CAAWE,MAAX,CAAtB;AACH;;;;;;eAGUF,M","sourcesContent":["import { checkType, isType } from '../lib/check'\n\nclass Logger {\n    constructor(logging) {\n        checkType(logging, 'object', 'console')\n        this.logger = logging\n    }\n\n    canLog(type) {\n        return !!(type && console && isType(this.logger[type], 'function'))\n    }\n\n    logMessage(type = 'log', ...rest) {\n        if (this.canLog(type) && this.logger[type]) {\n            this.logger[type](...rest)\n            return true\n        }\n        return false\n    }\n\n    debug(...rest) {\n        return this.logMessage('debug', ...rest)\n    }\n\n    error(...rest) {\n        return this.logMessage('error', ...rest)\n    }\n\n    log(...rest) {\n        return this.logMessage('log', ...rest)\n    }\n\n    warn(...rest) {\n        return this.logMessage('warn', ...rest)\n    }\n\n    static getLogger() {\n        let logger\n\n        // TODO: This is not very clean try to figure out a better way to do this.\n        try {\n            // Node version\n            logger = global.console\n        } catch (e) {\n            // Browser version fallback\n            /* istanbul ignore next */\n            logger = window.console\n        }\n\n        if (this.logger) {\n            return this.logger\n        }\n        return (this.logger = new Logger(logger))\n    }\n}\n\nexport default Logger\n"],"file":"Logger.js"}