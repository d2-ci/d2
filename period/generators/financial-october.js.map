{"version":3,"sources":["../../../src/period/generators/financial-october.js"],"names":["generateFinancialOctoberPeriodsUpToYear","year","numberOfYears","locale","Error","periods","date","Date","monthNames","i","period","endDate","setYear","getFullYear","setDate","getDate","startDate","name","id","push","reverse"],"mappings":";;;;;QAGgBA,uC,GAAAA,uC;;AAHhB;;AACA;;AAEO,SAASA,uCAAT,GAA6G;AAAA,QAA5DC,IAA4D,uEAArD,8BAAqD;AAAA,QAAnCC,aAAmC,uEAAnB,EAAmB;AAAA,QAAfC,MAAe,uEAAN,IAAM;AAAE;AAClH,2CAAyBF,IAAzB;AACA,QAAK,CAAC,sBAAUC,aAAV,CAAF,IAA+BA,gBAAgB,CAAnD,EAAsD;AAClD,cAAM,IAAIE,KAAJ,CAAU,0FAAV,CAAN;AACH;;AAED,QAAMC,UAAU,EAAhB;AACA,QAAMC,OAAO,IAAIC,IAAJ,cAAmBN,OAAO,CAA1B,EAAb;AACA,QAAMO,aAAa,qCAAuBL,MAAvB,CAAnB;;AAEA,SAAK,IAAIM,IAAI,CAAb,EAAgBA,IAAIP,aAApB,EAAmCO,GAAnC,EAAwC;AACpC,YAAMC,SAAS,EAAf;AACAA,eAAOC,OAAP,GAAiB,8BAAgBL,IAAhB,CAAjB;AACAA,aAAKM,OAAL,CAAaN,KAAKO,WAAL,KAAqB,CAAlC;AACAP,aAAKQ,OAAL,CAAaR,KAAKS,OAAL,KAAiB,CAA9B;AACAL,eAAOM,SAAP,GAAmB,8BAAgBV,IAAhB,CAAnB;AACAI,eAAOO,IAAP,GAAiBT,WAAW,CAAX,CAAjB,SAAkCF,KAAKO,WAAL,EAAlC,WAA0DL,WAAW,CAAX,CAA1D,UAA2EF,KAAKO,WAAL,KAAqB,CAAhG;AACAH,eAAOQ,EAAP,GAAeZ,KAAKO,WAAL,EAAf;AACAR,gBAAQc,IAAR,CAAaT,MAAb;AACAJ,aAAKQ,OAAL,CAAaR,KAAKS,OAAL,KAAiB,CAA9B;AACH;;AAED;AACA,WAAOV,QAAQe,OAAR,EAAP;AACH","file":"financial-october.js","sourcesContent":["import { isInteger } from '../../lib/check';\nimport { validateIfValueIsInteger, formatAsISODate, getCurrentYear, getMonthNamesForLocale } from '../helpers';\n\nexport function generateFinancialOctoberPeriodsUpToYear(year = getCurrentYear(), numberOfYears = 10, locale = 'en') { // eslint-disable-line import/prefer-default-export\n    validateIfValueIsInteger(year);\n    if ((!isInteger(numberOfYears)) || numberOfYears < 1) {\n        throw new Error('FinancialOctober generator parameter `numberOfYears` should be an integer larger than 0.');\n    }\n\n    const periods = [];\n    const date = new Date(`30 Sep ${year + 1}`);\n    const monthNames = getMonthNamesForLocale(locale);\n\n    for (let i = 0; i < numberOfYears; i++) {\n        const period = {};\n        period.endDate = formatAsISODate(date);\n        date.setYear(date.getFullYear() - 1);\n        date.setDate(date.getDate() + 1);\n        period.startDate = formatAsISODate(date);\n        period.name = `${monthNames[9]} ${date.getFullYear()} - ${monthNames[8]} ${date.getFullYear() + 1}`;\n        period.id = `${date.getFullYear()}Oct`;\n        periods.push(period);\n        date.setDate(date.getDate() - 1);\n    }\n\n    // FinancialOctober periods are collected backwards. If isReverse is true, then do nothing. Else reverse to correct order and return.\n    return periods.reverse();\n}\n"]}