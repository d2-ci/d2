{"version":3,"sources":["../../src/logger/Logger.js"],"names":["Logger","logging","logger","type","console","canLog","rest","logMessage","global","e","window"],"mappings":";;;;;;qjBAAA;;;AACA;;;;IAEMA,M;AACF,oBAAYC,OAAZ,EAAqB;AAAA;;AACjB,8BAAUA,OAAV,EAAmB,QAAnB,EAA6B,SAA7B;AACA,aAAKC,MAAL,GAAcD,OAAd;AACH;;;;+BAEME,I,EAAM;AACT,mBAAO,CAAC,EAAEA,QAAQC,OAAR,IAAmB,mBAAO,KAAKF,MAAL,CAAYC,IAAZ,CAAP,EAA0B,UAA1B,CAArB,CAAR;AACH;;;qCAEiC;AAAA,gBAAvBA,IAAuB,uEAAhB,KAAgB;;AAC9B,gBAAI,KAAKE,MAAL,CAAYF,IAAZ,KAAqB,KAAKD,MAAL,CAAYC,IAAZ,CAAzB,EAA4C;AAAA;;AAAA,kDADpBG,IACoB;AADpBA,wBACoB;AAAA;;AACxC,gCAAKJ,MAAL,EAAYC,IAAZ,iBAAqBG,IAArB;AACA,uBAAO,IAAP;AACH;AACD,mBAAO,KAAP;AACH;;;gCAEc;AAAA,+CAANA,IAAM;AAANA,oBAAM;AAAA;;AACX,mBAAO,KAAKC,UAAL,cAAgB,OAAhB,SAA4BD,IAA5B,EAAP;AACH;;;gCAEc;AAAA,+CAANA,IAAM;AAANA,oBAAM;AAAA;;AACX,mBAAO,KAAKC,UAAL,cAAgB,OAAhB,SAA4BD,IAA5B,EAAP;AACH;;;8BAEY;AAAA,+CAANA,IAAM;AAANA,oBAAM;AAAA;;AACT,mBAAO,KAAKC,UAAL,cAAgB,KAAhB,SAA0BD,IAA1B,EAAP;AACH;;;+BAEa;AAAA,+CAANA,IAAM;AAANA,oBAAM;AAAA;;AACV,mBAAO,KAAKC,UAAL,cAAgB,MAAhB,SAA2BD,IAA3B,EAAP;AACH;;;oCAEkB;AACf,gBAAIJ,eAAJ;;AAEA;AACA,gBAAI;AACA;AACAA,yBAASM,OAAOJ,OAAhB;AACH,aAHD,CAGE,OAAOK,CAAP,EAAU;AACR;AACA;AACAP,yBAASQ,OAAON,OAAhB;AACH;;AAED,gBAAI,KAAKF,MAAT,EAAiB;AACb,uBAAO,KAAKA,MAAZ;AACH;AACD,mBAAQ,KAAKA,MAAL,GAAc,IAAIF,MAAJ,CAAWE,MAAX,CAAtB;AACH;;;;;;kBAGUF,M","file":"Logger.js","sourcesContent":["/* global window */\nimport { checkType, isType } from '../lib/check';\n\nclass Logger {\n    constructor(logging) {\n        checkType(logging, 'object', 'console');\n        this.logger = logging;\n    }\n\n    canLog(type) {\n        return !!(type && console && isType(this.logger[type], 'function'));\n    }\n\n    logMessage(type = 'log', ...rest) {\n        if (this.canLog(type) && this.logger[type]) {\n            this.logger[type](...rest);\n            return true;\n        }\n        return false;\n    }\n\n    debug(...rest) {\n        return this.logMessage('debug', ...rest);\n    }\n\n    error(...rest) {\n        return this.logMessage('error', ...rest);\n    }\n\n    log(...rest) {\n        return this.logMessage('log', ...rest);\n    }\n\n    warn(...rest) {\n        return this.logMessage('warn', ...rest);\n    }\n\n    static getLogger() {\n        let logger;\n\n        // TODO: This is not very clean try to figure out a better way to do this.\n        try {\n            // Node version\n            logger = global.console;\n        } catch (e) {\n            // Browser version fallback\n            /* istanbul ignore next */\n            logger = window.console;\n        }\n\n        if (this.logger) {\n            return this.logger;\n        }\n        return (this.logger = new Logger(logger));\n    }\n}\n\nexport default Logger;\n"]}