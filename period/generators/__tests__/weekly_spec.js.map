{"version":3,"sources":["../../../../src/period/generators/__tests__/weekly_spec.js"],"names":["describe","it","expect","toHaveLength","periods","toEqual","startDate","endDate","name","id","weeksFor2015","weeksFor2014","weeksFor2004","length","toThrowError","Date","getFullYear","count","i","toBe"],"mappings":"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","sourcesContent":["import { generateWeeklyPeriodsForYear } from '../weekly';\n\ndescribe('Weekly period', () => {\n    describe('generateWeeklyPeriodsForYear()', () => {\n        it('should generate 52 periods for the year 2017', () => {\n            expect(generateWeeklyPeriodsForYear(2017)).toHaveLength(52);\n        });\n\n        it('should generate 53 periods for common years starting on Thursday', () => {\n            // https://en.wikipedia.org/wiki/Common_year_starting_on_Thursday\n            expect(generateWeeklyPeriodsForYear(1705)).toHaveLength(53);\n            expect(generateWeeklyPeriodsForYear(2009)).toHaveLength(53);\n            expect(generateWeeklyPeriodsForYear(2015)).toHaveLength(53);\n            expect(generateWeeklyPeriodsForYear(2026)).toHaveLength(53);\n            expect(generateWeeklyPeriodsForYear(2099)).toHaveLength(53);\n        });\n\n        it('should generate 53 periods for leap years starting on Thursday', () => {\n            // https://en.wikipedia.org/wiki/Leap_year_starting_on_Thursday\n            expect(generateWeeklyPeriodsForYear(1948)).toHaveLength(53);\n            expect(generateWeeklyPeriodsForYear(1976)).toHaveLength(53);\n            expect(generateWeeklyPeriodsForYear(2004)).toHaveLength(53);\n            expect(generateWeeklyPeriodsForYear(2032)).toHaveLength(53);\n            expect(generateWeeklyPeriodsForYear(2060)).toHaveLength(53);\n        });\n\n        it('should generate 53 periods for leap years starting on Wednesday', () => {\n            // https://en.wikipedia.org/wiki/Leap_year_starting_on_Wednesday\n            expect(generateWeeklyPeriodsForYear(1936)).toHaveLength(53);\n            expect(generateWeeklyPeriodsForYear(1964)).toHaveLength(53);\n            expect(generateWeeklyPeriodsForYear(1992)).toHaveLength(53);\n            expect(generateWeeklyPeriodsForYear(2020)).toHaveLength(53);\n            expect(generateWeeklyPeriodsForYear(2048)).toHaveLength(53);\n        });\n\n        it('should generate 52 periods for the year 2016', () => {\n            expect(generateWeeklyPeriodsForYear(2016)).toHaveLength(52);\n        });\n\n        it('should generate the correct result for each period', () => {\n            const periods = generateWeeklyPeriodsForYear(2017);\n\n            expect(periods[0]).toEqual({\n                startDate: '2017-01-02',\n                endDate: '2017-01-08',\n                name: 'W1 - 2017-01-02 - 2017-01-08',\n                id: '2017W1',\n            });\n        });\n\n        it('should start the first week of 2015 in the previous year', () => {\n            const weeksFor2015 = generateWeeklyPeriodsForYear(2015);\n\n            expect(weeksFor2015[0]).toEqual({\n                startDate: '2014-12-29',\n                endDate: '2015-01-04',\n                name: 'W1 - 2014-12-29 - 2015-01-04',\n                id: '2015W1',\n            });\n        });\n\n        it('should return the correct first week for 2014', () => {\n            const weeksFor2014 = generateWeeklyPeriodsForYear(2014);\n\n            expect(weeksFor2014[0]).toEqual({\n                startDate: '2013-12-30',\n                endDate: '2014-01-05',\n                name: 'W1 - 2013-12-30 - 2014-01-05',\n                id: '2014W1',\n            });\n        });\n\n        it('should return the correct first week for 2004', () => {\n            const weeksFor2004 = generateWeeklyPeriodsForYear(2004);\n\n            expect(weeksFor2004[0]).toEqual({\n                startDate: '2003-12-29',\n                endDate: '2004-01-04',\n                name: 'W1 - 2003-12-29 - 2004-01-04',\n                id: '2004W1',\n            });\n        });\n\n        it('should return the correct last week for 2015', () => {\n            const weeksFor2015 = generateWeeklyPeriodsForYear(2015);\n\n            expect(weeksFor2015[weeksFor2015.length - 1]).toEqual({\n                startDate: '2015-12-28',\n                endDate: '2016-01-03',\n                name: 'W53 - 2015-12-28 - 2016-01-03',\n                id: '2015W53',\n            });\n        });\n\n        it('should return the correct last week for 2017', () => {\n            const weeksFor2015 = generateWeeklyPeriodsForYear(2017);\n\n            expect(weeksFor2015[weeksFor2015.length - 1]).toEqual({\n                startDate: '2017-12-25',\n                endDate: '2017-12-31',\n                name: 'W52 - 2017-12-25 - 2017-12-31',\n                id: '2017W52',\n            });\n        });\n\n        it('should not allow years before the year zero', () => {\n            expect(() => generateWeeklyPeriodsForYear(-10)).toThrowError();\n        });\n\n        it('should throw an error when passing a Date object', () => {\n            expect(() => generateWeeklyPeriodsForYear(new Date())).toThrowError();\n        });\n\n        it('should generate the same periods when called without as when called with the current year', () => {\n            expect(generateWeeklyPeriodsForYear()).toEqual(generateWeeklyPeriodsForYear(new Date().getFullYear()));\n        });\n\n        it('should have 71 years in 400-year cycle with iso week 53', () => {\n            let count = 0;\n\n            for (let i = 0; i < 400; i++) {\n                count += (generateWeeklyPeriodsForYear(2000 + i).length === 53) ? 1 : 0;\n            }\n\n            expect(count).toBe(71);\n        });\n    });\n});\n"],"file":"weekly_spec.js"}