{"version":3,"sources":["../../src/model/ModelValidation.js"],"names":["ModelValidation","providedLogger","logger","warn","Error","model","modelDefinition","name","Promise","reject","extractValidationViolations","webmessage","response","errorReports","url","getApi","post","catch","e","then","webMessage","status","modelValidation","getLogger","console"],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;IAKMA,e;AACF,6BAAYC,cAAZ,EAA4B;AAAA;;AACxB,8BAAUA,cAAV,EAA0B,QAA1B,EAAoC,iBAApC;AACA,aAAKC,MAAL,GAAcD,cAAd;AACH;;AAED;;;;;;;;;mCAKW;AACP,iBAAKC,MAAL,CAAYC,IAAZ,CAAiB,4CAAjB;AACA,kBAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH;;AAED;;;;;;;;;;;8CAQsBC,K,EAAO;AAAE;AAC3B,gBAAI,EAAEA,SAASA,MAAMC,eAAf,IAAkCD,MAAMC,eAAN,CAAsBC,IAA1D,CAAJ,EAAqE;AACjE,uBAAOC,QAAQC,MAAR,CAAe,6CAAf,CAAP;AACH;;AAED,qBAASC,2BAAT,CAAqCC,UAArC,EAAiD;AAC7C,oBAAIA,WAAWC,QAAX,IAAuBD,WAAWC,QAAX,CAAoBC,YAA/C,EAA6D;AACzD,2BAAOF,WAAWC,QAAX,CAAoBC,YAA3B;AACH;AACD,sBAAM,IAAIT,KAAJ,CAAU,wDAAV,CAAN;AACH;;AAED,gBAAMU,mBAAiBT,MAAMC,eAAN,CAAsBC,IAA7C;;AAEA;AACA,mBAAO,cAAIQ,MAAJ,GAAaC,IAAb,CAAkBF,GAAlB,EAAuB,gCAAqBT,KAArB,CAAvB,EACFY,KADE,CACI;AAAA,uBAAKT,QAAQC,MAAR,CAAeS,CAAf,CAAL;AAAA,aADJ,EAEFC,IAFE,CAEG,UAACC,UAAD,EAAgB;AAClB,oBAAIA,WAAWC,MAAX,KAAsB,IAA1B,EAAgC;AAC5B,2BAAO,EAAP;AACH;AACD,uBAAOb,QAAQC,MAAR,CAAeW,UAAf,CAAP;AACH,aAPE,EAQFH,KARE,CAQIP,2BARJ,CAAP;AASH;;AAED;;;;;;;;;6CAM4B;AACxB,gBAAI,KAAKY,eAAT,EAA0B;AACtB,uBAAO,KAAKA,eAAZ;AACH;AACD,mBAAQ,KAAKA,eAAL,GAAuB,IAAItB,eAAJ,CAAoB,iBAAOuB,SAAP,CAAiBC,OAAjB,CAApB,CAA/B;AACH;;;;;;kBAGUxB,e","file":"ModelValidation.js","sourcesContent":["import { checkType } from '../lib/check';\nimport Logger from '../logger/Logger';\nimport Api from '../api/Api';\nimport { getOwnedPropertyJSON } from './helpers/json';\n\n/**\n * Handles validation of Model objects based on their modelDefinition.\n *\n * @memberof module:model\n */\nclass ModelValidation {\n    constructor(providedLogger) {\n        checkType(providedLogger, 'object', 'logger (Logger)');\n        this.logger = providedLogger;\n    }\n\n    /**\n     * @deprecated Client side model validation is deprecated in favour of server side validation only.\n     *\n     * @returns {{status: boolean, messages: Array}} Returns {status: true, messages: []}\n     */\n    validate() {\n        this.logger.warn('Client side model validation is deprecated');\n        throw new Error('Client side model validation is deprecated');\n    }\n\n    /**\n     * Sends a POST request against the `api/schemas` endpoint to check if the model is valid.\n     *\n     * @param {Model} model The model that should be validated.\n     * @returns {Array} Returns an array with validation messages if there are any.\n     *\n     * @note {warn} Currently only checks\n     */\n    validateAgainstSchema(model) { // eslint-disable-line class-methods-use-this\n        if (!(model && model.modelDefinition && model.modelDefinition.name)) {\n            return Promise.reject('model.modelDefinition.name can not be found');\n        }\n\n        function extractValidationViolations(webmessage) {\n            if (webmessage.response && webmessage.response.errorReports) {\n                return webmessage.response.errorReports;\n            }\n            throw new Error('Response was not a WebMessage with the expected format');\n        }\n\n        const url = `schemas/${model.modelDefinition.name}`;\n\n        // TODO: The function getOwnedPropertyJSON should probably not be exposed, perhaps we could have a getJSONForModel(ownedPropertiesOnly=true) method.\n        return Api.getApi().post(url, getOwnedPropertyJSON(model))\n            .catch(e => Promise.reject(e))\n            .then((webMessage) => {\n                if (webMessage.status === 'OK') {\n                    return [];\n                }\n                return Promise.reject(webMessage);\n            })\n            .catch(extractValidationViolations);\n    }\n\n    /**\n     * Returns the `ModelValidation` singleton. Creates a new one if it does not yet exist.\n     * Grabs a logger instance by calling `Logger.getLogger`\n     *\n     * @returns {ModelValidation} New or memoized instance of `ModelInstance`\n     */\n    static getModelValidation() {\n        if (this.modelValidation) {\n            return this.modelValidation;\n        }\n        return (this.modelValidation = new ModelValidation(Logger.getLogger(console)));\n    }\n}\n\nexport default ModelValidation;\n"]}