{"version":3,"sources":["../../../src/model/__tests__/ModelBase.spec.js"],"names":["jest","mock","describe","validateAgainstSchemaSpy","beforeEach","ModelValidation","getModelValidation","validateAgainstSchema","mockReset","it","modelBase","ModelBase","expect","save","toBe","validate","clone","modelDefinition","model","validateFunction","fn","apiEndpoint","mockReturnValue","Promise","resolve","saveNew","Model","modelDef","dirty","DIRTY_PROPERTY_LIST","Set","dataValues","Object","defineProperty","get","id","status","create","toBeCalled","then","toBeCalledWith","catch","e","not","assertions","size","result","toEqual","message","httpStatus","response","uid","href","modelValidations","organisationUnits","owner","age","persisted","type","required","min","max","unique","validations","reject","errMessage","property","validationState","name","enumerable","set","newValue","userGroups","Map","modelClone","delete","toBeInstanceOf","Function","dataElements","getCollectionChildren","toContain","dataEntryForm","getCollectionChildrenPropertyNames","indicators","embeddedObject","user","accesses","firstName","read","write","getReferenceProperties","randomObject","legends","getEmbeddedObjectCollectionPropertyNames","getDirtyChildren","toJSON","expected"],"mappings":"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","sourcesContent":["import ModelValidation from '../ModelValidation';\nimport ModelBase, { DIRTY_PROPERTY_LIST } from '../ModelBase';\n\njest.mock('../ModelValidation');\n\ndescribe('ModelBase', () => {\n    // TODO: For some reason we have to setup the mock before the beforeEach and reset the spy, should figure out a way to perhaps do this differently.\n    let validateAgainstSchemaSpy;\n\n    beforeEach(() => {\n        validateAgainstSchemaSpy = ModelValidation.getModelValidation().validateAgainstSchema;\n        validateAgainstSchemaSpy.mockReset();\n    });\n\n    it('should have a save method', () => {\n        const modelBase = new ModelBase();\n        expect(typeof modelBase.save).toBe('function');\n    });\n\n    it('should have a validate method', () => {\n        const modelBase = new ModelBase();\n        expect(typeof modelBase.validate).toBe('function');\n    });\n\n    it('should have a clone method', () => {\n        const modelBase = new ModelBase();\n        expect(typeof modelBase.clone).toBe('function');\n    });\n\n    describe('saving', () => {\n        let modelDefinition;\n        let model;\n        let validateFunction;\n\n        beforeEach(() => {\n            validateFunction = jest.fn();\n\n            modelDefinition = {\n                apiEndpoint: '/dataElements',\n                save: jest.fn().mockReturnValue(Promise.resolve()),\n                saveNew: jest.fn().mockReturnValue(Promise.resolve()),\n            };\n\n            class Model extends ModelBase {\n                constructor(modelDef) {\n                    super();\n                    this.modelDefinition = modelDef;\n                    this.validate = validateFunction;\n                    this.dirty = true;\n                    this[DIRTY_PROPERTY_LIST] = new Set(['name']);\n                    this.dataValues = {};\n                }\n            }\n\n            model = new Model(modelDefinition);\n\n            Object.defineProperty(model, 'id', {\n                get() {\n                    return this.dataValues.id;\n                },\n            });\n        });\n\n        describe('create()', () => {\n            it('should call validate before calling save', () => {\n                validateFunction.mockReturnValue(Promise.resolve({ status: true }));\n\n                model.create();\n\n                // TODO: Fix assertion when the .toBeCalledBefore(model.save) is available https://github.com/facebook/jest/issues/4402\n                expect(model.validate).toBeCalled();\n            });\n\n            it('should call saveNew on the model', () => {\n                validateFunction.mockReturnValue(Promise.resolve({ status: true }));\n\n                return model.create()\n                    .then(() => {\n                        expect(modelDefinition.saveNew).toBeCalledWith(model);\n                    });\n            });\n\n            it('should not call saveNew when validate fails', () => {\n                validateFunction.mockReturnValue(Promise.resolve({ status: false }));\n\n                return model.create()\n                    .catch(e => e)\n                    .then(() => {\n                        expect(modelDefinition.save).not.toBeCalled();\n                    });\n            });\n        });\n\n        describe('save()', () => {\n            beforeEach(() => {\n                model.validate.mockReturnValue(Promise.resolve({ status: true }));\n            });\n\n            it('should call the save on the model modelDefinition with itself as a parameter', () => model.save()\n                .then(() => {\n                    expect(modelDefinition.save).toBeCalledWith(model);\n                }));\n\n            it('should call validate before calling save', () => {\n                model.save();\n\n                expect(model.validate).toBeCalled();\n            });\n\n            it('should not call save when validate fails', () => {\n                model.validate.mockReturnValue(Promise.resolve({ status: false }));\n\n                return model.save()\n                    .catch(e => e)\n                    .then(() => {\n                        expect(modelDefinition.save).not.toBeCalled();\n                    });\n            });\n\n            it('should not call save when the model is not dirty', () => {\n                model.dirty = false;\n\n                model.save();\n\n                expect(modelDefinition.save).not.toBeCalled();\n            });\n\n            it('should reset dirty to false after save', () => {\n                expect.assertions(1);\n\n                return model.save()\n                    .then(() => {\n                        expect(model.dirty).toBe(false);\n                    });\n            });\n\n            it('should reset the DIRTY_PROPERTY_LIST to an empty set after save', () => {\n                expect.assertions(1);\n\n                return model.save()\n                    .then(() => {\n                        expect(model[DIRTY_PROPERTY_LIST].size).toBe(0);\n                    });\n            });\n\n            it('should return a promise that resolves to an empty object when the model is not dirty', () => {\n                model.dirty = false;\n\n                expect.assertions(1);\n\n                return model.save()\n                    .then((result) => {\n                        expect(result).toEqual({});\n                    });\n            });\n\n            it('should return rejected promise when the model is not valid', () => {\n                model.validate.mockReturnValue(Promise.resolve({ status: false }));\n\n                expect.assertions(1);\n\n                return model.save()\n                    .catch((message) => {\n                        expect(message).toEqual({ status: false });\n                    });\n            });\n\n            it('should set the newly created id onto the model', () => {\n                modelDefinition.save.mockReturnValue(Promise.resolve({\n                    httpStatus: 'Created',\n                    response: {\n                        uid: 'DXyJmlo9rge',\n                    },\n                }));\n\n                return model.save()\n                    .then(() => {\n                        expect(model.id).toBe('DXyJmlo9rge');\n                    });\n            });\n\n            it('should set the correct href property onto the object', () => {\n                modelDefinition.save.mockReturnValue(Promise.resolve({\n                    httpStatus: 'Created',\n                    response: {\n                        uid: 'DXyJmlo9rge',\n                    },\n                }));\n\n                return model.save()\n                    .then(() => {\n                        expect(model.dataValues.href).toBe('/dataElements/DXyJmlo9rge');\n                    });\n            });\n\n            it('should set the dirty children\\'s dirty flag back to false', () => {\n                model.modelDefinition.modelValidations = {\n                    organisationUnits: {\n                        owner: true,\n                    },\n                };\n                model.organisationUnits = {\n                    size: 1,\n                    dirty: true,\n                };\n\n                return model.save()\n                    .then(() => {\n                        expect(model.organisationUnits.dirty).toBe(false);\n                    });\n            });\n        });\n    });\n\n    describe('validate', () => {\n        let modelValidations;\n        let model;\n\n        beforeEach(() => {\n            modelValidations = {\n                age: {\n                    persisted: true,\n                    type: 'NUMBER',\n                    required: true,\n                    min: 0,\n                    max: 2342,\n                    owner: true,\n                    unique: false,\n                },\n            };\n\n            class Model extends ModelBase {\n                constructor(validations) {\n                    super();\n                    this.modelDefinition = {};\n                    this.modelDefinition.modelValidations = validations;\n                    this.dataValues = {\n                        age: 4,\n                    };\n                }\n            }\n\n            model = new Model(modelValidations);\n\n            validateAgainstSchemaSpy.mockReturnValue(Promise.resolve([]));\n        });\n\n        it('should fail when the async validate fails', () => {\n            const message = 'Validation against schema endpoint failed.';\n            validateAgainstSchemaSpy.mockReturnValue(Promise.reject(message));\n\n            expect.assertions(1);\n\n            return model.validate()\n                .catch((errMessage) => {\n                    expect(errMessage).toBe(message);\n                });\n        });\n\n        it('should call the validateAgainstSchema method on the modelValidator', () => {\n            expect.assertions(1);\n\n            return model.validate()\n                .then(() => {\n                    expect(validateAgainstSchemaSpy).toBeCalled();\n                });\n        });\n\n        it('should call validateAgainstSchema with the model', () => {\n            expect.assertions(1);\n\n            return model.validate()\n                .then(() => {\n                    expect(validateAgainstSchemaSpy).toBeCalledWith(model);\n                });\n        });\n\n        it('should return false when there are the asyncValidation against the schema failed', () => {\n            validateAgainstSchemaSpy\n                .mockReturnValue(Promise.resolve([\n                    { message: 'Required property missing.', property: 'name' },\n                ]));\n\n            expect.assertions(1);\n\n            return model.validate()\n                .then((validationState) => {\n                    expect(validationState.status).toBe(false);\n                });\n        });\n\n        it('should return false when there are the asyncValidation against the schema failed', () => {\n            validateAgainstSchemaSpy.mockReturnValue(Promise.resolve([]));\n\n            expect.assertions(1);\n\n            return model.validate()\n                .then((validationState) => {\n                    expect(validationState.status).toBe(true);\n                });\n        });\n    });\n\n    describe('clone', () => {\n        let modelDefinition;\n        let model;\n\n        class Model extends ModelBase {\n            constructor(modelDef) {\n                super();\n                this.modelDefinition = modelDef;\n                this.validate = jest.fn().mockReturnValue(Promise.resolve({ status: true }));\n                this.dirty = false;\n                this[DIRTY_PROPERTY_LIST] = new Set([]);\n                this.dataValues = {\n                    id: 'DXyJmlo9rge',\n                    name: 'My metadata object',\n                };\n            }\n\n            static create(modelDef) {\n                model = new Model(modelDef);\n\n                Object.defineProperty(model, 'id', {\n                    get() {\n                        return this.dataValues.id;\n                    },\n                    enumerable: true,\n                });\n                Object.defineProperty(model, 'name', {\n                    get() {\n                        return this.dataValues.name;\n                    },\n                    set(newValue) {\n                        this.dataValues.name = newValue;\n                    },\n                    enumerable: true,\n                });\n                Object.defineProperty(model, 'userGroups', {\n                    get() {\n                        return this.dataValues.userGroups;\n                    },\n                    enumerable: true,\n                });\n\n                return model;\n            }\n        }\n\n        beforeEach(() => {\n            modelDefinition = {\n                apiEndpoint: '/dataElements',\n                save: jest.fn().mockReturnValue(Promise.resolve()),\n                saveNew: jest.fn().mockReturnValue(Promise.resolve()),\n                create: jest.fn().mockReturnValue(Model.create(modelDefinition)),\n                modelValidations: {\n                    id: {},\n                    name: {},\n                    userGroups: {\n                        type: 'COLLECTION',\n                    },\n                },\n            };\n\n            model = Model.create(modelDefinition);\n        });\n\n        it('should call create on the modelDefinition', () => {\n            model.clone();\n\n            expect(modelDefinition.create).toBeCalled();\n        });\n\n        it('should pass all the dataValues to the create function', () => {\n            model.clone();\n\n            expect(modelDefinition.create).toBeCalledWith({\n                id: 'DXyJmlo9rge',\n                name: 'My metadata object',\n            });\n        });\n\n        it('should pass collections arrays of ids', () => {\n            // Would generally be a ModelCollection, but it extends Map so for simplicity we use Map directly.\n            model.dataValues.userGroups = new Map([\n                ['P3jJH5Tu5VC', { id: 'P3jJH5Tu5VC' }],\n                ['FQ2o8UBlcrS', { id: 'FQ2o8UBlcrS' }],\n            ]);\n\n            model.clone();\n\n            expect(modelDefinition.create).toBeCalledWith({\n                id: 'DXyJmlo9rge',\n                name: 'My metadata object',\n                userGroups: [\n                    { id: 'P3jJH5Tu5VC' },\n                    { id: 'FQ2o8UBlcrS' },\n                ],\n            });\n        });\n\n        it('should retain all of the values in the child collections', () => {\n            model.dataValues.userGroups = new Map([\n                ['P3jJH5Tu5VC', { id: 'P3jJH5Tu5VC',\n                    name: 'Administrators',\n                    clone() {\n                        return { id: 'P3jJH5Tu5VC', name: 'Administrators' };\n                    } }],\n                ['FQ2o8UBlcrS', { id: 'FQ2o8UBlcrS',\n                    name: 'Super users',\n                    clone() {\n                        return { id: 'FQ2o8UBlcrS', name: 'Super users' };\n                    } }],\n            ]);\n\n            model.clone();\n\n            expect(modelDefinition.create).toBeCalledWith({\n                id: 'DXyJmlo9rge',\n                name: 'My metadata object',\n                userGroups: [\n                    { id: 'P3jJH5Tu5VC', name: 'Administrators' },\n                    { id: 'FQ2o8UBlcrS', name: 'Super users' },\n                ],\n            });\n        });\n\n        it('should return an independent clone', () => {\n            const modelClone = model.clone();\n\n            expect(model).not.toBe(modelClone);\n\n            modelClone.name = 'NewName';\n\n            expect(modelClone.dataValues.name).toBe('NewName');\n            expect(model.dataValues.name).toBe('My metadata object');\n        });\n\n        it('should preserve the dirty state of the original model', () => {\n            model.dirty = true;\n            model[DIRTY_PROPERTY_LIST] = new Set(['name']);\n\n            const modelClone = model.clone();\n\n            expect(modelClone.dirty).toBe(true);\n        });\n    });\n\n    describe('delete', () => {\n        let modelDefinition;\n        let model;\n\n        beforeEach(() => {\n            modelDefinition = {\n                delete: jest.fn().mockReturnValue(new Promise((resolve) => { resolve(); })),\n            };\n\n            class Model extends ModelBase {\n                constructor(modelDef) {\n                    super();\n                    this.modelDefinition = modelDef;\n                    this.validate = jest.fn().mockReturnValue(Promise.resolve({ status: true }));\n                    this.dirty = true;\n                    this[DIRTY_PROPERTY_LIST] = new Set(['name']);\n                }\n            }\n\n            model = new Model(modelDefinition);\n        });\n\n        it('should have a delete method', () => {\n            expect(model.delete).toBeInstanceOf(Function);\n        });\n\n        it('should call delete on the modeldefinition when called', () => {\n            model.delete();\n\n            expect(model.modelDefinition.delete).toBeCalled();\n        });\n\n        it('should call the modelDefinition.delete method with the model', () => {\n            model.delete();\n\n            expect(model.modelDefinition.delete).toBeCalledWith(model);\n        });\n\n        it('should return a promise', () => {\n            expect(model.delete()).toBeInstanceOf(Promise);\n        });\n    });\n\n    describe('getCollectionChildren', () => {\n        let model;\n\n        beforeEach(() => {\n            model = new ModelBase();\n            model.modelDefinition = {\n                modelValidations: {\n                    dataElements: {\n                        owner: true,\n                    },\n                    userGroups: {\n\n                    },\n                },\n            };\n            model.dataElements = {\n                name: 'dataElements',\n                dirty: true,\n                size: 2,\n            };\n\n            model.userGroups = {\n                name: 'userGroups',\n            };\n        });\n\n        it('should return the collection children', () => {\n            expect(model.getCollectionChildren()).toContain(model.dataElements);\n        });\n\n        it('should not return the children that are not collections', () => {\n            expect(model.getCollectionChildren()).not.toContain(model.userGroups);\n        });\n    });\n\n    describe('getCollectionChildrenPropertyNames', () => {\n        let model;\n\n        beforeEach(() => {\n            model = new ModelBase();\n            model.modelDefinition = {\n                modelValidations: {\n                    dataElements: {\n                        type: 'COLLECTION',\n                    },\n                    dataEntryForm: {\n                        type: 'COMPLEX',\n                    },\n                },\n            };\n\n            model.dataElements = [];\n        });\n\n        it('should return the correct property collections', () => {\n            expect(model.getCollectionChildrenPropertyNames()).toContain('dataElements');\n        });\n\n        it('should not return the collection for the property if there is no modelValidation for the property', () => {\n            model.indicators = [];\n\n            expect(model.getCollectionChildrenPropertyNames()).not.toContain('indicators');\n        });\n\n        it('should not return the collection for the property if there is no modelValidation for the property', () => {\n            model.modelDefinition.modelValidations.indicators = {\n                type: 'COLLECTION',\n            };\n\n            expect(model.getCollectionChildrenPropertyNames()).not.toContain('indicators');\n        });\n    });\n\n    describe('getReferenceProperties', () => {\n        let model;\n\n        beforeEach(() => {\n            model = new ModelBase();\n            model.modelDefinition = {\n                modelValidations: {\n                    dataElements: {\n                        type: 'COLLECTION',\n                        embeddedObject: false,\n                    },\n                    dataEntryForm: {\n                        type: 'COMPLEX',\n                    },\n                    user: {\n                        type: 'REFERENCE',\n                        embeddedObject: false,\n                    },\n                    accesses: {\n                        type: 'REFERENCE',\n                        embeddedObject: true,\n                    },\n                },\n            };\n\n            model.dataElements = [];\n            model.user = {\n                id: 'xE7jOejl9FI',\n                firstName: 'John',\n            };\n            model.accesses = {\n                read: true,\n                write: true,\n            };\n        });\n\n        it('should return the correct reference properties', () => {\n            expect(model.getReferenceProperties()).toContain('user');\n        });\n\n        it('should not return the reference property if there is no modelValidation for the property', () => {\n            model.randomObject = {};\n\n            expect(model.getReferenceProperties()).not.toContain('randomObject');\n        });\n\n        it('should not return the reference property if there is no value for the property', () => {\n            model.modelDefinition.modelValidations.randomObject = {\n                type: 'REFERENCE',\n            };\n\n            expect(model.getReferenceProperties()).not.toContain('randomObject');\n        });\n\n        it('should not return the property if the reference property is embedded', () => {\n            expect(model.getReferenceProperties()).not.toContain('accesses');\n        });\n    });\n\n    describe('getEmbeddedObjectCollectionPropertyNames', () => {\n        let model;\n\n        beforeEach(() => {\n            model = new ModelBase();\n            model.modelDefinition = {\n                modelValidations: {\n                    dataElements: {\n                        type: 'COLLECTION',\n                        embeddedObject: false,\n                    },\n                    dataEntryForm: {\n                        type: 'COMPLEX',\n                    },\n                    legends: {\n                        type: 'COLLECTION',\n                        embeddedObject: true,\n                    },\n                },\n            };\n\n            model.dataElements = [];\n            model.legends = [];\n        });\n\n        it('should include the embedded collection', () => {\n            expect(model.getEmbeddedObjectCollectionPropertyNames()).toContain('legends');\n        });\n\n        it('should not include non embedded object collections', () => {\n            expect(model.getEmbeddedObjectCollectionPropertyNames()).not.toContain('dataElements');\n        });\n    });\n\n    describe('getDirtyChildren', () => {\n        let model;\n\n        beforeEach(() => {\n            model = new ModelBase();\n            model.modelDefinition = {\n                modelValidations: {\n                    dataElements: {\n                        owner: true,\n                    },\n                },\n            };\n            model.dataElements = {\n                name: 'dataElements',\n                dirty: true,\n                size: 2,\n            };\n        });\n\n        it('should return the dirty children properties', () => {\n            expect(model.getDirtyChildren()).toEqual([model.dataElements]);\n        });\n    });\n\n    describe('toJSON', () => {\n        let model;\n\n        beforeEach(() => {\n            model = new ModelBase();\n        });\n\n        it('should be a function', () => {\n            expect(typeof model.toJSON).toBe('function');\n        });\n\n        it('should not throw an exception on `toJSON` for base models', () => {\n            expect(model.toJSON()).toEqual({});\n        });\n\n        it('should return a json representation of the model', () => {\n            model.modelDefinition = {\n                modelValidations: {\n                    name: {\n                        owner: true,\n                    },\n                    dataElements: {\n                        owner: true,\n                        type: 'COLLECTION',\n                    },\n                },\n            };\n            model.dataValues = {\n                name: 'ANC',\n                dataElements: new Map([\n                    ['P3jJH5Tu5VC', { id: 'P3jJH5Tu5VC', name: 'anc1' }],\n                    ['FQ2o8UBlcrS', { id: 'FQ2o8UBlcrS', name: 'anc2' }],\n                ]),\n            };\n\n            model.name = model.dataValues.name;\n            model.dataElements = model.dataValues.dataElements;\n            const expected = ({\n                name: 'ANC',\n                dataElements: [\n                    { id: 'P3jJH5Tu5VC' },\n                    { id: 'FQ2o8UBlcrS' },\n                ],\n            });\n\n            expect(model.toJSON()).toEqual(expected);\n        });\n    });\n});\n"],"file":"ModelBase.spec.js"}