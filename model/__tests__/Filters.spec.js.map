{"version":3,"sources":["../../../src/model/__tests__/Filters.spec.js"],"names":["describe","it","expect","Filters","getFilters","toBeInstanceOf","Function","filters","beforeEach","on","Filter","filter","propertyName","toBe","add","length","value","comparator","toThrowError","resolvedPromise","modelDefinition","Promise","resolve","ModelDefinition","list","jest","fn","mockReturnValue","toBeCalled","result","getQueryFilterValues","toEqual","equals","like","logicMode","toThrow","rootJunction"],"mappings":"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","sourcesContent":["\n\nimport Filters from '../Filters';\nimport Filter from '../Filter';\n\ndescribe('Filters', () => {\n    describe('getFilters', () => {\n        it('should be a function', () => {\n            expect(Filters.getFilters).toBeInstanceOf(Function);\n        });\n\n        it('should return an instance of Filters', () => {\n            const filters = new Filters();\n\n            expect(filters).toBeInstanceOf(Filters);\n        });\n    });\n\n    describe('on', () => {\n        let filters;\n\n        beforeEach(() => {\n            filters = new Filters();\n        });\n\n        it('should return an instance of the Filter', () => {\n            expect(filters.on('code')).toBeInstanceOf(Filter);\n        });\n\n        it('should have preset the filter with the passed property', () => {\n            const filter = filters.on('code');\n\n            expect(filter.propertyName).toBe('code');\n        });\n    });\n\n    describe('add', () => {\n        let filters;\n\n        beforeEach(() => {\n            filters = new Filters();\n        });\n\n        it('should add a filter instance to the list of filters', () => {\n            const filter = new Filter(filters);\n\n            filters.add(filter);\n\n            expect(filters.filters.length).toBe(1);\n            expect(filters.filters[0]).toBe(filter);\n        });\n\n        it('should not add the filter if it is not an instance of Filter', () => {\n            const filter = { value: 'someValue', comparator: 'like' };\n\n            expect(() => filters.add(filter)).toThrowError('filter should be an instance of Filter');\n        });\n    });\n\n    describe('list', () => {\n        let resolvedPromise;\n        let modelDefinition;\n        let filters;\n\n        beforeEach(() => {\n            resolvedPromise = Promise.resolve([]);\n\n            class ModelDefinition {\n                constructor() {\n                    this.list = jest.fn().mockReturnValue(resolvedPromise);\n                }\n            }\n\n            modelDefinition = new ModelDefinition();\n            filters = new Filters(modelDefinition);\n        });\n\n        it('should call the list method on the modelDefinition', () => {\n            filters.list();\n\n            expect(modelDefinition.list).toBeCalled();\n        });\n\n        it('should return the promise from the list method', () => {\n            const result = filters.list();\n\n            expect(result).toBe(resolvedPromise);\n        });\n    });\n\n    describe('getQueryFilterValues', () => {\n        let filters;\n\n        beforeEach(() => {\n            filters = new Filters();\n        });\n\n        it('should be a function', () => {\n            expect(filters.getQueryFilterValues).toBeInstanceOf(Function);\n        });\n\n        it('should return an empty array when no filters are set', () => {\n            expect(filters.getQueryFilterValues()).toEqual([]);\n        });\n\n        it('should return the set filters', () => {\n            filters.on('code').equals('Partner_453');\n            filters.on('name').like('John');\n\n            expect(filters.getQueryFilterValues()).toEqual(['code:eq:Partner_453', 'name:like:John']);\n        });\n    });\n\n    describe('logicMode', () => {\n        let filters;\n\n        beforeEach(() => {\n            filters = new Filters();\n        });\n\n        it('should be a function', () => {\n            expect(filters.getQueryFilterValues).toBeInstanceOf(Function);\n        });\n\n        it('should throw when invalid rootJunction are given', () => {\n            expect(() => filters.logicMode('asf')).toThrow();\n        });\n\n        it('should set the rootJunction on the object', () => {\n            filters.logicMode('OR');\n            expect(filters.rootJunction).toEqual('OR');\n        });\n    });\n});\n"],"file":"Filters.spec.js"}