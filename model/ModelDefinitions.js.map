{"version":3,"sources":["../../src/model/ModelDefinitions.js"],"names":["ModelDefinitions","modelDefinition","name","e","Error","join","plural","transformer","Object","keys","filter","hasOwnProperty","map","getModelDefinitions","modelDefinitions"],"mappings":";;;;;;;AAAA;;;;;;;;AAEA;;;;;;;;;;;;IAYMA,gB;;;;;;;;;AACF;;AACA;;;;;;;;;;;wBAWIC,e,EAAiB;AACjB,UAAI;AACA,8BAAUA,eAAe,CAACC,IAA1B,EAAgC,QAAhC;AACH,OAFD,CAEE,OAAOC,CAAP,EAAU;AACR,cAAM,IAAIC,KAAJ,CAAU,6DAAV,CAAN;AACH;;AAED,UAAI,KAAKH,eAAe,CAACC,IAArB,CAAJ,EAAgC;AAC5B,cAAM,IAAIE,KAAJ,CAAU,CAAC,OAAD,EAAUH,eAAe,CAACC,IAA1B,EAAgC,gBAAhC,EAAkDG,IAAlD,CAAuD,GAAvD,CAAV,CAAN;AACH;;AACD,WAAKJ,eAAe,CAACC,IAArB,IAA6BD,eAA7B;;AAEA,UAAI,mBAAOA,eAAe,CAACK,MAAvB,EAA+B,QAA/B,CAAJ,EAA8C;AAC1C,aAAKL,eAAe,CAACK,MAArB,IAA+BL,eAA/B;AACH;AACJ;AAED;;;;;;;;;;;;;;;;;;0CAesBM,W,EAAa;AAAA;;AAC/B,4BAAUA,WAAV,EAAuB,UAAvB,EAAmC,aAAnC;AAEA,aAAOC,MAAM,CAACC,IAAP,CAAY,IAAZ,EACFC,MADE,CACK,UAAAT,eAAe;AAAA,eAAI,KAAI,CAACU,cAAL,CAAoBV,eAApB,KACpB,EAAE,KAAI,CAACA,eAAD,CAAJ,CAAsBK,MAAtB,KAAiCL,eAAnC,CADgB;AAAA,OADpB,EAIFW,GAJE,CAIE,UAAAX,eAAe;AAAA,eAAIM,WAAW,CAAC,KAAI,CAACN,eAAD,CAAL,CAAf;AAAA,OAJjB,CAAP;AAKH;;;;KAGL;;;AACA,SAASY,mBAAT,GAA+B;AAC3B,MAAIA,mBAAmB,CAACC,gBAAxB,EAA0C;AACtC,WAAOD,mBAAmB,CAACC,gBAA3B;AACH;;AACD,SAAQD,mBAAmB,CAACC,gBAApB,GAAuC,IAAId,gBAAJ,EAA/C;AACH;;AAEDA,gBAAgB,CAACa,mBAAjB,GAAuCA,mBAAvC;eAEeb,gB","sourcesContent":["import { checkType, isType } from '../lib/check';\n\n/**\n * Contains all the `ModelDefinition`s that are available. The definitions are properties on the object.\n * This would be used as a main entry point to do any interaction.\n *\n * After calling the initialise function `d2({baseUrl: 'dhis/api'})` this object is the `models` property\n * that allows you to access\n *\n * @example\n * models.dataElement.getList();\n *\n * @memberof module:model\n */\nclass ModelDefinitions {\n    // TODO: Elaborate this documentation\n    /**\n     * This will allow you to add your own custom ModelDefinitions.\n     *\n     * The Definition object should have the following properties\n     * `modelName, modelNamePlural, modelOptions, properties, validations`\n     *\n     * @param {ModelDefinition} modelDefinition Add a model definition to the definitions collection\n     *\n     * @example\n     * models.add({name: 'MyDefinition', plural: 'MyDefinitions', endPointname: '/myDefinition'});\n     */\n    add(modelDefinition) {\n        try {\n            checkType(modelDefinition.name, 'string');\n        } catch (e) {\n            throw new Error('Name should be set on the passed ModelDefinition to add one');\n        }\n\n        if (this[modelDefinition.name]) {\n            throw new Error(['Model', modelDefinition.name, 'already exists'].join(' '));\n        }\n        this[modelDefinition.name] = modelDefinition;\n\n        if (isType(modelDefinition.plural, 'string')) {\n            this[modelDefinition.plural] = modelDefinition;\n        }\n    }\n\n    /**\n     * Map through the modelDefinitions like you would with a simple `Array.map()`\n     *\n     * @param {Function} transformer Transformer function that will be run for each `ModelDefinition`\n     * @returns {Array} Array with the `ModelDefinition` objects.\n     *\n     * @example\n     * models.mapThroughDefinitions(definition => console.log(definition.name);\n     *\n     * @note {info} When mapping through the definition list `transformer` is called with the just the definition\n     * Unlike other map functions, no index or the full object is being passed.\n     *\n     * @note {warn} The resulting array contains references to the actual objects. It does not work like immutable array functions.\n     *\n     */\n    mapThroughDefinitions(transformer) {\n        checkType(transformer, 'function', 'transformer');\n\n        return Object.keys(this)\n            .filter(modelDefinition => this.hasOwnProperty(modelDefinition)\n                && !(this[modelDefinition].plural === modelDefinition),\n            )\n            .map(modelDefinition => transformer(this[modelDefinition]));\n    }\n}\n\n// Model definitions singleton!\nfunction getModelDefinitions() {\n    if (getModelDefinitions.modelDefinitions) {\n        return getModelDefinitions.modelDefinitions;\n    }\n    return (getModelDefinitions.modelDefinitions = new ModelDefinitions());\n}\n\nModelDefinitions.getModelDefinitions = getModelDefinitions;\n\nexport default ModelDefinitions;\n"],"file":"ModelDefinitions.js"}