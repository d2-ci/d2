{"version":3,"sources":["../../src/model/ModelCollection.js"],"names":["throwIfContainsOtherThanModelObjects","values","Symbol","iterator","toCheck","forEach","value","Model","throwIfContainsModelWithoutUid","id","ModelCollection","modelDefinition","pagerData","ModelDefinition","pager","Pager","valuesContainerMap","Map","bind","set","resultArray","model","push","clear","call","args","delete","entries","get","has","keys","size"],"mappings":"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","sourcesContent":["import { isValidUid, isArray, checkType } from '../lib/check'\nimport { throwError } from '../lib/utils'\nimport Model from './Model'\nimport ModelDefinition from './ModelDefinition'\nimport Pager from '../pager/Pager'\n\nfunction throwIfContainsOtherThanModelObjects(values) {\n    if (values && values[Symbol.iterator]) {\n        const toCheck = [...values]\n        toCheck.forEach(value => {\n            if (!(value instanceof Model)) {\n                throwError(\n                    'Values of a ModelCollection must be instances of Model'\n                )\n            }\n        })\n    }\n}\n\nfunction throwIfContainsModelWithoutUid(values) {\n    if (values && values[Symbol.iterator]) {\n        const toCheck = [...values]\n        toCheck.forEach(value => {\n            if (!isValidUid(value.id)) {\n                throwError(\n                    'Can not add a Model without id to a ModelCollection'\n                )\n            }\n        })\n    }\n}\n\n/**\n * Collection of `Model` objects that can be interacted upon. Can contain a pager object to easily navigate\n * pages within the system.\n *\n * @memberof module:model\n */\nclass ModelCollection {\n    /**\n     * @constructor\n     *\n     * @param {ModelDefinition} modelDefinition The `ModelDefinition` that this collection is for. This defines the type of models that\n     * are allowed to be added to the collection.\n     * @param {Model[]} values Initial values that should be added to the collection.\n     * @param {Object} pagerData Object with pager data. This object contains data that will be put into the `Pager` instance.\n     *\n     * @description\n     *\n     * Creates a new `ModelCollection` object based on the passed `modelDefinition`. Additionally values can be added by passing\n     * `Model` objects in the `values` parameter. The collection also exposes a pager object which can be used to navigate through\n     * the pages in the collection. For more information see the `Pager` class.\n     */\n    constructor(modelDefinition, values, pagerData) {\n        checkType(modelDefinition, ModelDefinition)\n        /**\n         * @property {ModelDefinition} modelDefinition The `ModelDefinition` that this collection is for. This defines the type of models that\n         * are allowed to be added to the collection.\n         */\n        this.modelDefinition = modelDefinition\n\n        /**\n         * @property {Pager} pager Pager object that is created from the pagerData that was passed when the collection was constructed. If no pager data was present\n         * the pager will have default values.\n         */\n        this.pager = new Pager(pagerData, modelDefinition)\n\n        // We can not extend the Map object right away in v8 contexts.\n        this.valuesContainerMap = new Map()\n        this[Symbol.iterator] = this.valuesContainerMap[Symbol.iterator].bind(\n            this.valuesContainerMap\n        )\n\n        throwIfContainsOtherThanModelObjects(values)\n        throwIfContainsModelWithoutUid(values)\n\n        // Add the values separately as not all Iterators return the same values\n        if (isArray(values)) {\n            values.forEach(value =>\n                this.valuesContainerMap.set(value.id, value)\n            )\n        }\n    }\n\n    /**\n     * @property {Number} size The number of Model objects that are in the collection.\n     *\n     * @description\n     * Contains the number of Model objects that are in this collection. If the collection is a collection with a pager. This\n     * does not take into account all the items in the database. Therefore when a pager is present on the collection\n     * the size will return the items on that page. To get the total number of items consult the pager.\n     */\n    get size() {\n        return this.valuesContainerMap.size\n    }\n\n    /**\n     * Adds a Model instance to the collection. The model is checked if it is a correct instance of `Model` and if it has\n     * a valid id. A valid id is a uid string of 11 alphanumeric characters.\n     *\n     * @param {Model} value Model instance to add to the collection.\n     * @returns {ModelCollection} Returns itself for chaining purposes.\n     *\n     * @throws {Error} When the passed value is not an instance of `Model`\n     * @throws {Error} Throws error when the passed value does not have a valid id.\n     */\n    add(value) {\n        throwIfContainsOtherThanModelObjects([value])\n        throwIfContainsModelWithoutUid([value])\n\n        this.set(value.id, value)\n        return this\n    }\n\n    /**\n     * If working with the Map type object is inconvenient this method can be used to return the values\n     * of the collection as an Array object.\n     *\n     * @returns {Array} Returns the values of the collection as an array.\n     */\n    toArray() {\n        const resultArray = []\n\n        this.forEach(model => {\n            resultArray.push(model)\n        })\n\n        return resultArray\n    }\n\n    static create(modelDefinition, values, pagerData) {\n        return new ModelCollection(modelDefinition, values, pagerData)\n    }\n\n    static throwIfContainsOtherThanModelObjects(value) {\n        return throwIfContainsOtherThanModelObjects(value)\n    }\n\n    static throwIfContainsModelWithoutUid(value) {\n        return throwIfContainsModelWithoutUid(value)\n    }\n\n    /**\n     * Clear the collection and remove all it's values.\n     *\n     * @returns {this} Returns itself for chaining purposes;\n     */\n    // TODO: Reset the pager?\n    clear() {\n        return this.valuesContainerMap.clear.call(this.valuesContainerMap)\n    }\n\n    delete(...args) {\n        return this.valuesContainerMap.delete.call(\n            this.valuesContainerMap,\n            ...args\n        )\n    }\n\n    entries() {\n        return this.valuesContainerMap.entries.call(this.valuesContainerMap)\n    }\n\n    // FIXME: This calls the forEach function with the values Map and not with the ModelCollection as the third argument\n    forEach(...args) {\n        return this.valuesContainerMap.forEach.call(\n            this.valuesContainerMap,\n            ...args\n        )\n    }\n\n    get(...args) {\n        return this.valuesContainerMap.get.call(\n            this.valuesContainerMap,\n            ...args\n        )\n    }\n\n    has(...args) {\n        return this.valuesContainerMap.has.call(\n            this.valuesContainerMap,\n            ...args\n        )\n    }\n\n    keys() {\n        return this.valuesContainerMap.keys.call(this.valuesContainerMap)\n    }\n\n    set(...args) {\n        return this.valuesContainerMap.set.call(\n            this.valuesContainerMap,\n            ...args\n        )\n    }\n\n    values() {\n        return this.valuesContainerMap.values.call(this.valuesContainerMap)\n    }\n}\n\nexport default ModelCollection\n"],"file":"ModelCollection.js"}