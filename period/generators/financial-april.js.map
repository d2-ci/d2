{"version":3,"sources":["../../../src/period/generators/financial-april.js"],"names":["generateFinancialAprilPeriodsUpToYear","year","numberOfYears","locale","Error","periods","date","Date","monthNames","i","period","endDate","setYear","getFullYear","setDate","getDate","startDate","name","id","push","reverse"],"mappings":";;;;;;;AAAA;;AACA;;AAEO,SAASA,qCAAT,GAA2G;AAAA,MAA5DC,IAA4D,uEAArD,8BAAqD;AAAA,MAAnCC,aAAmC,uEAAnB,EAAmB;AAAA,MAAfC,MAAe,uEAAN,IAAM;AAAE;AAChH,yCAAyBF,IAAzB;;AACA,MAAK,CAAC,sBAAUC,aAAV,CAAF,IAA+BA,aAAa,GAAG,CAAnD,EAAsD;AAClD,UAAM,IAAIE,KAAJ,CAAU,wFAAV,CAAN;AACH;;AAED,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASN,IAAI,GAAG,CAAhB,EAAmB,CAAnB,EAAsB,EAAtB,CAAb;AACA,MAAMO,UAAU,GAAG,qCAAuBL,MAAvB,CAAnB;;AAEA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,aAApB,EAAmCO,CAAC,EAApC,EAAwC;AACpC,QAAMC,MAAM,GAAG,EAAf;AACAA,IAAAA,MAAM,CAACC,OAAP,GAAiB,8BAAgBL,IAAhB,CAAjB;AACAA,IAAAA,IAAI,CAACM,OAAL,CAAaN,IAAI,CAACO,WAAL,KAAqB,CAAlC;AACAP,IAAAA,IAAI,CAACQ,OAAL,CAAaR,IAAI,CAACS,OAAL,KAAiB,CAA9B;AACAL,IAAAA,MAAM,CAACM,SAAP,GAAmB,8BAAgBV,IAAhB,CAAnB;AACAI,IAAAA,MAAM,CAACO,IAAP,aAAiBT,UAAU,CAAC,CAAD,CAA3B,cAAkCF,IAAI,CAACO,WAAL,EAAlC,gBAA0DL,UAAU,CAAC,CAAD,CAApE,cAA2EF,IAAI,CAACO,WAAL,KAAqB,CAAhG;AACAH,IAAAA,MAAM,CAACQ,EAAP,aAAeZ,IAAI,CAACO,WAAL,EAAf;AACAR,IAAAA,OAAO,CAACc,IAAR,CAAaT,MAAb;AACAJ,IAAAA,IAAI,CAACQ,OAAL,CAAaR,IAAI,CAACS,OAAL,KAAiB,CAA9B;AACH,GApB6G,CAsB9G;;;AACA,SAAOV,OAAO,CAACe,OAAR,EAAP;AACH","sourcesContent":["import { isInteger } from '../../lib/check';\nimport { validateIfValueIsInteger, formatAsISODate, getCurrentYear, getMonthNamesForLocale } from '../helpers';\n\nexport function generateFinancialAprilPeriodsUpToYear(year = getCurrentYear(), numberOfYears = 10, locale = 'en') { // eslint-disable-line import/prefer-default-export\n    validateIfValueIsInteger(year);\n    if ((!isInteger(numberOfYears)) || numberOfYears < 1) {\n        throw new Error('FinancialApril generator parameter `numberOfYears` should be an integer larger than 0.');\n    }\n\n    const periods = [];\n    const date = new Date(year + 1, 2, 31);\n    const monthNames = getMonthNamesForLocale(locale);\n\n    for (let i = 0; i < numberOfYears; i++) {\n        const period = {};\n        period.endDate = formatAsISODate(date);\n        date.setYear(date.getFullYear() - 1);\n        date.setDate(date.getDate() + 1);\n        period.startDate = formatAsISODate(date);\n        period.name = `${monthNames[3]} ${date.getFullYear()} - ${monthNames[2]} ${date.getFullYear() + 1}`;\n        period.id = `${date.getFullYear()}April`;\n        periods.push(period);\n        date.setDate(date.getDate() - 1);\n    }\n\n    // FinancialApril periods are collected backwards.\n    return periods.reverse();\n}\n"],"file":"financial-april.js"}