{"version":3,"sources":["../../src/model/Model.js"],"names":["pickAttributeValues","Model","modelDefinition","modelProperties","Object","defineProperty","value","writable","configurable","defineProperties","attributes","attributeProperties","getAttributeValues","setAttributeValues","attributeValues","setDirty","dirty","attributeDefinitions","Set","prototype"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,sBAAsB,mBAAO,iBAAP,EAA0B,EAA1B,CAA5B;;AAEA;AACA;;;;;;;;;;IASMC,K;AACF;;;;;;;;;;;;AAYA,iBAAYC,eAAZ,EAA6B;AAAA;;AAAA;;AACzB,0BAAUA,eAAV,EAA2B,QAA3B,EAAqC,iBAArC;AACA,0BAAUA,gBAAgBC,eAA1B,EAA2C,QAA3C,EAAqD,iBAArD;;AAEA;;;;;AAKAC,WAAOC,cAAP,CAAsB,IAAtB,EAA4B,iBAA5B,EAA+C,EAAEC,OAAOJ,eAAT,EAA/C;;AAEA;;;;;;AAMAE,WAAOC,cAAP,CAAsB,IAAtB,EAA4B,OAA5B,EAAqC,EAAEE,UAAU,IAAZ,EAAkBD,OAAO,KAAzB,EAArC;;AAEA;;;;;;;AAOAF,WAAOC,cAAP,CAAsB,IAAtB,EAA4B,YAA5B,EAA0C,EAAEG,cAAc,IAAhB,EAAsBD,UAAU,IAAhC,EAAsCD,OAAO,EAA7C,EAA1C;;AAEA;;;;;;AAMAF,WAAOK,gBAAP,CAAwB,IAAxB,EAA8BP,gBAAgBC,eAA9C;;AAEA,QAAMO,aAAa,EAAnB;AACA,QAAMC,sBAAsBT,gBAAgBS,mBAA5C;AACA,QAAI,oBAAQA,mBAAR,CAAJ,EAAkC;AAC9B;;;;;;;;;;;;AAYAP,aAAOC,cAAP,CAAsB,IAAtB,EAA4B,YAA5B,EAA0C,EAAEC,OAAOI,UAAT,EAA1C;;AAEA,UAAME,qBAAqB,SAArBA,kBAAqB;AAAA,eAAMZ,0BAAN;AAAA,OAA3B;AACA,UAAMa,qBAAqB,SAArBA,kBAAqB;AAAA,eAAoB,MAAKC,eAAL,GAAuBA,eAA3C;AAAA,OAA3B;AACA,UAAMC,WAAW,SAAXA,QAAW;AAAA,eAAO,MAAKC,KAAL,GAAa,IAApB;AAAA,OAAjB;AACA,UAAMC,uBAAuB,yBACzBN,mBADyB,EAEzBC,kBAFyB,EAGzBC,kBAHyB,EAIzBE,QAJyB,CAA7B;;AAOAX,aAAOK,gBAAP,CAAwBC,UAAxB,EAAoCO,oBAApC;AACH;;AAED,2CAA4B,IAAIC,GAAJ,CAAQ,EAAR,CAA5B;AACH;;AAED;;;;;;;;;;;;;;;;2BAYchB,e,EAAiB;AAC3B,aAAO,IAAID,KAAJ,CAAUC,eAAV,CAAP;AACH;;;;;;AAGL;;;AACAD,MAAMkB,SAAN;;kBAEelB,K","file":"Model.js","sourcesContent":["import { checkType, hasKeys } from '../lib/check';\nimport { pickOr } from '../lib/utils';\nimport ModelBase, { DIRTY_PROPERTY_LIST } from './ModelBase';\nimport createPropertyDefinitionsForAttributes from './helpers/attibutes';\n\nconst pickAttributeValues = pickOr('attributeValues', []);\n\n// TODO: Perhaps we can generate model classes dynamically based on the schemas and inherit from this.\n/**\n * @extends ModelBase\n *\n * @description\n * A Model represents an object from the DHIS2 Api. A model is created based of a ModelDefinition. The ModelDefinition\n * has the properties that the model should have.\n *\n * @memberof module:model\n */\nclass Model {\n    /**\n     * @constructor\n     *\n     * @param {ModelDefinition} modelDefinition The model definition that corresponds with the model.\n     * This is essential defining what type the model is representing.\n     *\n     * @description\n     * Will create a new model instanced based on the model definition. When creating a new instance the model\n     * definition needs to have both the modelValidations and modelProperties.\n     *\n     * The model properties will depend on the ModelDefinition. A model definition is based on a DHIS2 Schema.\n     */\n    constructor(modelDefinition) {\n        checkType(modelDefinition, 'object', 'modelDefinition');\n        checkType(modelDefinition.modelProperties, 'object', 'modelProperties');\n\n        /**\n         * @property {ModelDefinition} modelDefinition Stores reference to the modelDefinition that was used when\n         * creating the model. This property is not enumerable or writable and will therefore not show up when looping\n         * over the object properties.\n         */\n        Object.defineProperty(this, 'modelDefinition', { value: modelDefinition });\n\n        /**\n         * @property {Boolean} dirty Represents the state of the model. When the model is concidered `dirty`\n         * there are pending changes.\n         * This property is not enumerable or writable and will therefore not show up when looping\n         * over the object properties.\n         */\n        Object.defineProperty(this, 'dirty', { writable: true, value: false });\n\n        /**\n         * @private\n         * @property {Object} dataValues Values object used to store the actual model values. Normally access to the\n         * Model data will be done through accessor properties that are generated from the modelDefinition.\n         *\n         * @note {warning} This should not be accessed directly.\n         */\n        Object.defineProperty(this, 'dataValues', { configurable: true, writable: true, value: {} });\n\n        /**\n         * Attach the modelDefinition modelProperties (the properties from the schema) onto the Model.\n         *\n         * For a data element model the modelProperties would be the following\n         * https://play.dhis2.org/demo/api/schemas/dataElement.json?fields=properties\n         */\n        Object.defineProperties(this, modelDefinition.modelProperties);\n\n        const attributes = {};\n        const attributeProperties = modelDefinition.attributeProperties;\n        if (hasKeys(attributeProperties)) {\n            /**\n             * @property {Object} attributes The attributes objects contains references to custom attributes defined\n             * on the metadata object.\n             *\n             * @description\n             * These properties are generated based of the attributes that are created for the the specific schema.\n             * As these properties are not defined on the schemas they're put on a separate attributes object.\n             * When there are no attributes defined for the object type, the attributes property will not be attached\n             * to the model.\n             *\n             * @see https://docs.dhis2.org/2.27/en/user/html/dhis2_user_manual_en_full.html#manage_attribute\n             */\n            Object.defineProperty(this, 'attributes', { value: attributes });\n\n            const getAttributeValues = () => pickAttributeValues(this);\n            const setAttributeValues = attributeValues => (this.attributeValues = attributeValues);\n            const setDirty = () => (this.dirty = true);\n            const attributeDefinitions = createPropertyDefinitionsForAttributes(\n                attributeProperties,\n                getAttributeValues,\n                setAttributeValues,\n                setDirty,\n            );\n\n            Object.defineProperties(attributes, attributeDefinitions);\n        }\n\n        this[DIRTY_PROPERTY_LIST] = new Set([]);\n    }\n\n    /**\n     * @static\n     *\n     * @param {ModelDefinition} modelDefinition ModelDefinition from which the model should be created\n     * @returns {Model} Returns an instance of the model.\n     *\n     * @description The static method is a factory method to create Model objects. It calls `new Model()` with the passed `ModelDefinition`.\n     *\n     * ```js\n     * let myModel = Model.create(modelDefinition);\n     * ```\n     */\n    static create(modelDefinition) {\n        return new Model(modelDefinition);\n    }\n}\n\n// Set the prototype of the Model class, this way we're able to extend from an single object\nModel.prototype = ModelBase;\n\nexport default Model;\n"]}