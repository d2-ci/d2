{"version":3,"sources":["../../src/model/ModelCollection.js"],"names":["throwIfContainsOtherThanModelObjects","values","Symbol","iterator","toCheck","forEach","value","throwIfContainsModelWithoutUid","id","ModelCollection","modelDefinition","pagerData","pager","valuesContainerMap","Map","bind","set","resultArray","model","push","clear","call","args","delete","entries","get","has","keys","size"],"mappings":"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","file":"ModelCollection.js","sourcesContent":["import { isValidUid, isArray, checkType } from '../lib/check';\nimport { throwError } from '../lib/utils';\nimport Model from './Model';\nimport ModelDefinition from './ModelDefinition';\nimport Pager from '../pager/Pager';\n\nfunction throwIfContainsOtherThanModelObjects(values) {\n    if (values && values[Symbol.iterator]) {\n        const toCheck = [...values];\n        toCheck.forEach((value) => {\n            if (!(value instanceof Model)) {\n                throwError('Values of a ModelCollection must be instances of Model');\n            }\n        });\n    }\n}\n\nfunction throwIfContainsModelWithoutUid(values) {\n    if (values && values[Symbol.iterator]) {\n        const toCheck = [...values];\n        toCheck.forEach((value) => {\n            if (!isValidUid(value.id)) {\n                throwError('Can not add a Model without id to a ModelCollection');\n            }\n        });\n    }\n}\n\n/**\n * Collection of `Model` objects that can be interacted upon. Can contain a pager object to easily navigate\n * pages within the system.\n *\n * @memberof module:model\n */\nclass ModelCollection {\n    /**\n     * @constructor\n     *\n     * @param {ModelDefinition} modelDefinition The `ModelDefinition` that this collection is for. This defines the type of models that\n     * are allowed to be added to the collection.\n     * @param {Model[]} values Initial values that should be added to the collection.\n     * @param {Object} pagerData Object with pager data. This object contains data that will be put into the `Pager` instance.\n     *\n     * @description\n     *\n     * Creates a new `ModelCollection` object based on the passed `modelDefinition`. Additionally values can be added by passing\n     * `Model` objects in the `values` parameter. The collection also exposes a pager object which can be used to navigate through\n     * the pages in the collection. For more information see the `Pager` class.\n     */\n    constructor(modelDefinition, values, pagerData) {\n        checkType(modelDefinition, ModelDefinition);\n        /**\n         * @property {ModelDefinition} modelDefinition The `ModelDefinition` that this collection is for. This defines the type of models that\n         * are allowed to be added to the collection.\n         */\n        this.modelDefinition = modelDefinition;\n\n        /**\n         * @property {Pager} pager Pager object that is created from the pagerData that was passed when the collection was constructed. If no pager data was present\n         * the pager will have default values.\n         */\n        this.pager = new Pager(pagerData, modelDefinition);\n\n        // We can not extend the Map object right away in v8 contexts.\n        this.valuesContainerMap = new Map();\n        this[Symbol.iterator] = this.valuesContainerMap[Symbol.iterator].bind(this.valuesContainerMap);\n\n        throwIfContainsOtherThanModelObjects(values);\n        throwIfContainsModelWithoutUid(values);\n\n        // Add the values separately as not all Iterators return the same values\n        if (isArray(values)) {\n            values.forEach(value => this.valuesContainerMap.set(value.id, value));\n        }\n    }\n\n    /**\n     * @property {Number} size The number of Model objects that are in the collection.\n     *\n     * @description\n     * Contains the number of Model objects that are in this collection. If the collection is a collection with a pager. This\n     * does not take into account all the items in the database. Therefore when a pager is present on the collection\n     * the size will return the items on that page. To get the total number of items consult the pager.\n     */\n    get size() {\n        return this.valuesContainerMap.size;\n    }\n\n    /**\n     * Adds a Model instance to the collection. The model is checked if it is a correct instance of `Model` and if it has\n     * a valid id. A valid id is a uid string of 11 alphanumeric characters.\n     *\n     * @param {Model} value Model instance to add to the collection.\n     * @returns {ModelCollection} Returns itself for chaining purposes.\n     *\n     * @throws {Error} When the passed value is not an instance of `Model`\n     * @throws {Error} Throws error when the passed value does not have a valid id.\n     */\n    add(value) {\n        throwIfContainsOtherThanModelObjects([value]);\n        throwIfContainsModelWithoutUid([value]);\n\n        this.set(value.id, value);\n        return this;\n    }\n\n    /**\n     * If working with the Map type object is inconvenient this method can be used to return the values\n     * of the collection as an Array object.\n     *\n     * @returns {Array} Returns the values of the collection as an array.\n     */\n    toArray() {\n        const resultArray = [];\n\n        this.forEach((model) => {\n            resultArray.push(model);\n        });\n\n        return resultArray;\n    }\n\n    static create(modelDefinition, values, pagerData) {\n        return new ModelCollection(modelDefinition, values, pagerData);\n    }\n\n    static throwIfContainsOtherThanModelObjects(value) {\n        return throwIfContainsOtherThanModelObjects(value);\n    }\n\n    static throwIfContainsModelWithoutUid(value) {\n        return throwIfContainsModelWithoutUid(value);\n    }\n\n    /**\n     * Clear the collection and remove all it's values.\n     *\n     * @returns {this} Returns itself for chaining purposes;\n     */\n    // TODO: Reset the pager?\n    clear() {\n        return this.valuesContainerMap.clear.call(this.valuesContainerMap);\n    }\n\n    delete(...args) {\n        return this.valuesContainerMap.delete.call(this.valuesContainerMap, ...args);\n    }\n\n    entries() {\n        return this.valuesContainerMap.entries.call(this.valuesContainerMap);\n    }\n\n    // FIXME: This calls the forEach function with the values Map and not with the ModelCollection as the third argument\n    forEach(...args) {\n        return this.valuesContainerMap.forEach.call(this.valuesContainerMap, ...args);\n    }\n\n    get(...args) {\n        return this.valuesContainerMap.get.call(this.valuesContainerMap, ...args);\n    }\n\n    has(...args) {\n        return this.valuesContainerMap.has.call(this.valuesContainerMap, ...args);\n    }\n\n    keys() {\n        return this.valuesContainerMap.keys.call(this.valuesContainerMap);\n    }\n\n    set(...args) {\n        return this.valuesContainerMap.set.call(this.valuesContainerMap, ...args);\n    }\n\n    values() {\n        return this.valuesContainerMap.values.call(this.valuesContainerMap);\n    }\n}\n\nexport default ModelCollection;\n"]}