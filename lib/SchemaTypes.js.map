{"version":3,"sources":["../../src/lib/SchemaTypes.js"],"names":["getTypes","typeLookup","propertyType","indexOf","message","join","SchemaTypes"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,IAAMA,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAM,CACnB,MADmB,EAEnB,QAFmB,EAGnB,SAHmB,EAInB,SAJmB,EAKnB,OALmB,EAMnB,UANmB,EAOnB,KAPmB,EAQnB,aARmB,EASnB,aATmB,EASJ;AACf,SAVmB,EAWnB,SAXmB,EAYnB,YAZmB,EAanB,WAbmB,EAcnB,MAdmB,EAenB,SAfmB,EAgBnB,YAhBmB,EAiBnB,UAjBmB,CAAN;AAAA,CAAjB;;AAoBA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,YAAY,EAAI;AAC/B,MAAIF,QAAQ,GAAGG,OAAX,CAAmBD,YAAnB,KAAoC,CAApC,IAAyC,qBAASA,YAAT,CAA7C,EAAqE;AACjE,WAAOA,YAAP;AACH;;AAED,MAAME,OAAO,GAAG,CACZ,oBADY,EAEZF,YAFY,EAGZ,kCAHY,EAIdG,IAJc,CAIT,EAJS,CAAhB;AAMA,SAAO,uBAAWD,OAAX,CAAP;AACH,CAZD;;AAcA,IAAME,WAAW,GAAG;AAChBN,EAAAA,QAAQ,EAARA,QADgB;AAEhBC,EAAAA,UAAU,EAAVA;AAFgB,CAApB;eAKeK,W","sourcesContent":["import { throwError } from './utils'\nimport { isString } from './check'\n\nconst getTypes = () => [\n    'TEXT',\n    'NUMBER',\n    'INTEGER',\n    'BOOLEAN',\n    'EMAIL',\n    'PASSWORD',\n    'URL',\n    'PHONENUMBER',\n    'GEOLOCATION', // TODO: Geo location could be an advanced type of 2 numbers / strings?\n    'COLOR',\n    'COMPLEX',\n    'COLLECTION',\n    'REFERENCE',\n    'DATE',\n    'COMPLEX',\n    'IDENTIFIER',\n    'CONSTANT',\n]\n\nconst typeLookup = propertyType => {\n    if (getTypes().indexOf(propertyType) >= 0 && isString(propertyType)) {\n        return propertyType\n    }\n\n    const message = [\n        'Type from schema \"',\n        propertyType,\n        '\" not found available type list.',\n    ].join('')\n\n    return throwError(message)\n}\n\nconst SchemaTypes = {\n    getTypes,\n    typeLookup,\n}\n\nexport default SchemaTypes\n"],"file":"SchemaTypes.js"}