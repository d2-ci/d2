{"version":3,"sources":["../../../src/period/generators/daily.js"],"names":["generateDailyPeriodsForYear","year","locale","periods","date","Date","getFullYear","formattedDate","period","startDate","endDate","name","id","replace","push"],"mappings":";;;;;QASgBA,2B,GAAAA,2B;;AAThB;;AACA;;AAEA;;;;;;AAMO,SAASA,2BAAT,GAA6E;AAAA,QAAxCC,IAAwC,uEAAjC,8BAAiC;AAAA,QAAfC,MAAe,uEAAN,IAAM;AAAE;AAClF,2CAAyBD,IAAzB;;AAEA,QAAME,UAAU,EAAhB;AACA,QAAIC,OAAO,IAAIC,IAAJ,CAASJ,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAAX;;AAEA;AACA,WAAOG,KAAKE,WAAL,OAAuBL,IAA9B,EAAoC;AAChC,YAAMM,gBAAgB,8BAAgBH,IAAhB,CAAtB;;AAEA,YAAMI,SAAS;AACXC,uBAAWF,aADA;AAEXG,qBAASH,aAFE;AAGXI,kBAAM,mCAAkBP,IAAlB,EAAwBF,MAAxB,CAHK;AAIXU,gBAAIL,cAAcM,OAAd,CAAsB,IAAtB,EAA4B,EAA5B;AAJO,SAAf;;AAOAV,gBAAQW,IAAR,CAAaN,MAAb;;AAEA;AACA;AACAJ,eAAO,sBAAQ,CAAR,EAAWA,IAAX,CAAP;AACH;;AAED,WAAOD,OAAP;AACH","file":"daily.js","sourcesContent":["import { validateIfValueIsInteger, formatAsISODate, getCurrentYear, addDays } from '../helpers';\nimport { toLocaleDayFormat } from '../formatters';\n\n/**\n * Generate daily periods for the given year.\n *\n * @private\n * @param {Integer} [year=getCurrentYear()] The year to generate the daily periods for.\n */\nexport function generateDailyPeriodsForYear(year = getCurrentYear(), locale = 'en') { // eslint-disable-line import/prefer-default-export\n    validateIfValueIsInteger(year);\n\n    const periods = [];\n    let date = new Date(year, 0, 1);\n\n    // As long as we are within the current year create daily periods\n    while (date.getFullYear() === year) {\n        const formattedDate = formatAsISODate(date);\n\n        const period = {\n            startDate: formattedDate,\n            endDate: formattedDate,\n            name: toLocaleDayFormat(date, locale),\n            id: formattedDate.replace(/-/g, ''),\n        };\n\n        periods.push(period);\n\n        // Advance to the next day\n        // date.setDate(date.getDate() + 1);\n        date = addDays(1, date);\n    }\n\n    return periods;\n}\n"]}