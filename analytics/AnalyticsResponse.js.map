{"version":3,"sources":["../../src/analytics/AnalyticsResponse.js"],"names":["booleanMap","OUNAME","OU","DEFAULT_COLLECT_IGNORE_HEADERS","DEFAULT_PREFIX_IGNORE_HEADERS","getParseMiddleware","type","value","Number","isNaN","isFinite","parseFloat","isPrefixHeader","header","dimensions","includes","name","Boolean","Array","isArray","length","isCollectHeader","getPrefixedId","id","prefix","getNameByIdsByValueType","valueType","AnalyticsResponse","response","headers","extractHeaders","rows","extractRows","metaData","extractMetadata","map","index","AnalyticsResponseHeader","isPrefix","isCollect","headersWithOptionSet","filter","optionSet","slice","optionCodeIdMap","forEach","row","items","ids","getSortedUniqueRowIdStringsByHeader","prefixedId","hasHeader","ouNameHeaderIndex","getHeader","getIndex","ouHeaderIndex","ouId","ouName","undefined","find","parseByType","parseString","rowIds","from","Set","responseRow","sort","optionIds","code","reduce","acc","obj","Object","assign","organisationUnits","ou","organisationUnit","i","hierarchyPrefix","ouHierarchy","hierarchyIds","hierarchyNames","split","reverse","unshift","push","fullName","join","a","b","aFullName","bFullName"],"mappings":"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","sourcesContent":["import AnalyticsResponseHeader from './AnalyticsResponseHeader';\n\nconst booleanMap = {\n    0: 'No', // XXX i18n.no || 'No',\n    1: 'Yes', // i18n.yes || 'Yes',\n};\n\nconst OUNAME = 'ouname';\nconst OU = 'ou';\n\nconst DEFAULT_COLLECT_IGNORE_HEADERS = [\n    'psi',\n    'ps',\n    'eventdate',\n    'longitude',\n    'latitude',\n    'ouname',\n    'oucode',\n    'eventdate',\n    'eventdate',\n];\n\nconst DEFAULT_PREFIX_IGNORE_HEADERS = ['dy', ...DEFAULT_COLLECT_IGNORE_HEADERS];\n\nconst getParseMiddleware = (type) => {\n    switch (type) {\n    case 'STRING':\n    case 'TEXT':\n        return value => `${value}`;\n    case 'INTEGER':\n    case 'NUMBER':\n        return value => (!Number.isNaN(+value) && Number.isFinite(+value) ? parseFloat(+value) : value);\n    default:\n        return value => value;\n    }\n};\n\nconst isPrefixHeader = (header, dimensions) => {\n    if (DEFAULT_PREFIX_IGNORE_HEADERS.includes(header.name)) {\n        return false;\n    }\n\n    return Boolean(Array.isArray(dimensions) && dimensions.length === 0);\n};\n\nconst isCollectHeader = (header, dimensions) => {\n    if (DEFAULT_COLLECT_IGNORE_HEADERS.includes(header.name)) {\n        return false;\n    }\n\n    return Boolean(Array.isArray(dimensions) && dimensions.length === 0);\n};\n\nconst getPrefixedId = (id, prefix) => `${prefix || ''} ${id}`;\n\nconst getNameByIdsByValueType = (id, valueType) => {\n    if (valueType === 'BOOLEAN') {\n        return booleanMap[id];\n    }\n\n    return id;\n};\n\nclass AnalyticsResponse {\n    constructor(response) {\n        if (response) {\n            this.response = response;\n            this.headers = this.extractHeaders();\n            this.rows = this.extractRows();\n            this.metaData = this.extractMetadata();\n        }\n    }\n\n    extractHeaders() {\n        const dimensions = this.response.metaData.dimensions;\n        const headers = this.response.headers || [];\n\n        return headers.map(\n            (header, index) =>\n                new AnalyticsResponseHeader(header, {\n                    isPrefix: isPrefixHeader(header, dimensions[header.name]),\n                    isCollect: isCollectHeader(header, dimensions[header.name]),\n                    index,\n                }),\n        );\n    }\n\n    extractRows() {\n        const headersWithOptionSet = this.headers.filter(header => header.optionSet);\n        let rows = this.response.rows;\n\n        if (headersWithOptionSet.length) {\n            rows = rows.slice();\n\n            const optionCodeIdMap = this.optionCodeIdMap();\n\n            // replace option code with option uid\n            headersWithOptionSet.forEach((header) => {\n                rows.forEach((row, index) => {\n                    const id = optionCodeIdMap[header.name][row[header.index]];\n\n                    if (id) {\n                        rows[index][header.index] = id;\n                    }\n                });\n            });\n        }\n\n        return rows;\n    }\n\n    extractMetadata() {\n        const metaData = { ...this.response.metaData };\n\n        const { dimensions, items } = metaData;\n\n        // populate metaData dimensions and items\n        this.headers\n            .filter(header => !DEFAULT_COLLECT_IGNORE_HEADERS.includes(header.name))\n            .forEach((header) => {\n                let ids;\n\n                // collect row values\n                if (header.isCollect) {\n                    ids = this.getSortedUniqueRowIdStringsByHeader(header);\n                    dimensions[header.name] = ids;\n                } else {\n                    ids = dimensions[header.name];\n                }\n\n                if (header.isPrefix) {\n                    // create prefixed dimensions array\n                    dimensions[header.name] = ids.map(id => getPrefixedId(id, header.name));\n\n                    // create items\n                    dimensions[header.name].forEach((prefixedId, index) => {\n                        const id = ids[index];\n                        const valueType = header.valueType;\n\n                        const name = getNameByIdsByValueType(id, valueType);\n\n                        items[prefixedId] = { name };\n                    });\n                }\n            });\n\n        // for events, add items from 'ouname'\n        if (this.hasHeader(OUNAME) && this.hasHeader(OU)) {\n            const ouNameHeaderIndex = this.getHeader(OUNAME).getIndex();\n            const ouHeaderIndex = this.getHeader(OU).getIndex();\n            let ouId;\n            let ouName;\n\n            this.rows.forEach((row) => {\n                ouId = row[ouHeaderIndex];\n\n                if (items[ouId] === undefined) {\n                    ouName = row[ouNameHeaderIndex];\n\n                    items[ouId] = {\n                        name: ouName,\n                    };\n                }\n            });\n        }\n\n        return metaData;\n    }\n\n    getHeader(name) {\n        return this.headers.find(header => header.name === name);\n    }\n\n    hasHeader(name) {\n        return this.getHeader(name) !== undefined;\n    }\n\n    getSortedUniqueRowIdStringsByHeader(header) {\n        const parseByType = getParseMiddleware(header.valueType);\n        const parseString = getParseMiddleware('STRING');\n\n        const rowIds = Array.from(\n            // unique values\n            new Set(this.rows.map(responseRow => parseByType(responseRow[header.index]))),\n            // remove empty values\n        ).filter(id => id !== '');\n\n        return rowIds.sort().map(id => parseString(id));\n    }\n\n    optionCodeIdMap() {\n        const { dimensions, items } = this.response.metaData;\n        const map = {};\n\n        this.headers.filter(header => typeof header.optionSet === 'string').forEach((header) => {\n            const optionIds = dimensions[header.name];\n\n            map[header.name] = optionIds\n                .map(id => ({\n                    [items[id].code]: id,\n                }))\n                .reduce((acc, obj) => Object.assign(acc, obj), {});\n        });\n\n        return map;\n    }\n\n    sortOrganisationUnitsHierarchy() {\n        const organisationUnits = this.metaData.dimensions.ou;\n\n        organisationUnits.forEach((organisationUnit, i) => {\n            const hierarchyPrefix = this.metaData.ouHierarchy[organisationUnit];\n            const hierarchyIds = [organisationUnit];\n            const hierarchyNames = [];\n\n            hierarchyPrefix\n                .split('/')\n                .reverse()\n                .forEach((ouId) => {\n                    hierarchyIds.unshift(ouId);\n                });\n\n            hierarchyIds.forEach((ouId) => {\n                if (this.metaData.items[ouId]) {\n                    hierarchyNames.push(this.metaData.items[ouId].name);\n                }\n            });\n\n            organisationUnits[i] = {\n                id: organisationUnit,\n                fullName: hierarchyNames.join(' / '),\n            };\n        });\n\n        // XXX how does this work with different languages/collations?\n        organisationUnits.sort((a, b) => {\n            const aFullName = a.fullName;\n            const bFullName = b.fullName;\n\n            if (aFullName < bFullName) {\n                return -1;\n            }\n\n            return aFullName > bFullName ? 1 : 0;\n        });\n\n        this.metaData.dimensions.ou = organisationUnits.map(ou => ou.id);\n    }\n}\n\nexport default AnalyticsResponse;\n"],"file":"AnalyticsResponse.js"}