{"version":3,"sources":["../../../src/analytics/__tests__/AnalyticsResponseHeader.spec.js"],"names":["responseHeader","expectedResponseHeader","describe","beforeEach","AnalyticsResponseHeader","flags","isPrefix","isCollect","index","undefined","it","expect","toThrowErrorMatchingSnapshot","toEqual","header","name","column","valueType","type","hidden","meta","optionSet","Object","keys","forEach","key","setIndex","getIndex"],"mappings":"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","sourcesContent":["import AnalyticsResponseHeader from '../AnalyticsResponseHeader';\n\nlet responseHeader;\nlet expectedResponseHeader;\n\ndescribe('AnalyticsResponseHeader', () => {\n    beforeEach(() => {\n        responseHeader = new AnalyticsResponseHeader();\n        expectedResponseHeader = {};\n    });\n\n    describe('constructor', () => {\n        const flags = {\n            isPrefix: false,\n            isCollect: false,\n            index: undefined,\n        };\n\n        it('should not be allowed to be called without new', () => {\n            expect(() => AnalyticsResponseHeader()).toThrowErrorMatchingSnapshot();\n        });\n\n        it('should initialize properties', () => {\n            expect(responseHeader.isPrefix).toEqual(flags.isPrefix);\n            expect(responseHeader.isCollect).toEqual(flags.isCollect);\n            expect(responseHeader.index).toEqual(flags.index);\n        });\n\n        it('should set the header when passed as argument', () => {\n            const header = {\n                name: 'cejWyOfXge6',\n                column: 'Gender',\n                valueType: 'TEXT',\n                type: 'java.lang.String',\n                hidden: false,\n                meta: true,\n                optionSet: 'pC3N9N77UmT',\n            };\n\n            responseHeader = new AnalyticsResponseHeader(header);\n\n            expectedResponseHeader = { ...header, ...flags };\n\n            Object.keys(expectedResponseHeader).forEach((key) => {\n                expect(responseHeader[key]).toEqual(expectedResponseHeader[key]);\n            });\n        });\n    });\n\n    describe('properties', () => {\n        describe('.setIndex()', () => {\n            it('should set the index with the given value', () => {\n                responseHeader.setIndex(12);\n\n                expect(responseHeader.index).toEqual(12);\n            });\n\n            it('should set the index as numeric when passing a string', () => {\n                responseHeader.setIndex('10');\n\n                expect(responseHeader.index).toEqual(10);\n            });\n\n            it('should set the index as integer', () => {\n                responseHeader.setIndex(12.5);\n\n                expect(responseHeader.index).toEqual(12);\n            });\n        });\n\n        describe('.getIndex()', () => {\n            it('should return the correct index value', () => {\n                responseHeader.index = 17;\n\n                expect(responseHeader.getIndex()).toEqual(17);\n            });\n        });\n    });\n});\n"],"file":"AnalyticsResponseHeader.spec.js"}