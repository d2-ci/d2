{"version":3,"sources":["../../../src/analytics/__tests__/AnalyticsRequest.spec.js"],"names":["request","expectedParameters","getFuncName","parameter","charAt","toUpperCase","slice","describe","beforeEach","AnalyticsRequest","it","expect","toThrowErrorMatchingSnapshot","parameters","toEqual","dimensions","filters","endPoint","addDataDimension","dimension","items","chartModelDefinition","ModelDefinition","createFromSchema","fixtures","get","attributes","model","create","fromModel","addOrgUnitDimension","addPeriodDimension","addDimension","addDataFilter","addOrgUnitFilter","addPeriodFilter","addFilter","params","completedOnly","aggregationType","withParameters","withAggregationType","forEach","funcName","page","pageSize","Object","entries","key","value","withCoordinateField","coordinateField","withFormat","format","withPath","path","withProgram","program","withDisplayProperty","displayProperty","withOuMode","ouMode","withOutputType","outputType","withEventStatus","eventStatus","withLimit","limit","withProgramStatus","programStatus","withSortOrder","sortOrder","buildUrl","expectedSearchParams","url","URL","searchParams","search","split","p","pathname","buildQuery","filter","withHierarchyMeta","hierarchyMeta"],"mappings":"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","sourcesContent":["import fixtures from '../../__fixtures__/fixtures';\nimport AnalyticsRequest from '../AnalyticsRequest';\nimport ModelDefinition from '../../model/ModelDefinition';\n\nlet request;\nlet expectedParameters;\n\nconst getFuncName = parameter => `with${parameter.charAt(0).toUpperCase()}${parameter.slice(1)}`;\n\ndescribe('AnalyticsRequest', () => {\n    beforeEach(() => {\n        request = new AnalyticsRequest();\n        expectedParameters = {};\n    });\n\n    describe('constructor', () => {\n        it('should not be allowed to be called without new', () => {\n            expect(() => AnalyticsRequest()).toThrowErrorMatchingSnapshot(); // eslint-disable-line new-cap\n        });\n\n        it('should initialize properties', () => {\n            expect(request.parameters).toEqual({});\n            expect(request.dimensions).toEqual([]);\n            expect(request.filters).toEqual([]);\n        });\n\n        it('should have a default endpoint value', () => {\n            expect(request.endPoint).toEqual('analytics');\n        });\n\n        it('should set the endpoint when passed as argument', () => {\n            request = new AnalyticsRequest({ endPoint: 'analytics2' });\n\n            expect(request.endPoint).toEqual('analytics2');\n        });\n    });\n\n    describe('properties', () => {\n        describe('.addDataDimension()', () => {\n            it('should add the dx dimension', () => {\n                request.addDataDimension('Jtf34kNZhzP');\n\n                expect(request.dimensions).toEqual([\n                    { dimension: 'dx', items: ['Jtf34kNZhzP'] },\n                ]);\n            });\n\n            it('should append unique values to the dx dimension on subsequent calls', () => {\n                request = request\n                    .addDataDimension('Jtf34kNZhzP')\n                    .addDataDimension([\n                        'Jtf34kNZhzP',\n                        'SA7WeFZnUci',\n                        'V37YqbqpEhV',\n                        'bqK6eSIwo3h',\n                        'cYeuwXTCPkU',\n                        'fbfJHSPpUQD',\n                    ]);\n\n                expect(request.dimensions).toEqual([\n                    {\n                        dimension: 'dx',\n                        items: [\n                            'Jtf34kNZhzP',\n                            'SA7WeFZnUci',\n                            'V37YqbqpEhV',\n                            'bqK6eSIwo3h',\n                            'cYeuwXTCPkU',\n                            'fbfJHSPpUQD',\n                        ],\n                    },\n                ]);\n            });\n        });\n\n        describe('.fromModel()', () => {\n            const chartModelDefinition = ModelDefinition.createFromSchema(\n                fixtures.get('/api/schemas/chart'),\n                fixtures.get('/api/attributes').attributes,\n            );\n            const model = chartModelDefinition.create(fixtures.get('/chartAllFields'));\n\n            it('should add dimensions from the model', () => {\n                request = request.fromModel(model);\n\n                expect(request.dimensions).toEqual([\n                    { dimension: 'dx', items: ['Uvn6LCg7dVU', 'sB79w2hiLp8'] },\n                    { dimension: 'ou', items: ['USER_ORGUNIT', 'USER_ORGUNIT_CHILDREN'] },\n                ]);\n            });\n\n            it('should add filters from the model', () => {\n                request = request.fromModel(model);\n\n                expect(request.filters).toEqual([\n                    { dimension: 'pe', items: ['LAST_SIX_MONTH'] },\n                ]);\n            });\n\n            it('should convert filters into dimensions when passing the optional flag', () => {\n                request = request.fromModel(model, true);\n\n                expect(request.dimensions).toEqual([\n                    { dimension: 'dx', items: ['Uvn6LCg7dVU', 'sB79w2hiLp8'] },\n                    { dimension: 'ou', items: ['USER_ORGUNIT', 'USER_ORGUNIT_CHILDREN'] },\n                    { dimension: 'pe', items: ['LAST_SIX_MONTH'] },\n                ]);\n            });\n        });\n\n        describe('.addOrgUnitDimension()', () => {\n            it('should add the ou dimension', () => {\n                request.addOrgUnitDimension(['ImspTQPwCqd']);\n\n                expect(request.dimensions).toEqual([\n                    { dimension: 'ou', items: ['ImspTQPwCqd'] },\n                ]);\n            });\n\n            it('should append unique values to the ou dimension on subsequent calls', () => {\n                request = request\n                    .addOrgUnitDimension(['ImspTQPwCqd'])\n                    .addOrgUnitDimension(['ImspTQPwCqd', 'O6uvpzGd5pu']);\n\n                expect(request.dimensions).toEqual([\n                    { dimension: 'ou', items: ['ImspTQPwCqd', 'O6uvpzGd5pu'] },\n                ]);\n            });\n        });\n\n        describe('.addPeriodDimension()', () => {\n            it('should add the pe dimension', () => {\n                request.addPeriodDimension('2017-01');\n\n                expect(request.dimensions).toEqual([\n                    { dimension: 'pe', items: ['2017-01'] },\n                ]);\n            });\n\n            it('should append unique values to the pe dimension on subsequent calls', () => {\n                request = request\n                    .addPeriodDimension('2017-01')\n                    .addPeriodDimension(['2017-01', '2017-02', '2017-03']);\n\n                expect(request.dimensions).toEqual([\n                    { dimension: 'pe', items: ['2017-01', '2017-02', '2017-03'] },\n                ]);\n            });\n        });\n\n        describe('.addDimension()', () => {\n            it('should add the given dimension without any associated value', () => {\n                request.addDimension('Jtf34kNZhzP');\n\n                expect(request.dimensions).toEqual([\n                    { dimension: 'Jtf34kNZhzP', items: [] },\n                ]);\n            });\n\n            it('should add the given dimension with the associated value (passed as string)', () => {\n                request.addDimension('J5jldMd8OHv', 'CXw2yu5fodb');\n\n                expect(request.dimensions).toEqual([\n                    { dimension: 'J5jldMd8OHv', items: ['CXw2yu5fodb'] },\n                ]);\n            });\n\n            it('should append values (passed as array) to the given dimension', () => {\n                request = request\n                    .addDimension('J5jldMd8OHv', 'CXw2yu5fodb')\n                    .addDimension('J5jldMd8OHv', ['EYbopBOJWsW', 'test']);\n\n                expect(request.dimensions).toEqual([\n                    { dimension: 'J5jldMd8OHv', items: ['CXw2yu5fodb', 'EYbopBOJWsW', 'test'] },\n                ]);\n            });\n\n            it('should not append a value already present in the dimension', () => {\n                request = request\n                    .addDimension('J5jldMd8OHv', ['EYbopBOJWsW', 'test'])\n                    .addDimension('J5jldMd8OHv', 'test');\n\n                expect(request.dimensions).toEqual([\n                    { dimension: 'J5jldMd8OHv', items: ['EYbopBOJWsW', 'test'] },\n                ]);\n            });\n        });\n\n        describe('.addDataFilter()', () => {\n            it('should add the dx dimension filter', () => {\n                request = request.addDataFilter('Jtf34kNZhzP');\n\n                expect(request.filters).toEqual([\n                    { dimension: 'dx', items: ['Jtf34kNZhzP'] },\n                ]);\n            });\n        });\n\n        describe('.addOrgUnitFilter()', () => {\n            it('should add the ou dimension filter', () => {\n                request.addOrgUnitFilter(['ImspTQPwCqd']);\n\n                expect(request.filters).toEqual([\n                    { dimension: 'ou', items: ['ImspTQPwCqd'] },\n                ]);\n            });\n\n            it('should append unique values to the ou dimension filter on subsequent calls', () => {\n                request = request\n                    .addOrgUnitFilter('ImspTQPwCqd')\n                    .addOrgUnitFilter(['ImspTQPwCqd', 'O6uvpzGd5pu']);\n\n                expect(request.filters).toEqual([\n                    { dimension: 'ou', items: ['ImspTQPwCqd', 'O6uvpzGd5pu'] },\n                ]);\n            });\n        });\n\n        describe('.addPeriodFilter()', () => {\n            it('should add the pe dimension filter', () => {\n                request.addPeriodFilter('2017-01');\n\n                expect(request.filters).toEqual([\n                    { dimension: 'pe', items: ['2017-01'] },\n                ]);\n            });\n\n            it('should append unique values to the pe dimension filter on subsequent calls', () => {\n                request = request\n                    .addPeriodFilter('2017-01')\n                    .addPeriodFilter(['2017-01', '2017-02', '2017-03']);\n\n                expect(request.filters).toEqual([\n                    { dimension: 'pe', items: ['2017-01', '2017-02', '2017-03'] },\n                ]);\n            });\n        });\n\n        describe('.addFilter()', () => {\n            it('should add the given dimensions as filter without any associated value', () => {\n                request.addFilter('Jtf34kNZhzP');\n\n                expect(request.filters).toEqual([\n                    { dimension: 'Jtf34kNZhzP', items: [] },\n                ]);\n            });\n\n            it('should add the given dimensions as filter with the associated value (passed as string)', () => {\n                request.addFilter('J5jldMd8OHv', 'CXw2yu5fodb');\n\n                expect(request.filters).toEqual([\n                    { dimension: 'J5jldMd8OHv', items: ['CXw2yu5fodb'] },\n                ]);\n            });\n\n            it('should append values (passed as array) to the given dimension filter', () => {\n                request = request\n                    .addFilter('J5jldMd8OHv', 'CXw2yu5fodb')\n                    .addFilter('J5jldMd8OHv', ['EYbopBOJWsW', 'test']);\n\n                expect(request.filters).toEqual([\n                    { dimension: 'J5jldMd8OHv', items: ['CXw2yu5fodb', 'EYbopBOJWsW', 'test'] },\n                ]);\n            });\n\n            it('should not append a value already present in the dimension filter', () => {\n                request = request\n                    .addFilter('J5jldMd8OHv', ['EYbopBOJWsW', 'test'])\n                    .addFilter('J5jldMd8OHv', 'test');\n\n                expect(request.filters).toEqual([\n                    { dimension: 'J5jldMd8OHv', items: ['EYbopBOJWsW', 'test'] },\n                ]);\n            });\n        });\n\n        describe('.withParameters()', () => {\n            const params = {\n                completedOnly: true,\n                aggregationType: 'AVERAGE',\n            };\n\n            it('should set the given parameters in the request', () => {\n                request.withParameters(params);\n\n                expect(request.parameters).toEqual(params);\n            });\n\n            it('should override a parameter if already present', () => {\n                request = request.withAggregationType('COUNT');\n\n                expect(request.parameters).toEqual({ aggregationType: 'COUNT' });\n\n                request = request.withParameters(params);\n\n                expect(request.parameters).toEqual(params);\n            });\n        });\n\n        describe('with boolean parameter', () => {\n            [\n                'aggregateData',\n                'coordinatesOnly',\n                'collapseDataDimensions',\n                'hideEmptyRows',\n                'hideEmptyColumns',\n                'hierarchyMeta',\n                'ignoreLimit',\n                'includeClusterPoints',\n                'includeNumDen',\n                'showHierarchy',\n                'skipData',\n                'skipMeta',\n                'skipRounding',\n                'tableLayout',\n                'includeMetadataDetails',\n            ].forEach((parameter) => {\n                const funcName = getFuncName(parameter);\n\n                it(`should add the ${parameter} parameter with default value`, () => {\n                    request[funcName]();\n                    expectedParameters[parameter] = true;\n\n                    expect(request.parameters).toEqual(expectedParameters);\n                });\n\n                it(`should replace the ${parameter} parameter on subsequent calls with the specified value`, () => {\n                    request[funcName](false);\n                    expectedParameters[parameter] = false;\n\n                    expect(request.parameters).toEqual(expectedParameters);\n                });\n            });\n        });\n\n        describe('with value parameter', () => {\n            [\n                'approvalLevel',\n                'asc', // XXX\n                'bbox',\n                'clusterSize',\n                'columns', // XXX\n                'desc', // XXX\n                'endDate',\n                'inputIdScheme',\n                'measureCriteria',\n                'outputIdScheme',\n                'preAggregationMeasureCriteria',\n                'relativePeriodDate',\n                'rows', // XXX\n                'stage',\n                'startDate',\n                'userOrgUnit',\n                'value', // XXX\n            ].forEach((parameter) => {\n                const funcName = getFuncName(parameter);\n\n                it(`should add the ${parameter} parameter with the specified value`, () => {\n                    request[funcName]('test');\n                    expectedParameters[parameter] = 'test';\n\n                    expect(request.parameters).toEqual(expectedParameters);\n                });\n\n                it(`should replace the ${parameter} parameter on subsequent calls with the specified value`, () => {\n                    request = request[funcName]('test');\n                    request[funcName]('test2');\n                    expectedParameters[parameter] = 'test2';\n\n                    expect(request.parameters).toEqual(expectedParameters);\n                });\n\n                it(`should not replace the ${parameter} parameter when called without passing a value`, () => {\n                    request = request[funcName]('test');\n                    request[funcName]();\n                    expectedParameters[parameter] = 'test';\n\n                    expect(request.parameters).toEqual(expectedParameters);\n                });\n            });\n        });\n\n        describe('with numeric value parameter', () => {\n            const params = {\n                page: 1,\n                pageSize: 50,\n            };\n\n            Object.entries(params).forEach(([key, value]) => {\n                const parameter = key;\n                const funcName = getFuncName(parameter);\n\n                it(`should add the ${parameter} parameter with the default value`, () => {\n                    request[funcName]();\n                    expectedParameters[parameter] = value;\n\n                    expect(request.parameters).toEqual(expectedParameters);\n                });\n\n                it(`should add the ${parameter} parameter with the specified value`, () => {\n                    request[funcName](10);\n                    expectedParameters[parameter] = 10;\n\n                    expect(request.parameters).toEqual(expectedParameters);\n                });\n\n                it(`should replace the ${parameter} parameter on subsequent calls with the specified value`, () => {\n                    request = request[funcName](10);\n                    request[funcName](20);\n                    expectedParameters[parameter] = 20;\n\n                    expect(request.parameters).toEqual(expectedParameters);\n                });\n            });\n        });\n\n        describe('.withCoordinateField()', () => {\n            it('should set the coordinateField to the specified value', () => {\n                request.withCoordinateField('abc');\n\n                expect(request.parameters).toEqual({ coordinateField: 'abc' });\n            });\n\n            it('should set the coordinateField to default value when called with no value', () => {\n                request.withCoordinateField();\n\n                expect(request.parameters).toEqual({ coordinateField: 'EVENT' });\n            });\n        });\n\n        describe('.withFormat()', () => {\n            it('should set the format to the specified value', () => {\n                request.withFormat('xml');\n\n                expect(request.format).toEqual('xml');\n            });\n\n            it('should set the format to default value when called with no value', () => {\n                request.withFormat();\n\n                expect(request.format).toEqual('json');\n            });\n        });\n\n        describe('.withPath()', () => {\n            it('should set the request path to the specified value', () => {\n                request.withPath('test');\n\n                expect(request.path).toEqual('test');\n            });\n\n            it('should replace the path on subsequent requests', () => {\n                request = request.withPath('test').withPath('another/path');\n\n                expect(request.path).toEqual('another/path');\n            });\n\n            it('should not replace the path when called with no value', () => {\n                request = request.withPath('some/path').withPath();\n\n                expect(request.path).toEqual('some/path');\n            });\n        });\n\n        describe('.withProgram()', () => {\n            it('should set the program to the specified value', () => {\n                request.withProgram('eBAyeGv0exc');\n\n                expect(request.program).toEqual('eBAyeGv0exc');\n            });\n\n            it('should not replace the program when called with no value', () => {\n                request = request.withProgram('eBAyeGv0exc').withProgram();\n\n                expect(request.program).toEqual('eBAyeGv0exc');\n            });\n        });\n\n        describe('.withAggregationType()', () => {\n            it('should add the aggregationType parameter with the specified value', () => {\n                request.withAggregationType('SUM');\n\n                expect(request.parameters).toEqual({ aggregationType: 'SUM' });\n            });\n\n            it('should add the aggregationType parameter and uppercase the value', () => {\n                request.withAggregationType('stddev');\n\n                expect(request.parameters).toEqual({ aggregationType: 'STDDEV' });\n            });\n\n            it('should allow a aggregationType that is not in present in the list', () => {\n                request.withAggregationType('new-constant');\n\n                expect(request.parameters).toEqual({ aggregationType: 'new-constant' });\n            });\n        });\n\n        describe('.withDisplayProperty()', () => {\n            it('should add the displayProperty parameter with the specified value', () => {\n                request.withDisplayProperty('NAME');\n\n                expect(request.parameters).toEqual({ displayProperty: 'NAME' });\n            });\n\n            it('should add the displayProperty parameter and uppercase the value', () => {\n                request.withDisplayProperty('shortname');\n\n                expect(request.parameters).toEqual({ displayProperty: 'SHORTNAME' });\n            });\n\n            it('should allow a displayProperty that is not present in the list', () => {\n                request.withDisplayProperty('new-constant');\n\n                expect(request.parameters).toEqual({ displayProperty: 'new-constant' });\n            });\n        });\n\n        describe('.withOuMode()', () => {\n            it('should add the ouMode parameter with the specified value', () => {\n                request.withOuMode('DESCENDANTS');\n\n                expect(request.parameters).toEqual({ ouMode: 'DESCENDANTS' });\n            });\n\n            it('should add the ouMode parameter and uppercase the value', () => {\n                request.withOuMode('children');\n\n                expect(request.parameters).toEqual({ ouMode: 'CHILDREN' });\n            });\n\n            it('should allow a ouMode that is not present in the list', () => {\n                request.withOuMode('new-constant');\n\n                expect(request.parameters).toEqual({ ouMode: 'new-constant' });\n            });\n        });\n\n        describe('.withOutputType()', () => {\n            it('should add the outputType parameter with the specified value', () => {\n                request.withOutputType('EVENT');\n\n                expect(request.parameters).toEqual({ outputType: 'EVENT' });\n            });\n\n            it('should add the outputType parameter and uppercase the value', () => {\n                request.withOutputType('enrollment');\n\n                expect(request.parameters).toEqual({ outputType: 'ENROLLMENT' });\n            });\n\n            it('should allow a outputType that is not present in the list', () => {\n                request.withOutputType('new-constant');\n\n                expect(request.parameters).toEqual({ outputType: 'new-constant' });\n            });\n        });\n\n        describe('.withEventStatus()', () => {\n            it('should add the eventStatus parameter with the specified value', () => {\n                request.withEventStatus('ACTIVE');\n\n                expect(request.parameters).toEqual({ eventStatus: 'ACTIVE' });\n            });\n\n            it('should add the eventStatus parameter and uppercase the value', () => {\n                request.withEventStatus('skipped');\n\n                expect(request.parameters).toEqual({ eventStatus: 'SKIPPED' });\n            });\n\n            it('should allow a eventStatus that is not present in the list', () => {\n                request.withEventStatus('new-constant');\n\n                expect(request.parameters).toEqual({ eventStatus: 'new-constant' });\n            });\n        });\n\n        describe('.withLimit()', () => {\n            it('should add the limit parameter with the specified value', () => {\n                request.withLimit(1000);\n\n                expect(request.parameters).toEqual({ limit: 1000 });\n            });\n\n            it('should not allow a limit greater than 10000', () => {\n                request.withLimit('20000');\n\n                expect(request.parameters).toEqual({ limit: 10000 });\n            });\n\n            it('should not replace the value when called with no value', () => {\n                request = request.withLimit('20000').withLimit();\n\n                expect(request.parameters).toEqual({ limit: 10000 });\n            });\n        });\n\n        describe('.withProgramStatus()', () => {\n            it('should add the programStatus parameter with the specified value', () => {\n                request.withProgramStatus('ACTIVE');\n\n                expect(request.parameters).toEqual({ programStatus: 'ACTIVE' });\n            });\n\n            it('should add the programStatus parameter and uppercase the value', () => {\n                request.withProgramStatus('completed');\n\n                expect(request.parameters).toEqual({ programStatus: 'COMPLETED' });\n            });\n\n            it('should allow a programStatus that is not present in the list', () => {\n                request.withProgramStatus('new-constant');\n\n                expect(request.parameters).toEqual({ programStatus: 'new-constant' });\n            });\n        });\n\n        describe('.withSortOrder()', () => {\n            it('should add the sortOrder parameter with the specified value', () => {\n                request.withSortOrder('ASC');\n\n                expect(request.parameters).toEqual({ sortOrder: 'ASC' });\n            });\n\n            it('should add the sortOrder parameter and uppercase the value', () => {\n                request.withSortOrder('desc');\n\n                expect(request.parameters).toEqual({ sortOrder: 'DESC' });\n            });\n\n            it('should allow a sortOrder that is not present in the list', () => {\n                request.withSortOrder('new-constant');\n\n                expect(request.parameters).toEqual({ sortOrder: 'new-constant' });\n            });\n        });\n    });\n\n    describe('.buildUrl()', () => {\n        it('should append the path to the endpoint', () => {\n            request = request.addOrgUnitDimension(['ImspTQPwCqd']).withPath('test');\n\n            expect(request.buildUrl()).toEqual('analytics/test.json?dimension=ou:ImspTQPwCqd');\n        });\n\n        it('shold build the URL with path, program and format', () => {\n            request = request\n                .withPath('events/aggregate')\n                .withProgram('program-id')\n                .withFormat('xml')\n                .addOrgUnitDimension(['ImspTQPwCqd'])\n                .addPeriodDimension('201711')\n                .addDataDimension('test-dx-dim');\n\n            const expectedSearchParams = {\n                'ou:ImspTQPwCqd': 'dimension',\n                'pe:201711': 'dimension',\n                'dx:test-dx-dim': 'dimension',\n            };\n\n            const url = new URL(`http://localhost/${request.buildUrl()}`);\n            const searchParams = {};\n            let key;\n            let value;\n\n            url.search\n                .slice(1)\n                .split('&')\n                .forEach((p) => {\n                    [key, value] = p.split('=');\n                    searchParams[value] = key;\n                });\n\n            expect(url.pathname).toEqual('/analytics/events/aggregate/program-id.xml');\n            expect(searchParams).toEqual(expectedSearchParams);\n        });\n\n        it('should build the URL with a dimension without items', () => {\n            request = request.addDimension('test-dim');\n\n            expect(request.buildUrl()).toEqual('analytics.json?dimension=test-dim');\n        });\n    });\n\n    describe('.buildQuery()', () => {\n        it('should return an empty object when there are no filters nor parameters', () => {\n            expect(request.buildQuery()).toEqual({});\n        });\n\n        it('should return an object when a filter is added', () => {\n            request.addOrgUnitFilter(['ImspTQPwCqd']);\n\n            expect(request.buildQuery()).toEqual({ filter: ['ou:ImspTQPwCqd'] });\n        });\n\n        it('should return an object when a filter is added with multiple values', () => {\n            request.addOrgUnitFilter(['ImspTQPwCqd', 'O6uvpzGd5pu']);\n\n            expect(request.buildQuery()).toEqual({ filter: ['ou:ImspTQPwCqd;O6uvpzGd5pu'] });\n        });\n\n        it('should return an object when a parameter is added', () => {\n            request.withHierarchyMeta();\n\n            expect(request.buildQuery()).toEqual({ hierarchyMeta: true });\n        });\n\n        it('should return an object when parameters and filters are added', () => {\n            request = request\n                .addOrgUnitFilter(['ImspTQPwCqd', 'O6uvpzGd5pu'])\n                .withHierarchyMeta(false);\n\n            expect(request.buildQuery()).toEqual({\n                hierarchyMeta: false,\n                filter: ['ou:ImspTQPwCqd;O6uvpzGd5pu'],\n            });\n        });\n    });\n});\n"],"file":"AnalyticsRequest.spec.js"}