{"version":3,"sources":["../../../src/period/generators/yearly.js"],"names":["generateYearlyPeriodsUpToYear","year","numberOfYears","Error","periods","date","Date","getFullYear","period","endDate","setMonth","startDate","name","toString","id","push","setDate","reverse"],"mappings":";;;;;;;AAAA;;AACA;;AAEO,SAASA,6BAAT,GAAoF;AAAA,MAA7CC,IAA6C,uEAAtC,8BAAsC;AAAA,MAApBC,aAAoB,uEAAJ,EAAI;AAAE;AACzF,yCAAyBD,IAAzB;;AACA,MAAK,CAAC,sBAAUC,aAAV,CAAF,IAA+BA,aAAa,GAAG,CAAnD,EAAsD;AAClD,UAAM,IAAIC,KAAJ,CAAU,gFAAV,CAAN;AACH;;AAED,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,IAAI,GAAG,IAAIC,IAAJ,kBAAmBL,IAAnB,EAAb;;AAEA,SAAQA,IAAI,GAAGI,IAAI,CAACE,WAAL,EAAR,GAA8BL,aAArC,EAAoD;AAChD,QAAMM,MAAM,GAAG,EAAf;AACAA,IAAAA,MAAM,CAACC,OAAP,GAAiB,8BAAgBJ,IAAhB,CAAjB;AACAA,IAAAA,IAAI,CAACK,QAAL,CAAc,CAAd,EAAiB,CAAjB;AACAF,IAAAA,MAAM,CAACG,SAAP,GAAmB,8BAAgBN,IAAhB,CAAnB;AACAG,IAAAA,MAAM,CAACI,IAAP,GAAcP,IAAI,CAACE,WAAL,GAAmBM,QAAnB,EAAd;AACAL,IAAAA,MAAM,CAACM,EAAP,GAAYT,IAAI,CAACE,WAAL,GAAmBM,QAAnB,EAAZ;AACAT,IAAAA,OAAO,CAACW,IAAR,CAAaP,MAAb;AACAH,IAAAA,IAAI,CAACW,OAAL,CAAa,CAAb;AACH,GAlBsF,CAoBvF;;;AACA,SAAOZ,OAAO,CAACa,OAAR,EAAP;AACH","sourcesContent":["import { isInteger } from '../../lib/check';\nimport { validateIfValueIsInteger, formatAsISODate, getCurrentYear } from '../helpers';\n\nexport function generateYearlyPeriodsUpToYear(year = getCurrentYear(), numberOfYears = 10) { // eslint-disable-line import/prefer-default-export\n    validateIfValueIsInteger(year);\n    if ((!isInteger(numberOfYears)) || numberOfYears < 1) {\n        throw new Error('Yearly generator parameter `numberOfYears` should be an integer larger than 0.');\n    }\n\n    const periods = [];\n    const date = new Date(`31 Dec ${year}`);\n\n    while ((year - date.getFullYear()) < numberOfYears) {\n        const period = {};\n        period.endDate = formatAsISODate(date);\n        date.setMonth(0, 1);\n        period.startDate = formatAsISODate(date);\n        period.name = date.getFullYear().toString();\n        period.id = date.getFullYear().toString();\n        periods.push(period);\n        date.setDate(0);\n    }\n\n    // Years are collected backwards. If isReverse is true, then do nothing. Else reverse to correct order and return.\n    return periods.reverse();\n}\n"],"file":"yearly.js"}